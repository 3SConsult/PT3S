{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "389a026d-aa54-4997-935a-ae16c17d5d83",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "aaeb7c69-8897-4eb1-a73d-f59b6bca292c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import logging\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import numpy as np\n",
    "import ipywidgets as widgets\n",
    "from ipywidgets import interact\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "import matplotlib.gridspec as gridspec\n",
    "import matplotlib.ticker as ticker\n",
    "import matplotlib.colors as mcolors\n",
    "from matplotlib.pyplot import Polygon\n",
    "from matplotlib.ticker import FuncFormatter\n",
    "from matplotlib.dates import DateFormatter, MinuteLocator\n",
    "import matplotlib.ticker as ticker\n",
    "\n",
    "try:\n",
    "    from PT3S import dxAndMxHelperFcts\n",
    "except:\n",
    "    import dxAndMxHelperFcts\n",
    "\n",
    "try:\n",
    "    from PT3S import Rm\n",
    "except:\n",
    "    import Rm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9141a9ae-1f55-4b93-ba3a-88538c528993",
   "metadata": {},
   "outputs": [],
   "source": [
    "pt3s_path = os.path.dirname(os.path.abspath(dxAndMxHelperFcts.__file__))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60bebf2d-2d17-4a3f-b43f-4fba703ba5f5",
   "metadata": {},
   "source": [
    "# Logging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e7c25b49-5bfd-4c7b-aa68-a61b81e1f771",
   "metadata": {},
   "outputs": [],
   "source": [
    "logger = logging.getLogger()  \n",
    "\n",
    "logFileName= r\"Example2.log\" \n",
    "\n",
    "loglevel = logging.DEBUG\n",
    "logging.basicConfig(filename=logFileName\n",
    "                        ,filemode='w'\n",
    "                        ,level=loglevel\n",
    "                        ,format=\"%(asctime)s ; %(name)-60s ; %(levelname)-7s ; %(message)s\")    \n",
    "\n",
    "fileHandler = logging.FileHandler(logFileName)     \n",
    "\n",
    "logger.addHandler(fileHandler)\n",
    "\n",
    "consoleHandler = logging.StreamHandler()\n",
    "consoleHandler.setFormatter(logging.Formatter(\"%(levelname)-7s ; %(message)s\"))\n",
    "consoleHandler.setLevel(logging.INFO)\n",
    "logger.addHandler(consoleHandler)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fc45144-c300-430e-a615-9ee7a8fa2f44",
   "metadata": {},
   "source": [
    "# Model and Time Curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9b65d26e-dc5f-4776-b88e-a573608c58c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "dbFilename=\"W채rmenetz-Planungsbeispiel\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8e2fe68a-6343-45b2-a18f-d5c57b113797",
   "metadata": {},
   "outputs": [],
   "source": [
    "csvFilename=\"time_curves\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ca9c35f-a446-43f1-b45a-9d36c28fc2f9",
   "metadata": {},
   "source": [
    "# Read Model and Time Curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "884ef6f2-dd44-42a4-9411-23360470d831",
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path=pt3s_path+'/Examples/'+csvFilename+'.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9421bf11-eee4-427e-ba22-993e3d393e55",
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_multiple_time_curves(file_path):\n",
    "    with open(file_path, 'r', encoding='ISO-8859-1') as f:\n",
    "        lines = f.readlines()\n",
    "\n",
    "    dataframes = []\n",
    "    current_lines = []\n",
    "    curve_name = ''\n",
    "    for line in lines:\n",
    "        if line.strip() == ';' or line.strip() == '':\n",
    "            if current_lines:\n",
    "                df = pd.DataFrame([sub.split(\";\") for sub in current_lines[2:]])  # Skip the first two lines\n",
    "                df = df.iloc[:, :2]  # Only take the first two columns\n",
    "                df.columns = ['Datetime', curve_name]  # Rename the columns\n",
    "                dataframes.append(df)\n",
    "                current_lines = []\n",
    "        else:\n",
    "            if 'Zeitkurven' in line:\n",
    "                curve_name = line.split(' ')[1]  # Extract the curve name\n",
    "            current_lines.append(line.strip())\n",
    "\n",
    "    if current_lines:\n",
    "        df = pd.DataFrame([sub.split(\";\") for sub in current_lines[2:]])  # Skip the first two lines\n",
    "        df = df.iloc[:, :2]  # Only take the first two columns\n",
    "        df.columns = ['Datetime', curve_name]  # Rename the columns\n",
    "        dataframes.append(df)\n",
    "\n",
    "    return dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7c5def04-e287-499d-a3cb-a2c0b1715566",
   "metadata": {},
   "outputs": [],
   "source": [
    "time_curves_dataframes = read_multiple_time_curves(file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "326ee7b9-30b9-46d1-8b0a-d5817657144a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Datetime</th>\n",
       "      <th>Umw채lzmenge;\\n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-02-13 00:00:00</td>\n",
       "      <td>287.090057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-02-13 01:00:00</td>\n",
       "      <td>290.241272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-02-13 02:00:00</td>\n",
       "      <td>294.834534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-02-13 03:00:00</td>\n",
       "      <td>309.798828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-02-13 04:00:00</td>\n",
       "      <td>347.568024</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Datetime Umw채lzmenge;\\n\n",
       "0 2023-02-13 00:00:00     287.090057\n",
       "1 2023-02-13 01:00:00     290.241272\n",
       "2 2023-02-13 02:00:00     294.834534\n",
       "3 2023-02-13 03:00:00     309.798828\n",
       "4 2023-02-13 04:00:00     347.568024"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_curves_dataframes[1].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e354ab2f-dc50-46f2-ab36-bd6d48805e00",
   "metadata": {},
   "source": [
    "# Plotting"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c498d12-785a-4820-b870-22fbd84140e2",
   "metadata": {},
   "source": [
    "## Prepare Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "cc204ec9-7a00-4a5e-915a-38a22991f6c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "datetime_format = '%Y-%m-%d %H:%M:%S,%f'\n",
    "\n",
    "for df in time_curves_dataframes:\n",
    "    df.iloc[:, 0] = pd.to_datetime(df.iloc[:, 0], format='%Y-%m-%d %H:%M:%S,%f')\n",
    "    df.iloc[:, 1] = df.iloc[:, 1].str.replace(',', '.')\n",
    "    df.iloc[:, 1] = pd.to_numeric(df.iloc[:, 1], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56256005-4c79-496a-8af0-02764651029d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mapping for ax Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1baf2c9f-cda2-412f-a708-2d5d6b358e24",
   "metadata": {},
   "source": [
    "## Define Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "68fd90c4-d018-4d47-93f5-5267327126eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fyP(ax,offset=0):\n",
    "    ax.spines[\"left\"].set_position((\"outward\", offset))\n",
    "    ax.set_ylabel('Druck in bar')\n",
    "    ax.set_ylim(0,24)\n",
    "    ax.set_yticks(sorted(np.append(np.linspace(0,24,25),[])))\n",
    "    ax.yaxis.set_ticks_position('left')\n",
    "    ax.yaxis.set_label_position('left')\n",
    "    \n",
    "def fyT(ax,offset=60):\n",
    "    Rm.pltLDSHelperY(ax)\n",
    "    ax.spines[\"left\"].set_position((\"outward\",offset))\n",
    "    ax.set_ylabel('Temperatur in 째C')\n",
    "    ax.set_ylim(0,144)\n",
    "    ax.set_yticks(sorted(np.append(np.linspace(0,144,25),[])))\n",
    "    ax.yaxis.set_ticks_position('left')\n",
    "    ax.yaxis.set_label_position('left')\n",
    "    \n",
    "def fyQ(ax,offset=120):\n",
    "    Rm.pltLDSHelperY(ax)\n",
    "    ax.spines[\"left\"].set_position((\"outward\",offset))\n",
    "    ax.set_ylabel('Durchfluss in m3/h')\n",
    "    ax.set_ylim(0,3840)\n",
    "    ax.set_yticks(sorted(np.append(np.linspace(0,3840,25),[])))\n",
    "    ax.yaxis.set_ticks_position('left')\n",
    "    ax.yaxis.set_label_position('left')\n",
    "    \n",
    "def fyW(ax,offset=180):\n",
    "    Rm.pltLDSHelperY(ax)\n",
    "    ax.spines[\"left\"].set_position((\"outward\",offset))\n",
    "    ax.set_ylabel('W채rmeleistung in MW')\n",
    "    ax.set_ylim(0,25)\n",
    "    ax.set_yticks(sorted(np.append(np.linspace(0,25,6),[])))\n",
    "    ax.yaxis.set_ticks_position('left')\n",
    "    ax.yaxis.set_label_position('left')\n",
    "    \n",
    "def fyNY(ax,offset=240):\n",
    "    Rm.pltLDSHelperY(ax)\n",
    "    ax.spines[\"left\"].set_position((\"outward\",offset))\n",
    "    ax.set_ylabel('Drehzahl in Y')\n",
    "    ax.set_ylim(0, 100)\n",
    "    ax.set_yticks(sorted(np.append(np.linspace(0,100,25),[])))\n",
    "    ax.yaxis.set_ticks_position('left')\n",
    "    ax.yaxis.set_label_position('left')\n",
    "\n",
    "def fyNrpm(ax,offset=240):\n",
    "    Rm.pltLDSHelperY(ax)\n",
    "    ax.spines[\"left\"].set_position((\"outward\",offset))\n",
    "    ax.set_ylabel('Drehzahl in rpm')\n",
    "    ax.set_ylim(0, 2400)\n",
    "    ax.set_yticks(sorted(np.append(np.linspace(0,2400,25),[])))\n",
    "    ax.yaxis.set_ticks_position('left')\n",
    "    ax.yaxis.set_label_position('left')\n",
    "\n",
    "def fyUmwMe(ax,offset=300):\n",
    "    Rm.pltLDSHelperY(ax)\n",
    "    ax.spines[\"left\"].set_position((\"outward\",offset))\n",
    "    ax.set_ylabel('Umw채lzmenge in ###')\n",
    "    ax.set_ylim(250, 600)\n",
    "    ax.set_yticks(sorted(np.append(np.linspace(250, 600,25),[])))\n",
    "    ax.yaxis.set_ticks_position('left')\n",
    "    ax.yaxis.set_label_position('left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "d9f57ed1-2081-4226-a45b-49dde31832f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plotAll(dfs\n",
    "            ,should_plot \n",
    "            ,Startzeit=time_curves_dataframes[0].iloc[0, 0]\n",
    "            ,Endzeit=time_curves_dataframes[0].iloc[24, 0]):\n",
    "    \n",
    "    # Create a new figure and axis\n",
    "    fig, ax0 = plt.subplots()\n",
    "\n",
    "    # Set y-axis ticks and labels\n",
    "    ax0.set_yticks(np.linspace(0, 24, 25))\n",
    "    ax0.yaxis.set_ticklabels([])\n",
    "    ax0.grid()\n",
    "\n",
    "    colors = ['blue', 'red', 'green', 'orange', 'purple']\n",
    "    \n",
    "    for i, df in enumerate(dfs):\n",
    "        if should_plot[i]:\n",
    "            ax_i = ax0.twinx()  \n",
    "            fyW(ax_i, i*60)#Mapping needed\n",
    "            ax_i.plot(dfs[i].iloc[:, 0], dfs[i].iloc[:, 1], color=colors[i % len(colors)], lw=plt.rcParams['lines.linewidth']*2, ls='solid')\n",
    "    \n",
    "    #if W채rmeleistung:\n",
    "    #    ax1 = ax0.twinx()\n",
    "    #    fyW(ax1, 0)\n",
    "    #    ax1.plot(dfs[0].iloc[:, 0], dfs[0].iloc[:, 1], color='blue', lw=plt.rcParams['lines.linewidth']*2, ls='solid')\n",
    "\n",
    "    #if Temperatur:#Not really a Temp\n",
    "    #    ax2 = ax0.twinx()\n",
    "    #    fyUmwMe(ax2, 60)\n",
    "    #    ax2.plot(dfs[1].iloc[:, 0], dfs[1].iloc[:, 1], color='red', lw=plt.rcParams['lines.linewidth']*2, ls='solid')\n",
    "    \n",
    "    ax0.set_xlim(Startzeit, Endzeit)\n",
    "\n",
    "    Rm.pltHelperX(ax0, dateFormat='%Hh:%Mm', byminute=[0, 60], yPos=0)\n",
    "\n",
    "    # Set the title of the plot\n",
    "    Name = f\"Prozessdaten West {df.iloc[:, 0].min().strftime('%Y %m %d')}\"\n",
    "    plotTitle = f\"West von {Startzeit.strftime('%Y %m %d %Hh %Mm %Ss')} bis {Endzeit.strftime('%Y %m %d %Hh %Mm %Ss')}\"\n",
    "    ax0.set_title(plotTitle)\n",
    "\n",
    "    # Adjust the layout\n",
    "    plt.subplots_adjust(left=0.3, bottom=0.15)\n",
    "\n",
    "    # Show the plot\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "ad9daa28-bb11-41ed-b7e7-00ffa0ebfb99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotAll(time_curves_dataframes, [True, False, True])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "8b227a54-d375-487f-8145-131fef1d5cb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "83a4cf376a6d4bf6acceb34427276905",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "TimePicker(value=datetime.time(8, 0), description='Zeitpunkt:', step=60.0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cfe6871827a840298aec72c1b3d86a11",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "TimePicker(value=datetime.time(0, 1), description='Startzeit:', min=datetime.time(0, 1), step=60.0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "981c872e03664036a908b98078da220d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "TimePicker(value=datetime.time(0, 0), description='Endzeit:', step=60.0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a993d70f66b948cd98cbd30cff47be9d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Checkbox(value=True, description='MW;\\n')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8ff7b8f0681546598f9d98d0eb630ec6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Checkbox(value=True, description='Umw채lzmenge;\\n')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5fdb8499ccc5400fafd70220854c986b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Checkbox(value=True, description='AT;\\n')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "TypeError",
     "evalue": "'datetime.datetime' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[178], line 40\u001b[0m\n\u001b[0;32m     37\u001b[0m display(Zeitpunkt, Startzeit, Endzeit, \u001b[38;5;241m*\u001b[39mcheckboxes\u001b[38;5;241m.\u001b[39mvalues())\n\u001b[0;32m     39\u001b[0m \u001b[38;5;66;03m# Initial plot\u001b[39;00m\n\u001b[1;32m---> 40\u001b[0m update_plot()\n",
      "Cell \u001b[1;32mIn[178], line 28\u001b[0m, in \u001b[0;36mupdate_plot\u001b[1;34m(_)\u001b[0m\n\u001b[0;32m     25\u001b[0m selected_measurements \u001b[38;5;241m=\u001b[39m [key \u001b[38;5;28;01mfor\u001b[39;00m key, checkbox \u001b[38;5;129;01min\u001b[39;00m checkboxes\u001b[38;5;241m.\u001b[39mitems() \u001b[38;5;28;01mif\u001b[39;00m checkbox\u001b[38;5;241m.\u001b[39mvalue]\n\u001b[0;32m     27\u001b[0m \u001b[38;5;66;03m# Call the plotAll function with the selected parameters\u001b[39;00m\n\u001b[1;32m---> 28\u001b[0m plotAll(time_curves_dataframes, start_datetime, end_datetime, selected_measurements)\n",
      "Cell \u001b[1;32mIn[171], line 17\u001b[0m, in \u001b[0;36mplotAll\u001b[1;34m(dfs, should_plot, Startzeit, Endzeit)\u001b[0m\n\u001b[0;32m     14\u001b[0m colors \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mblue\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mred\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgreen\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124morange\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpurple\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     16\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i, df \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(dfs):\n\u001b[1;32m---> 17\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m should_plot[i]:\n\u001b[0;32m     18\u001b[0m         ax_i \u001b[38;5;241m=\u001b[39m ax0\u001b[38;5;241m.\u001b[39mtwinx()  \n\u001b[0;32m     19\u001b[0m         fyW(ax_i, i\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m60\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: 'datetime.datetime' object is not subscriptable"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhoAAAGdCAYAAABU5NrbAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWy0lEQVR4nO3dYajddf0H8M/mjkfPYIudyo7uulq4zCCrieYkpPAaFEkPIuFGWBQ0IlpFxcLIeyEYFQkZWiBmT3ZLsoweWHke2JoWhTYhWrBQK6VrsbM2V6fWUX//B2um3vuvnfM7n3u+u3u9YA/8eXbud+d9L+ftOWe+V1VVVQUAQILVkz4AALByKRoAQBpFAwBIo2gAAGkUDQAgjaIBAKRRNACANIoGAJBmTd07OHbsWBw7duzZf37mmWfi0KFD0W63Y9WqVXXvHgBYBlVVxdGjR+Pcc8+N1avH9zpE7aKxa9eumJubG8dZAIAJe+yxx2Ljxo1ju79Vdf8X5C98RePIkSNx/vnnx4EDB2LDhg21D8joBoNB3HvvvfHmN785Go3GpI9zWpNFWeRRDlmU49ChQ7Fly5Y4fPhwrF+/fmz3W/sVjWazGc1mc9H1DRs2RLvdrnv31DAYDKLVakW73fYDPGGyKIs8yiGL8oz7Yw8+DAoApFE0AIA0igYAkEbRAADSKBoAQBpFAwBIo2gAAGkUDQAgjaIBAKRRNACANIoGAJBm7DPxTz75ZEQc///XDwaDundPDScefzlMnizKIo9yyKIcWRnUXm+dnZ1dciZ+fn4+Wq1WnbsGAJZJv9+PmZmZOHLkSKxbt25s9zv2mfgnn3wypqamYmFhwXrrhA0Gg+h2uzE9PW0VccJkURZ5lEMW5ej1etHpdMZeNNJm4huNhm+aQsiiHLIoizzKIYvJy3r8fRgUAEijaAAAaRQNACCNogEApFE0AIA0igYAkEbRAADSKBoAQBpFAwBIo2gAAGkUDQAgjZn4Fcz8cjlkURZ5lEMW5TATDwCkMRPP0Mwvl0MWZZFHOWRRDjPxjEwW5ZBFWeRRDllMnpl4AOCUo2gAAGkUDQAgjaIBAKRRNACANIoGAJBG0QAA0igaAEAaRQMASKNoAABpFA0AII2iAQCkqT2qttR6a8TxRb6sbXtOzonHXw6TJ4uyyKMcsihHVga1Z+JnZ2djbm5u0fX5+flotVp17hoAWCb9fj9mZmbGPhNfu2gs9YrG1NRULCwsRLvdrn1ARjcYDKLb7cb09LT55QmTRVnkUQ5ZlKPX60Wn0xl70aj91kmz2Yxms7noeqPR8E1TCFmUQxZlkUc5ZDF5WY+/D4MCAGkUDQAgjaIBAKRRNACANIoGAJBG0QAA0igaAEAaRQMASKNoAABpFA0AII2iAQCkMRO/gplfLocsyiKPcsiiHGbiAYA0ZuIZmvnlcsiiLPIohyzKYSaekcmiHLIoizzKIYvJMxMPAJxyFA0AII2iAQCkUTQAgDSKBgCQRtEAANIoGgBAGkUDAEijaAAAaRQNACCNogEApFE0AIA0tUfVllpvjTi+yJe1bc/JOfH4y2HyZFEWeZRDFuXIyqD2TPzs7GzMzc0tuj4/Px+tVqvOXQMAy6Tf78fMzMzYZ+JrF42lXtGYmpqKhYWFaLfbtQ/I6AaDQXS73Zienja/PGGyKIs8yiGLcvR6veh0OmMvGrXfOmk2m9FsNhddbzQavmkKIYtyyKIs8iiHLCYv6/H3YVAAII2iAQCkUTQAgDSKBgCQRtEAANIoGgBAGkUDAEijaAAAaRQNACCNogEApFE0AIA0ZuJXMPPL5ZBFWeRRDlmUw0w8AJDGTDxDM79cDlmURR7lkEU5zMQzMlmUQxZlkUc5ZDF5ZuIBgFOOogEApFE0AIA0igYAkEbRAADSKBoAQBpFAwBIo2gAAGkUDQAgjaIBAKRRNACANGbiVzDzy+WQRVnkUQ5ZlMNMPACQxkw8QzO/XA5ZlEUe5ZBFOczEMzJZlEMWZZFHOWQxeWbiAYBTjqIBAKRRNACANIoGAJBG0QAA0igaAEAaRQMASKNoAABpFA0AII2iAQCkUTQAgDSKBgCQpvao2lLrrRHHF/mytu05OScefzlMnizKIo9yyKIcWRnUnomfnZ2Nubm5Rdfn5+ej1WrVuWsAYJn0+/2YmZkZ+0x87aKx1CsaU1NTsbCwEO12u/YBGd1gMIhutxvT09PmlydMFmWRRzlkUY5erxedTmfsRaP2WyfNZjOazeai641GwzdNIWRRDlmURR7lkMXkZT3+PgwKAKRRNACANIoGAJBG0QAA0igaAEAaRQMASKNoAABpFA0AII2iAQCkUTQAgDSKBgCQxkz8CmZ+uRyyKIs8yiGLcpiJBwDSmIlnaOaXyyGLssijHLIoh5l4RiaLcsiiLPIohywmz0w8AHDKUTQAgDSKBgCQRtEAANIoGgBAGkUDAEijaAAAaRQNACCNogEApFE0AIA0igYAkEbRAADS1B5VW2q9NeL4Il/Wtj0n58TjL4fJk0VZ5FEOWZQjK4PaM/Gzs7MxNze36Pr8/Hy0Wq06dw0ALJN+vx8zMzNjn4mvXTSWekVjamoqFhYWot1u1z4goxsMBtHtdmN6etr88oTJoizyKIcsytHr9aLT6Yy9aNR+66TZbEaz2Vx0vdFo+KYphCzKIYuyyKMcspi8rMffh0EBgDSKBgCQRtEAANIoGgBAGkUDAEijaAAAaRQNACCNogEApFE0AIA0igYAkEbRAADSmIlfwcwvl0MWZZFHOWRRDjPxAEAaM/EMzfxyOWRRFnmUQxblMBPPyGRRDlmURR7lkMXkmYkHAE45igYAkEbRAADSKBoAQBpFAwBIo2gAAGkUDQAgjaIBAKRRNACANIoGAJBG0QAA0piJX8HML5dDFmWRRzlkUQ4z8QBAGjPxDM38cjlkURZ5lEMW5TATz8hkUQ5ZlEUe5ZDF5JmJBwBOOYoGAJBG0QAA0igaAEAaRQMASKNoAABpFA0AII2iAQCkUTQAgDSKBgCQRtEAANIoGgBAmtqjakutt0YcX+TL2rbn5Jx4/OUwebIoizzKIYtyZGVQeyZ+dnY25ubmFl2fn5+PVqtV564BgGXS7/djZmZm7DPxtYvGUq9oTE1NxcLCQrTb7doHZHSDwSC63W5MT0+bX54wWZRFHuWQRTl6vV50Op2xF43ab500m81oNpuLrjcaDd80hZBFOWRRFnmUQxaTl/X4+zAoAJBG0QAA0igaAEAaRQMASKNoAABpFA0AII2iAQCkUTQAgDSKBgCQRtEAANIoGgBAGjPxK5j55XLIoizyKIcsymEmHgBIYyaeoZlfLocsyiKPcsiiHGbiGZksyiGLssijHLKYPDPxAMApR9EAANIoGgBAGkUDAEijaAAAaRQNACCNogEApFE0AIA0igYAkEbRAADSKBoAQBpFAwBIU3tUban11ojji3xZ2/acnBOPvxwmTxZlkUc5ZFGOrAxqz8TPzs7G3Nzcouvz8/PRarXq3DUAsEz6/X7MzMyMfSa+dtFY6hWNqampWFhYiHa7XfuAjG4wGES3243p6WnzyxMmi7LIoxyyKEev14tOpzP2olH7rZNmsxnNZnPR9Uaj4ZumELIohyzKIo9yyGLysh5/HwYFANIoGgBAGkUDAEijaAAAaRQNACCNogEApFE0AIA0igYAkEbRAADSKBoAQBpFAwBIYyZ+BTO/XA5ZlEUe5ZBFOczEAwBpzMQzNPPL5ZBFWeRRDlmUw0w8I5NFOWRRFnmUQxaTZyYeADjlKBoAQBpFAwBIo2gAAGkUDQAgjaIBAKRRNACANIoGAJBG0QAA0igaAEAaRQMASGMmfgUzv1wOWZRFHuWQRTnMxAMAaczEMzTzy+WQRVnkUQ5ZlMNMPCOTRTlkURZ5lEMWk2cmHgA45SgaAEAaRQMASKNoAABpFA0AII2iAQCkUTQAgDSKBgCQRtEAANIoGgBAGkUDAEijaAAAaWqPqi213hpxfJEva9uek3Pi8ZfD5MmiLPIohyzKkZVB7Zn42dnZmJubW3R9fn4+Wq1WnbsGAJZJv9+PmZmZsc/E1y4aS72iMTU1FQsLC9Fut2sfkNENBoPodrsxPT1tfnnCZFEWeZRDFuXo9XrR6XTGXjRqv3XSbDaj2Wwuut5oNHzTFEIW5ZBFWeRRDllMXtbj78OgAEAaRQMASKNoAABpFA0AII2iAQCkUTQAgDSKBgCQRtEAANIoGgBAGkUDAEijaAAAaczEr2Dml8shi7LIoxyyKIeZeAAgjZl4hmZ+uRyyKIs8yiGLcpiJZ2SyKIcsyiKPcshi8szEAwCnHEUDAEijaAAAaRQNACCNogEApFE0AIA0igYAkEbRAADSKBoAQBpFAwBIo2gAAGkUDQAgTe1RtaXWWyOOL/Jlbdtzck48/nKYPFmURR7lkEU5sjKoPRM/Ozsbc3Nzi67Pz89Hq9Wqc9cAwDLp9/sxMzMz9pn42kVjqVc0pqamYmFhIdrtdu0DMrrBYBDdbjemp6fNL0+YLMoij3LIohy9Xi86nc7Yi0btt06azWY0m81F1xuNhm+aQsiiHLIoizzKIYvJy3r8fRgUAEijaAAAaRQNACCNogEApFE0AIA0igYAkEbRAADSKBoAQBpFAwBIo2gAAGkUDQAgjZn4Fcz8cjlkURZ5lEMW5TATDwCkMRPP0Mwvl0MWZZFHOWRRDjPxjEwW5ZBFWeRRDllMnpl4AOCUo2gAAGkUDQAgjaIBAKRRNACANIoGAJBG0QAA0igaAEAaRQMASKNoAABpFA0AII2Z+BXM/HI5ZFEWeZRDFuUwEw8ApDETz9DML5dDFmWRRzlkUQ4z8YxMFuWQRVnkUQ5ZTJ6ZeADglKNoAABpFA0AII2iAQCkUTQAgDSKBgCQRtEAANIoGgBAGkUDAEijaAAAaRQNACCNogEApKk9qrbUemvE8UW+rG17Ts6Jx18OkyeLssijHLIoR1YGtWfiZ2dnY25ubtH1+fn5aLVade4aAFgm/X4/ZmZmxj4TX7toLPWKxtTUVCwsLES73a59QEY3GAyi2+3G9PS0+eUJk0VZ5FEOWZSj1+tFp9MZe9Go/dZJs9mMZrO56Hqj0fBNUwhZlEMWZZFHOWQxeVmPvw+DAgBpFA0AII2iAQCkUTQAgDSKBgCQRtEAANIoGgBAGkUDAEijaAAAaRQNACCNogEApBn7TPyRI0ciIuLQoUN175qaBoNB9Pv96PV6NgQmTBZlkUc5ZFGOE8/bNbdWF6ldNHbt2rXkTPyWLVvq3jUAsMx6vV6sX79+bPc39pn4w4cPx6ZNm+KPf/zjWA/K8J588smYmpqKxx57bKyTvwxPFmWRRzlkUY4jR47E+eefH3/961/jRS960djuN20mfv369b5pCrFu3TpZFEIWZZFHOWRRjtWrx/vxTR8GBQDSKBoAQJqxF41msxk33HDDkm+nsLxkUQ5ZlEUe5ZBFObKyqP1hUACA/4+3TgCANIoGAJBG0QAA0igaAECakYrGLbfcEq94xSvirLPOiq1bt8bevXv/6+337NkTW7dujbPOOis2b94cX//610c6LIsNk8X3vve9mJ6ejpe85CWxbt26uPzyy+PHP/7xMp52ZRv25+KE+++/P9asWROve93rcg94Ghk2i2PHjsX1118fmzZtimazGa985SvjG9/4xjKdduUbNo/du3fHxRdfHK1WKzqdTrz//e+PXq+3TKdduX7605/GO97xjjj33HNj1apV8f3vf/9//p6xPH9XQ/r2t79dNRqN6tZbb632799f7dixo1q7dm31hz/8YcnbP/LII1Wr1ap27NhR7d+/v7r11lurRqNR3XnnncN+aV5g2Cx27NhRfeELX6h++ctfVgcOHKg+85nPVI1Go/rVr361zCdfeYbN4oTDhw9Xmzdvrq6++urq4osvXp7DrnCjZHHNNddUl112WdXtdqtHH320+sUvflHdf//9y3jqlWvYPPbu3VutXr26+spXvlI98sgj1d69e6vXvOY11Tvf+c5lPvnKc/fdd1fXX3999d3vfreKiOquu+76r7cf1/P30EXj0ksvrbZv3/68axdeeGG1c+fOJW//6U9/urrwwgufd+1DH/pQ9cY3vnHYL80LDJvFUi666KJqbm5u3Ec77YyaxbXXXlt99rOfrW644QZFY0yGzeKHP/xhtX79+qrX6y3H8U47w+bxpS99qdq8efPzrt10003Vxo0b0854OjqZojGu5++h3jr517/+FQ8++GBcffXVz7t+9dVXx89+9rMlf8/Pf/7zRbd/61vfGg888EAMBoOhXn3hP0bJ4oWeeeaZOHr0aGzYsCHjiKeNUbO4/fbb4+GHH44bbrgh+4injVGy+MEPfhCXXHJJfPGLX4zzzjsvtmzZEp/85CfjH//4x3IceUUbJY9t27bF448/HnfffXdUVRV//vOf484774y3v/3ty3FknmNcz99DjaodPHgwnn766TjnnHOed/2cc86JJ554Ysnf88QTTyx5+6eeeioOHjwYnU5nmCPwb6Nk8UJf/vKX4+9//3u8+93vzjjiaWOULH73u9/Fzp07Y+/evbFmTe1tQ/5tlCweeeSRuO++++Kss86Ku+66Kw4ePBgf/vCH49ChQz6nUdMoeWzbti12794d1157bfzzn/+Mp556Kq655pr46le/uhxH5jnG9fw90odBV61a9bx/rqpq0bX/dfulrjO8YbM44Vvf+lbMzs7GHXfcES996UuzjndaOdksnn766ZiZmYm5ubnYsmXLch3vtDLMz8UzzzwTq1atit27d8ell14ab3vb2+LGG2+Mb37zm17VGJNh8ti/f3989KMfjc997nPx4IMPxo9+9KN49NFHY/v27ctxVF5gHM/fQ/2n1Itf/OI444wzFjXRv/zlL4tazwkve9nLlrz9mjVrot1uD/PleY5RsjjhjjvuiA984APxne98J6666qrMY54Whs3i6NGj8cADD8S+ffviIx/5SEQcf7KrqirWrFkT99xzT7zlLW9ZlrOvNKP8XHQ6nTjvvPNi/fr1z1579atfHVVVxeOPPx4XXHBB6plXslHy2LVrV1xxxRXxqU99KiIiXvva18batWvjTW96U3z+85/3KvgyGtfz91CvaJx55pmxdevW6Ha7z7ve7XZj27ZtS/6eyy+/fNHt77nnnrjkkkui0WgM8+V5jlGyiDj+Ssb73ve+mJ+f957nmAybxbp16+LXv/51PPTQQ8/+2r59e7zqVa+Khx56KC677LLlOvqKM8rPxRVXXBF/+tOf4m9/+9uz1w4cOBCrV6+OjRs3pp53pRslj36/H6tXP/+p6YwzzoiI//zXNMtjbM/fQ310tPrPX1W67bbbqv3791cf+9jHqrVr11a///3vq6qqqp07d1bvfe97n739ib8e8/GPf7zav39/ddttt/nrrWMybBbz8/PVmjVrqptvvrlaWFh49tfhw4cn9UdYMYbN4oX8rZPxGTaLo0ePVhs3bqze9a53Vb/5zW+qPXv2VBdccEH1wQ9+cFJ/hBVl2Dxuv/32as2aNdUtt9xSPfzww9V9991XXXLJJdWll146qT/CinH06NFq37591b59+6qIqG688cZq3759z/5V46zn76GLRlVV1c0331xt2rSpOvPMM6s3vOEN1Z49e579d9ddd1115ZVXPu/2P/nJT6rXv/711Zlnnlm9/OUvr772ta+N8mVZwjBZXHnllVVELPp13XXXLf/BV6Bhfy6eS9EYr2Gz+O1vf1tdddVV1dlnn11t3Lix+sQnPlH1+/1lPvXKNWweN910U3XRRRdVZ599dtXpdKr3vOc91eOPP77Mp1557r333v/6HJD1/G0mHgBIY+sEAEijaAAAaRQNACCNogEApFE0AIA0igYAkEbRAADSKBoAQBpFAwBIo2gAAGkUDQAgjaIBAKT5P5b4ptNL2eNDAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import ipywidgets as widgets\n",
    "from IPython.display import display\n",
    "import datetime\n",
    "\n",
    "# Create TimePicker widgets for selecting specific times\n",
    "Zeitpunkt = widgets.TimePicker(value=datetime.time(8, 0), description='Zeitpunkt:')\n",
    "Startzeit = widgets.TimePicker(value=datetime.time(0, 1), min=datetime.time(0, 1), description='Startzeit:')\n",
    "Endzeit = widgets.TimePicker(value=datetime.time(0, 0), description='Endzeit:')\n",
    "\n",
    "# Create a dictionary to hold the checkboxes for measurement options\n",
    "checkboxes = {}\n",
    "\n",
    "# Dynamically create checkboxes based on the second column names of the dataframes\n",
    "for df in time_curves_dataframes:\n",
    "    column_name = df.columns[1]\n",
    "    checkboxes[column_name] = widgets.Checkbox(value=True, description=column_name)\n",
    "\n",
    "# Function to update the plot based on the widgets' values\n",
    "def update_plot(_=None):\n",
    "    # Convert widget times to datetime.datetime objects\n",
    "    start_datetime = datetime.datetime.combine(datetime.date.today(), Startzeit.value)\n",
    "    end_datetime = datetime.datetime.combine(datetime.date.today(), Endzeit.value)\n",
    "    \n",
    "    # Prepare a list of selected measurements based on the checkboxes\n",
    "    selected_measurements = [key for key, checkbox in checkboxes.items() if checkbox.value]\n",
    "    \n",
    "    # Call the plotAll function with the selected parameters\n",
    "    plotAll(time_curves_dataframes, start_datetime, end_datetime, selected_measurements)\n",
    "\n",
    "# Observe changes in the widgets and update the plot accordingly\n",
    "Startzeit.observe(update_plot, 'value')\n",
    "Endzeit.observe(update_plot, 'value')\n",
    "for checkbox in checkboxes.values():\n",
    "    checkbox.observe(update_plot, 'value')\n",
    "\n",
    "# Display the widgets\n",
    "display(Zeitpunkt, Startzeit, Endzeit, *checkboxes.values())\n",
    "\n",
    "# Initial plot\n",
    "update_plot()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "8b46caea-0569-48d9-8777-e9e2eb034fc7",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'interactive' from 'IPython.display' (C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\IPython\\display.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[177], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mipywidgets\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mwidgets\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mIPython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdisplay\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m display\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mIPython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdisplay\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m interactive\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mdatetime\u001b[39;00m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n",
      "\u001b[1;31mImportError\u001b[0m: cannot import name 'interactive' from 'IPython.display' (C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\IPython\\display.py)"
     ]
    }
   ],
   "source": [
    "import ipywidgets as widgets\n",
    "from IPython.display import display\n",
    "from IPython.display import interactive\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Assume 'time_curves_dataframes' is a list of dataframes available in your context\n",
    "# Assume 'plotAll' function is defined as per the previous discussion\n",
    "\n",
    "# Create TimePicker widgets for selecting specific times\n",
    "Startzeit_widget = widgets.TimePicker(value=datetime.time(0, 1), description='Startzeit:')\n",
    "Endzeit_widget = widgets.TimePicker(value=datetime.time(23, 59), description='Endzeit:')\n",
    "\n",
    "# Create a dictionary to hold the checkboxes for measurement options\n",
    "checkboxes = {}\n",
    "for df in time_curves_dataframes:\n",
    "    column_name = df.columns[1]\n",
    "    checkboxes[column_name] = widgets.Checkbox(value=True, description=column_name)\n",
    "\n",
    "# Function to convert TimePicker values to datetime objects\n",
    "def get_datetime(time_picker):\n",
    "    return datetime.datetime.combine(datetime.date.today(), time_picker.value)\n",
    "\n",
    "# Function to collect the states of the checkboxes\n",
    "def get_should_plot():\n",
    "    return [checkbox.value for checkbox in checkboxes.values()]\n",
    "\n",
    "# Use the interactive function to link widgets to the plotAll function\n",
    "interactive_plot = interactive(plotAll,\n",
    "                               dfs=widgets.fixed(time_curves_dataframes),\n",
    "                               should_plot=widgets.fixed(get_should_plot()),\n",
    "                               Startzeit=widgets.fixed(get_datetime(Startzeit_widget)),\n",
    "                               Endzeit=widgets.fixed(get_datetime(Endzeit_widget)))\n",
    "\n",
    "# Display the widgets and the interactive plot\n",
    "display(Startzeit_widget, Endzeit_widget, *checkboxes.values())\n",
    "display(interactive_plot)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
