2024-08-01 17:59:27,891 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: Start.
2024-08-01 17:59:27,891 ; PT3S                                                         ; DEBUG   ; Dx.__init__: Start.#########
2024-08-01 17:59:27,894 ; PT3S                                                         ; INFO    ; Dx.__init__: dbFile (abspath): c:\users\aUserName\3s\pt3s\Examples\Example1.db3 exists readable ...
2024-08-01 17:59:27,900 ; PT3S                                                         ; DEBUG   ; Dx.__init__: tableNames: ['AB_DEF', 'AGSN', 'ALLG', 'ALLG_BZ', 'ANTP', 'ANTP_ROWS', 'ARRW', 'ATMO', 'AVOS', 'AVOS_ROWS', 'BENUTZER', 'BEVE', 'BEVE_BZ', 'BEWI', 'BEWI_BZ', 'BREF', 'BZAG', 'BZAG_BZ', 'CIRC', 'CONT', 'CRGL', 'DATENEBENE', 'DPGR', 'DPGR_BZ', 'DPGR_DPKT', 'DPKT', 'DPKT_BZ', 'DPRG', 'DPRG_BZ', 'DRNP', 'DTRO', 'DTRO_ROWD', 'EBES', 'EBES_BZ', 'ELEMENTQUERY', 'ETAM', 'ETAM_ROWS', 'ETAR', 'ETAR_ROWS', 'ETAU', 'ETAU_ROWS', 'FKNL', 'FKNL_BZ', 'FQPS', 'FQPS_BZ', 'FSTF', 'FWBZ', 'FWEA', 'FWEA_BZ', 'FWES', 'FWES_BZ', 'FWVB', 'FWVB_BZ', 'FWWU', 'FWWU_BZ', 'GEOMETRY_COLUMNS', 'GKMP', 'GMIX', 'GRAV', 'GTXT', 'GVWK', 'GVWK_BZ', 'HAUS', 'HYDR', 'HYDR_BZ', 'KLAP', 'KLAP_BZ', 'KNOT', 'KNOT_BZ', 'KOMK', 'KOMK_ROWS', 'KOMP', 'KOMP_BZ', 'LAYR', 'LFAL', 'LFAL_BZ', 'LFKT', 'LFKT_ROWT', 'LTGR', 'MAPG', 'MAPG_ROWS', 'MODELL', 'MREG', 'MREG_BZ', 'NRCV', 'NSCH', 'NSCH_BZ', 'OBEH', 'OBEH_BZ', 'OVAL', 'PARI', 'PARI_BZ', 'PARV', 'PARZ', 'PARZ_BZ', 'PGPR', 'PGRP', 'PGRP_BZ', 'PGRP_PUMP', 'PGRP_PUMP_BZ', 'PHI1', 'PHI1_ROWT', 'PHI2', 'PHI2_ROWS', 'PHIV', 'PHIV_ROWS', 'PHTR', 'PHTR_BZ', 'PLYG', 'POLY', 'PREG', 'PREG_BZ', 'PROZESSE', 'PUMD', 'PUMD_ROWT', 'PUMK', 'PUMK_ROWS', 'PUMP', 'PUMP_BZ', 'PVAR', 'PVAR_ROWT', 'PZON', 'PZVR', 'PZVR_BZ', 'QVAR', 'QVAR_ROWT', 'RADD', 'RADD_BZ', 'RART', 'RART_BZ', 'RCON', 'RCPL', 'RCPL_ROWT', 'RDIV', 'RDIV_BZ', 'RECT', 'REGP', 'REGV', 'REGV_BZ', 'RFKT', 'RFKT_BZ', 'RHYS', 'RHYS_BZ', 'RINT', 'RINT_BZ', 'RLSR', 'RLSR_BZ', 'RLVG', 'RLVG_BZ', 'RMES', 'RMES_BZ', 'RMES_DPTS', 'RMES_DPTS_BZ', 'RMMA', 'RMMA_BZ', 'RMUL', 'RMUL_BZ', 'ROHR', 'ROHR_BZ', 'ROHR_VRTX', 'RPFL', 'RPID', 'RPID_BZ', 'RPLAN', 'RPLAN_ROWS', 'RPT1', 'RPT1_BZ', 'RRCT', 'RSLW', 'RSLW_BZ', 'RSTE', 'RSTE_BZ', 'RSTN', 'RSTN_BZ', 'RTOT', 'RTOT_BZ', 'RUES', 'RUES_BZ', 'SIRGRAF', 'SIVE', 'SIVE_BZ', 'SOKO', 'SPLZ', 'SRAT', 'SRAT_ROWS', 'STOF', 'STOF_ROWS', 'STRASSE', 'STRO', 'STRO_BZ', 'SWVT', 'SWVT_ROWT', 'SYSTEMKONFIG', 'TEVT', 'TEVT_ROWT', 'TFKT', 'TFKT_ROWS', 'TIMD', 'TRFT', 'TRFT_ROWS', 'TRVA', 'UTMP', 'VARA_ROWS', 'VENT', 'VENT_BZ', 'VERB', 'VKNO', 'VRCT', 'WBLZ', 'WEVT', 'WEVT_ROWT', 'WIND', 'WIND_BZ', 'WTTR', 'WTTR_ROWT', 'ZEP1', 'ZEP1_ROWS', 'ZEP2', 'ZEP2_ROWS', 'VARA']
2024-08-01 17:59:27,900 ; PT3S                                                         ; DEBUG   ; Dx.__init__: viewNames: ['VIEW_MODELLE', 'VCIRC', 'VFWES', 'VFWVB', 'VFWWU', 'VGTXT', 'VKLAP', 'VKNOT', 'VPLYG', 'VPUMP', 'VROHR', 'VVENT']
2024-08-01 17:59:27,900 ; PT3S                                                         ; DEBUG   ; Dx.__init__: pair-tables: pairType: _BZ:
2024-08-01 17:59:27,912 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ALLG         BVZ: ALLG_BZ      V: V_BVZ_ALLG      constructed with        1 rows and  44 cols.
2024-08-01 17:59:27,922 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: BEVE         BVZ: BEVE_BZ      V: V_BVZ_BEVE      constructed with        1 rows and  76 cols.
2024-08-01 17:59:27,929 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: BEWI         BVZ: BEWI_BZ      V: V_BVZ_BEWI      constructed with        1 rows and  75 cols.
2024-08-01 17:59:27,932 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: BZAG         BVZ: BZAG_BZ      V: V_BVZ_BZAG      constructed with        1 rows and  26 cols.
2024-08-01 17:59:27,935 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DPGR         BVZ: DPGR_BZ      V: V_BVZ_DPGR      constructed with       14 rows and  32 cols.
2024-08-01 17:59:27,947 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DPKT         BVZ: DPKT_BZ      V: V_BVZ_DPKT      constructed with      635 rows and  49 cols.
2024-08-01 17:59:27,953 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DPRG         BVZ: DPRG_BZ      V: V_BVZ_DPRG      constructed with        1 rows and  72 cols.
2024-08-01 17:59:27,958 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: EBES         BVZ: EBES_BZ      V: V_BVZ_EBES      constructed with        1 rows and  43 cols.
2024-08-01 17:59:27,963 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FKNL         BVZ: FKNL_BZ      V: V_BVZ_FKNL      constructed with        1 rows and  69 cols.
2024-08-01 17:59:27,963 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FQPS         BVZ: FQPS_BZ      V: V_BVZ_FQPS      constructed with        1 rows and  71 cols.
2024-08-01 17:59:27,963 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FWEA         BVZ: FWEA_BZ      V: V_BVZ_FWEA      constructed with        1 rows and 134 cols.
2024-08-01 17:59:27,985 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FWES         BVZ: FWES_BZ      V: V_BVZ_FWES      constructed with        2 rows and  60 cols.
2024-08-01 17:59:28,003 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FWVB         BVZ: FWVB_BZ      V: V_BVZ_FWVB      constructed with      339 rows and  83 cols.
2024-08-01 17:59:28,012 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FWWU         BVZ: FWWU_BZ      V: V_BVZ_FWWU      constructed with        1 rows and  80 cols.
2024-08-01 17:59:28,012 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: GVWK         BVZ: GVWK_BZ      V: V_BVZ_GVWK      constructed with        1 rows and  67 cols.
2024-08-01 17:59:28,012 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: HYDR         BVZ: HYDR_BZ      V: V_BVZ_HYDR      constructed with        1 rows and  58 cols.
2024-08-01 17:59:28,028 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: KLAP         BVZ: KLAP_BZ      V: V_BVZ_KLAP      constructed with        3 rows and  56 cols.
2024-08-01 17:59:28,048 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: KNOT         BVZ: KNOT_BZ      V: V_BVZ_KNOT      constructed with      520 rows and  65 cols.
2024-08-01 17:59:28,053 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: KOMP         BVZ: KOMP_BZ      V: V_BVZ_KOMP      constructed with        1 rows and  80 cols.
2024-08-01 17:59:28,056 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: LFAL         BVZ: LFAL_BZ      V: V_BVZ_LFAL      constructed with        1 rows and  25 cols.
2024-08-01 17:59:28,063 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: MREG         BVZ: MREG_BZ      V: V_BVZ_MREG      constructed with        1 rows and  73 cols.
2024-08-01 17:59:28,067 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: NSCH         BVZ: NSCH_BZ      V: V_BVZ_NSCH      constructed with        1 rows and  46 cols.
2024-08-01 17:59:28,073 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: OBEH         BVZ: OBEH_BZ      V: V_BVZ_OBEH      constructed with        1 rows and  75 cols.
2024-08-01 17:59:28,076 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PARI         BVZ: PARI_BZ      V: V_BVZ_PARI      constructed with        1 rows and  31 cols.
2024-08-01 17:59:28,079 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PARZ         BVZ: PARZ_BZ      V: V_BVZ_PARZ      constructed with        1 rows and  28 cols.
2024-08-01 17:59:28,089 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PGRP         BVZ: PGRP_BZ      V: V_BVZ_PGRP      constructed with        2 rows and  61 cols.
2024-08-01 17:59:28,091 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PGRP_PUMP    BVZ: PGRP_PUMP_BZ V: V_BVZ_PGRP_PUMP constructed with        2 rows and  26 cols.
2024-08-01 17:59:28,097 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PHTR         BVZ: PHTR_BZ      V: V_BVZ_PHTR      constructed with        1 rows and  65 cols.
2024-08-01 17:59:28,103 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PREG         BVZ: PREG_BZ      V: V_BVZ_PREG      constructed with        1 rows and  71 cols.
2024-08-01 17:59:28,116 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PUMP         BVZ: PUMP_BZ      V: V_BVZ_PUMP      constructed with        2 rows and 142 cols.
2024-08-01 17:59:28,119 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PZVR         BVZ: PZVR_BZ      V: V_BVZ_PZVR      constructed with        1 rows and  30 cols.
2024-08-01 17:59:28,124 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RADD         BVZ: RADD_BZ      V: V_BVZ_RADD      constructed with        1 rows and  55 cols.
2024-08-01 17:59:28,128 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RART         BVZ: RART_BZ      V: V_BVZ_RART      constructed with        3 rows and  35 cols.
2024-08-01 17:59:28,129 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RDIV         BVZ: RDIV_BZ      V: V_BVZ_RDIV      constructed with        1 rows and  43 cols.
2024-08-01 17:59:28,129 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: REGV         BVZ: REGV_BZ      V: V_BVZ_REGV      constructed with        1 rows and  68 cols.
2024-08-01 17:59:28,145 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RFKT         BVZ: RFKT_BZ      V: V_BVZ_RFKT      constructed with        3 rows and  44 cols.
2024-08-01 17:59:28,145 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RHYS         BVZ: RHYS_BZ      V: V_BVZ_RHYS      constructed with        1 rows and  58 cols.
2024-08-01 17:59:28,145 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RINT         BVZ: RINT_BZ      V: V_BVZ_RINT      constructed with        1 rows and  56 cols.
2024-08-01 17:59:28,160 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RLSR         BVZ: RLSR_BZ      V: V_BVZ_RLSR      constructed with        1 rows and  54 cols.
2024-08-01 17:59:28,167 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RLVG         BVZ: RLVG_BZ      V: V_BVZ_RLVG      constructed with        2 rows and  42 cols.
2024-08-01 17:59:28,171 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RMES         BVZ: RMES_BZ      V: V_BVZ_RMES      constructed with        4 rows and  52 cols.
2024-08-01 17:59:28,176 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RMES_DPTS    BVZ: RMES_DPTS_BZ V: V_BVZ_RMES_DPTS constructed with        5 rows and  29 cols.
2024-08-01 17:59:28,177 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RMMA         BVZ: RMMA_BZ      V: V_BVZ_RMMA      constructed with        1 rows and  55 cols.
2024-08-01 17:59:28,177 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RMUL         BVZ: RMUL_BZ      V: V_BVZ_RMUL      constructed with        1 rows and  56 cols.
2024-08-01 17:59:28,200 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ROHR         BVZ: ROHR_BZ      V: V_BVZ_ROHR      constructed with      527 rows and  74 cols.
2024-08-01 17:59:28,211 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RPID         BVZ: RPID_BZ      V: V_BVZ_RPID      constructed with        1 rows and  63 cols.
2024-08-01 17:59:28,211 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RPT1         BVZ: RPT1_BZ      V: V_BVZ_RPT1      constructed with        1 rows and  56 cols.
2024-08-01 17:59:28,219 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RSLW         BVZ: RSLW_BZ      V: V_BVZ_RSLW      constructed with        5 rows and  50 cols.
2024-08-01 17:59:28,228 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RSTE         BVZ: RSTE_BZ      V: V_BVZ_RSTE      constructed with        1 rows and 104 cols.
2024-08-01 17:59:28,228 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RSTN         BVZ: RSTN_BZ      V: V_BVZ_RSTN      constructed with        8 rows and  77 cols.
2024-08-01 17:59:28,244 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RTOT         BVZ: RTOT_BZ      V: V_BVZ_RTOT      constructed with        1 rows and  55 cols.
2024-08-01 17:59:28,244 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RUES         BVZ: RUES_BZ      V: V_BVZ_RUES      constructed with       25 rows and  43 cols.
2024-08-01 17:59:28,257 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: SIVE         BVZ: SIVE_BZ      V: V_BVZ_SIVE      constructed with        1 rows and  70 cols.
2024-08-01 17:59:28,265 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: STRO         BVZ: STRO_BZ      V: V_BVZ_STRO      constructed with        1 rows and  72 cols.
2024-08-01 17:59:28,273 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: VENT         BVZ: VENT_BZ      V: V_BVZ_VENT      constructed with       12 rows and  69 cols.
2024-08-01 17:59:28,278 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: WIND         BVZ: WIND_BZ      V: V_BVZ_WIND      constructed with        1 rows and  76 cols.
2024-08-01 17:59:28,278 ; PT3S                                                         ; DEBUG   ; Dx.__init__: pair-tables: pairType: _ROWS:
2024-08-01 17:59:28,278 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ANTP         BVZ: ANTP_ROWS    V: V_BVZ_ANTP      constructed with        1 rows and  43 cols.
2024-08-01 17:59:28,289 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: AVOS         BVZ: AVOS_ROWS    V: V_BVZ_AVOS      constructed with        3 rows and  43 cols.
2024-08-01 17:59:28,294 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ETAM         BVZ: ETAM_ROWS    V: V_BVZ_ETAM      constructed with        7 rows and  43 cols.
2024-08-01 17:59:28,294 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ETAR         BVZ: ETAR_ROWS    V: V_BVZ_ETAR      constructed with        7 rows and  43 cols.
2024-08-01 17:59:28,300 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ETAU         BVZ: ETAU_ROWS    V: V_BVZ_ETAU      constructed with        7 rows and  43 cols.
2024-08-01 17:59:28,305 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: KOMK         BVZ: KOMK_ROWS    V: V_BVZ_KOMK      constructed with        1 rows and  53 cols.
2024-08-01 17:59:28,315 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: MAPG         BVZ: MAPG_ROWS    V: V_BVZ_MAPG      constructed with        3 rows and  60 cols.
2024-08-01 17:59:28,320 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PHI2         BVZ: PHI2_ROWS    V: V_BVZ_PHI2      constructed with        4 rows and  44 cols.
2024-08-01 17:59:28,321 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PHIV         BVZ: PHIV_ROWS    V: V_BVZ_PHIV      constructed with        9 rows and  43 cols.
2024-08-01 17:59:28,327 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PUMK         BVZ: PUMK_ROWS    V: V_BVZ_PUMK      constructed with        8 rows and  49 cols.
2024-08-01 17:59:28,327 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RPLAN        BVZ: RPLAN_ROWS   V: V_BVZ_RPLAN     constructed with        1 rows and  54 cols.
2024-08-01 17:59:28,336 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: SRAT         BVZ: SRAT_ROWS    V: V_BVZ_SRAT      constructed with        1 rows and  44 cols.
2024-08-01 17:59:28,336 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: STOF         BVZ: STOF_ROWS    V: V_BVZ_STOF      constructed with      201 rows and  47 cols.
2024-08-01 17:59:28,344 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: TFKT         BVZ: TFKT_ROWS    V: V_BVZ_TFKT      constructed with      423 rows and  43 cols.
2024-08-01 17:59:28,353 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: TRFT         BVZ: TRFT_ROWS    V: V_BVZ_TRFT      constructed with        2 rows and  43 cols.
2024-08-01 17:59:28,353 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: VARA         BVZ: VARA_ROWS    V: V_BVZ_VARA      constructed with       16 rows and  63 cols.
2024-08-01 17:59:28,363 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ZEP1         BVZ: ZEP1_ROWS    V: V_BVZ_ZEP1      constructed with       21 rows and  46 cols.
2024-08-01 17:59:28,368 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ZEP2         BVZ: ZEP2_ROWS    V: V_BVZ_ZEP2      constructed with       42 rows and  48 cols.
2024-08-01 17:59:28,368 ; PT3S                                                         ; DEBUG   ; Dx.__init__: pair-tables: pairType: _ROWT:
2024-08-01 17:59:28,369 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: LFKT         BVZ: LFKT_ROWT    V: V_BVZ_LFKT      constructed with        6 rows and  38 cols.
2024-08-01 17:59:28,369 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PHI1         BVZ: PHI1_ROWT    V: V_BVZ_PHI1      constructed with        2 rows and  38 cols.
2024-08-01 17:59:28,377 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PUMD         BVZ: PUMD_ROWT    V: V_BVZ_PUMD      constructed with        2 rows and  38 cols.
2024-08-01 17:59:28,385 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PVAR         BVZ: PVAR_ROWT    V: V_BVZ_PVAR      constructed with        1 rows and  38 cols.
2024-08-01 17:59:28,418 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: QVAR         BVZ: QVAR_ROWT    V: V_BVZ_QVAR      constructed with        1 rows and  38 cols.
2024-08-01 17:59:28,427 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: pairType ROWT: df RCPL hat keine Spalte ZEIT? Keine Sortierung nach Zeit.
2024-08-01 17:59:28,427 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RCPL         BVZ: RCPL_ROWT    V: V_BVZ_RCPL      constructed with        3 rows and  13 cols.
2024-08-01 17:59:28,481 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: SWVT         BVZ: SWVT_ROWT    V: V_BVZ_SWVT      constructed with    17617 rows and  38 cols.
2024-08-01 17:59:28,481 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: TEVT         BVZ: TEVT_ROWT    V: V_BVZ_TEVT      constructed with        3 rows and  38 cols.
2024-08-01 17:59:28,481 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: WEVT         BVZ: WEVT_ROWT    V: V_BVZ_WEVT      constructed with        1 rows and  38 cols.
2024-08-01 17:59:28,481 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: WTTR         BVZ: WTTR_ROWT    V: V_BVZ_WTTR      constructed with        0 rows and  45 cols.
2024-08-01 17:59:28,481 ; PT3S                                                         ; DEBUG   ; Dx.__init__: pair-tables: pairType: _ROWD:
2024-08-01 17:59:28,496 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DTRO         BVZ: DTRO_ROWD    V: V_BVZ_DTRO      constructed with       73 rows and  55 cols.
2024-08-01 17:59:28,496 ; PT3S                                                         ; DEBUG   ; Dx.__init__: tables which are not pair-tables:
2024-08-01 17:59:28,496 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: AB_DEF           V: V_AB_DEF             constructed with        1 rows and  16 cols.
2024-08-01 17:59:28,501 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: AGSN             V: V_AGSN               constructed with        4 rows and  37 cols.
2024-08-01 17:59:28,501 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: ARRW             V: V_ARRW               constructed with        1 rows and  52 cols.
2024-08-01 17:59:28,501 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: ATMO             V: V_ATMO               constructed with        2 rows and  37 cols.
2024-08-01 17:59:28,507 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: BENUTZER         V: V_BENUTZER           constructed with        0 rows and  26 cols.
2024-08-01 17:59:28,507 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: BREF             V: V_BREF               constructed with        1 rows and  52 cols.
2024-08-01 17:59:28,512 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: CIRC             V: V_CIRC               constructed with        4 rows and  52 cols.
2024-08-01 17:59:28,512 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: CONT             V: V_CONT               constructed with        7 rows and  41 cols.
2024-08-01 17:59:28,512 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: CRGL             V: V_CRGL               constructed with       33 rows and  53 cols.
2024-08-01 17:59:28,512 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: DATENEBENE       V: V_DATENEBENE         constructed with        4 rows and  11 cols.
2024-08-01 17:59:28,512 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: DPGR_DPKT        V: V_DPGR_DPKT          constructed with      693 rows and  34 cols.
2024-08-01 17:59:28,529 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: DRNP             V: V_DRNP               constructed with        2 rows and  38 cols.
2024-08-01 17:59:28,529 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: ELEMENTQUERY     V: V_ELEMENTQUERY       constructed with       50 rows and  36 cols.
2024-08-01 17:59:28,529 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: FSTF             V: V_FSTF               constructed with        2 rows and  51 cols.
2024-08-01 17:59:28,529 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: FWBZ             V: V_FWBZ               constructed with        2 rows and  40 cols.
2024-08-01 17:59:28,529 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: GEOMETRY_COLUMNS V: V_GEOMETRY_COLUMNS   constructed with       11 rows and   7 cols.
2024-08-01 17:59:28,529 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: GKMP             V: V_GKMP               constructed with        1 rows and  55 cols.
2024-08-01 17:59:28,529 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: GMIX             V: V_GMIX               constructed with        1 rows and  80 cols.
2024-08-01 17:59:28,529 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: GRAV             V: V_GRAV               constructed with        2 rows and  35 cols.
2024-08-01 17:59:28,545 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: GTXT             V: V_GTXT               constructed with        2 rows and  54 cols.
2024-08-01 17:59:28,545 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: HAUS             V: V_HAUS               constructed with        1 rows and  43 cols.
2024-08-01 17:59:28,545 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: LAYR             V: V_LAYR               constructed with       10 rows and  38 cols.
2024-08-01 17:59:28,545 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: LTGR             V: V_LTGR               constructed with        3 rows and  38 cols.
2024-08-01 17:59:28,555 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: MODELL           V: V_MODELL             constructed with        1 rows and  18 cols.
2024-08-01 17:59:28,561 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: NRCV             V: V_NRCV               constructed with       27 rows and  61 cols.
2024-08-01 17:59:28,561 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: OVAL             V: V_OVAL               constructed with        1 rows and  52 cols.
2024-08-01 17:59:28,561 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: PARV             V: V_PARV               constructed with        2 rows and  45 cols.
2024-08-01 17:59:28,561 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: PGPR             V: V_PGPR               constructed with        2 rows and  36 cols.
2024-08-01 17:59:28,578 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: PLYG             V: V_PLYG               constructed with      338 rows and  53 cols.
2024-08-01 17:59:28,578 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: POLY             V: V_POLY               constructed with        1 rows and  53 cols.
2024-08-01 17:59:28,578 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: PROZESSE         V: V_PROZESSE           constructed with        0 rows and  21 cols.
2024-08-01 17:59:28,578 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: PZON             V: V_PZON               constructed with        2 rows and  43 cols.
2024-08-01 17:59:28,578 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: RCON             V: V_RCON               constructed with        2 rows and  35 cols.
2024-08-01 17:59:28,578 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: RECT             V: V_RECT               constructed with        1 rows and  52 cols.
2024-08-01 17:59:28,592 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: REGP             V: V_REGP               constructed with        2 rows and  34 cols.
2024-08-01 17:59:28,594 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: ROHR_VRTX        V: V_ROHR_VRTX          constructed with        1 rows and  36 cols.
2024-08-01 17:59:28,594 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: RPFL             V: V_RPFL               constructed with        3 rows and  52 cols.
2024-08-01 17:59:28,601 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: RRCT             V: V_RRCT               constructed with        1 rows and  52 cols.
2024-08-01 17:59:28,601 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: SIRGRAF          V: V_SIRGRAF            constructed with        2 rows and  67 cols.
2024-08-01 17:59:28,608 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: SOKO             V: V_SOKO               constructed with       26 rows and  69 cols.
2024-08-01 17:59:28,611 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: SPLZ             V: V_SPLZ               constructed with        4 rows and  44 cols.
2024-08-01 17:59:28,611 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: STRASSE          V: V_STRASSE            constructed with       21 rows and  37 cols.
2024-08-01 17:59:28,611 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: SYSTEMKONFIG     V: V_SYSTEMKONFIG       constructed with        4 rows and   4 cols.
2024-08-01 17:59:28,611 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: TIMD             V: V_TIMD               constructed with        2 rows and  40 cols.
2024-08-01 17:59:28,611 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: TRVA             V: V_TRVA               constructed with        2 rows and  45 cols.
2024-08-01 17:59:28,618 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: UTMP             V: V_UTMP               constructed with        2 rows and  35 cols.
2024-08-01 17:59:28,618 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: VARA             V: V_VARA               constructed with        8 rows and  35 cols.
2024-08-01 17:59:28,618 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: VERB             V: V_VERB               constructed with        2 rows and  74 cols.
2024-08-01 17:59:28,627 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: VKNO             V: V_VKNO               constructed with        7 rows and  54 cols.
2024-08-01 17:59:28,627 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: VRCT             V: V_VRCT               constructed with        1 rows and  37 cols.
2024-08-01 17:59:28,627 ; PT3S                                                         ; DEBUG   ; Dx.__init__: table: WBLZ             V: V_WBLZ               constructed with        2 rows and  39 cols.
2024-08-01 17:59:28,627 ; PT3S                                                         ; DEBUG   ; Dx.__init__: expanding V_BVZ_ROHR with NAME_DTRO, DN, DI, DA, S, KT, PN, Am2, Vm3 ...
2024-08-01 17:59:28,641 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_ROHR: expanding V_BVZ_ROHR with  NAME_LTGR, NAME_STRASSE, tk_i, NAME_i, tk_k, NAME_k ...
2024-08-01 17:59:28,644 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_SWVT: expanding V_BVZ_SWVT ...
2024-08-01 17:59:28,661 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_ROWT: combining ROWT_tables like V_BVZ_LFKT, V_BVZ_PVAR, ...
2024-08-01 17:59:28,677 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_TFKT: ...
2024-08-01 17:59:28,677 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RSLW_SWVT: combining RSLW and SWVT ...
2024-08-01 17:59:28,701 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_KNOT: expanding V_BVZ_KNOT with NAME_LFKT, NAME_PVAR, NAME_PZON,NAME_QVAR,NAME_UTMP,NAME_FSTF,NAME_FQPS ...
2024-08-01 17:59:28,711 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_FWVB: expanding V_BVZ_FWVB with NAME_LFKT, NAME_ZEP1VL, NAME_ZEP1RL, NAME_TEVT, NAME_TRFT, tk_i, NAME_i, tk_k, NAME_k, ...
2024-08-01 17:59:28,721 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_:ROHR,KNOT,FWVB: filterTemplateObjects ...
2024-08-01 17:59:28,721 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_VBEL: ...
2024-08-01 17:59:28,740 ; PT3S                                                         ; DEBUG   ; Dx.__init__: FWES final in V3_VBEL-View (2,299) ...
2024-08-01 17:59:28,744 ; PT3S                                                         ; DEBUG   ; Dx.__init__: FWVB final in V3_VBEL-View (338,322) ...
2024-08-01 17:59:28,755 ; PT3S                                                         ; DEBUG   ; Dx.__init__: KLAP final in V3_VBEL-View (3,295) ...
2024-08-01 17:59:28,773 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PGRP final in V3_VBEL-View (2,300) ...
2024-08-01 17:59:28,777 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PUMP final in V3_VBEL-View (2,381) ...
2024-08-01 17:59:28,794 ; PT3S                                                         ; DEBUG   ; Dx.__init__: ROHR final in V3_VBEL-View (524,322) ...
2024-08-01 17:59:28,811 ; PT3S                                                         ; DEBUG   ; Dx.__init__: VENT final in V3_VBEL-View (12,308) ...
2024-08-01 17:59:28,932 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_DPKT ...
2024-08-01 17:59:28,941 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RKNOT ...
2024-08-01 17:59:29,002 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RRUES ...
2024-08-01 17:59:29,024 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RVBEL ...
2024-08-01 17:59:29,027 ; PT3S                                                         ; DEBUG   ; Dx.__init__: _Done.#########
2024-08-01 17:59:29,027 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: detecting MX-Source for dx.dbFile (abspath) c:\users\wolters\3s\pt3s\Examples\Example1.db3 ...
2024-08-01 17:59:29,027 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: wDir from dbFile: .\WDExample1
2024-08-01 17:59:29,027 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: abspath of wDir from dbFile: c:\users\wolters\3s\pt3s\Examples\WDExample1
2024-08-01 17:59:29,027 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: wDirMx from abspath of wDir from dbFile: c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1
2024-08-01 17:59:29,027 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: mx1File: ..\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MX1
2024-08-01 17:59:29,027 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: corresponding dbFileMxPkl-File: ..\Examples\Example1-mx-_Examples_WDExample1_B1_V0_BZ1_M_1_0_1_1_MX1.pkl
2024-08-01 17:59:29,194 ; PT3S                                                         ; INFO    ; dxAndMxHelperFcts.readDxAndMx: running C:\\3S\Sir3s\SirCalc-90-14-02-10_Potsdam\SirCalc.exe ...
2024-08-01 17:59:36,704 ; PT3S                                                         ; DEBUG   ; Mx.__init__: Start.#########
2024-08-01 17:59:36,704 ; PT3S                                                         ; DEBUG   ; Mx._initWithMx1: Start.
2024-08-01 17:59:36,704 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: Start.
2024-08-01 17:59:36,724 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: mx1File: c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MX1 mx1Df read. Shape: (494, 22).
2024-08-01 17:59:36,727 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: mx1Df after some generated Columns: Shape: (494, 27).
2024-08-01 17:59:36,727 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: _Done.
2024-08-01 17:59:36,727 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: Start.
2024-08-01 17:59:36,735 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: _Done.
2024-08-01 17:59:36,735 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtString: Start.
2024-08-01 17:59:36,744 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtString: Bytes per MX-Record=155140. Bytes Unpacked=155140 (making up 100.00 Bytes-%).
2024-08-01 17:59:36,744 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtString: mx1Df after generated Column: Shape: (494, 28).
2024-08-01 17:59:36,744 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtString: _Done.
2024-08-01 17:59:36,744 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: Start.
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: _Done.
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx._initWithMx1: _Done.
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx.__init__: mxsFile c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MXS exists _and is newer than mx1File c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MX1 _and NoMxsRead False:
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx.__init__: mxsFile is read.
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Start.
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Mxs: Implicit specified.
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx._handleMxsVecsFileDeletion: Start.
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx._handleMxsVecsFileDeletion: Delete H5Dump because Mxs c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MXS To Read is newer than H5Dump c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.vec.h5 ...
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx._handleMxsVecsFileDeletion: _Done.
2024-08-01 17:59:36,751 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Mxs: c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MXS opening ...
2024-08-01 17:59:36,762 ; PT3S                                                         ; INFO    ; Mx.setResultsToMxsFile: Mxs: ..\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MXS reading ...
2024-08-01 17:59:36,762 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: Start.
2024-08-01 17:59:36,762 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: CVERSO: SIR 3S 90-14-02-10 3S Consult, 30827 Garbsen - 01.08.2024 17:59 - M-1-0-1       .
2024-08-01 17:59:36,827 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: cSNAPSHOTTYPE STAT     processed to (empty) dfVecAggs with TIMESTAMPL: 2023-02-12 23:00:00+00:00
2024-08-01 17:59:36,827 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      1 read and processed finally=2023-02-12 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: STAT. - H5Dump: YES: key=/                   0 not in keys.
2024-08-01 17:59:36,927 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: cSNAPSHOTTYPE TIME     processed to         dfVecAggs with TIMESTAMPL: 2023-02-12 23:00:00+00:00
2024-08-01 17:59:36,927 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      2 read and processed finally=2023-02-12 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/                   0 not in keys - Nr.      1.
2024-08-01 17:59:36,938 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      3 read and processed finally=2023-02-13 00:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/             3600000 not in keys.
2024-08-01 17:59:36,938 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      4 read and processed finally=2023-02-13 01:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/             7200000 not in keys.
2024-08-01 17:59:36,944 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      5 read and processed finally=2023-02-13 02:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            10800000 not in keys.
2024-08-01 17:59:36,944 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      6 read and processed finally=2023-02-13 03:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            14400000 not in keys.
2024-08-01 17:59:36,944 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      7 read and processed finally=2023-02-13 04:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            18000000 not in keys.
2024-08-01 17:59:36,944 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      8 read and processed finally=2023-02-13 05:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            21600000 not in keys.
2024-08-01 17:59:36,944 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      9 read and processed finally=2023-02-13 06:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            25200000 not in keys.
2024-08-01 17:59:36,944 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     10 read and processed finally=2023-02-13 07:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            28800000 not in keys.
2024-08-01 17:59:36,955 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     11 read and processed finally=2023-02-13 08:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            32400000 not in keys.
2024-08-01 17:59:36,955 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     12 read and processed finally=2023-02-13 09:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            36000000 not in keys.
2024-08-01 17:59:36,955 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     13 read and processed finally=2023-02-13 10:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            39600000 not in keys.
2024-08-01 17:59:36,961 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     14 read and processed finally=2023-02-13 11:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            43200000 not in keys.
2024-08-01 17:59:36,961 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     15 read and processed finally=2023-02-13 12:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            46800000 not in keys.
2024-08-01 17:59:36,965 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     16 read and processed finally=2023-02-13 13:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            50400000 not in keys.
2024-08-01 17:59:36,965 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     17 read and processed finally=2023-02-13 14:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            54000000 not in keys.
2024-08-01 17:59:36,965 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     18 read and processed finally=2023-02-13 15:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            57600000 not in keys.
2024-08-01 17:59:36,972 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     19 read and processed finally=2023-02-13 16:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            61200000 not in keys.
2024-08-01 17:59:36,972 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     20 read and processed finally=2023-02-13 17:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            64800000 not in keys.
2024-08-01 17:59:36,972 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     21 read and processed finally=2023-02-13 18:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            68400000 not in keys.
2024-08-01 17:59:36,978 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     22 read and processed finally=2023-02-13 19:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            72000000 not in keys.
2024-08-01 17:59:36,978 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     23 read and processed finally=2023-02-13 20:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            75600000 not in keys.
2024-08-01 17:59:36,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     24 read and processed finally=2023-02-13 21:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            79200000 not in keys.
2024-08-01 17:59:36,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     25 read and processed finally=2023-02-13 22:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            82800000 not in keys.
2024-08-01 17:59:36,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     26 read and processed finally=2023-02-13 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            86400000 not in keys.
2024-08-01 17:59:37,058 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: cSNAPSHOTTYPE TMIN     processed to         dfVecAggs with TIMESTAMPL: 2023-02-12 23:00:00+00:00
2024-08-01 17:59:37,060 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     27 read and processed finally=2023-02-13 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TMIN. - H5Dump: YES: key=/            86400000 not in keys.
2024-08-01 17:59:37,120 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: cSNAPSHOTTYPE TMAX     processed to         dfVecAggs with TIMESTAMPL: 2023-02-12 23:00:00+00:00
2024-08-01 17:59:37,120 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     28 read and processed finally=2023-02-13 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TMAX. - H5Dump: YES: key=/            86400000 not in keys.
2024-08-01 17:59:37,120 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: File finished: Records read=28. Last Time read=2023-02-13 23:00:00.000000+0000. MB read=0004.34.
2024-08-01 17:59:37,120 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: df.shape(): (28, 329).
2024-08-01 17:59:37,120 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: _Done.
2024-08-01 17:59:37,125 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Mxs: c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MXS: NOT unique TIMESTAMPS: Their dfMxs Shape: (3, 329).
2024-08-01 17:59:37,125 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Mxs: c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MXS: Assigned.     df Shape: (25, 329).
2024-08-01 17:59:37,125 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: RESULT after c:\users\wolters\3s\pt3s\Examples\WDExample1\B1\V0\BZ1\M-1-0-1.1.MXS: df Shape: (25, 329) First Time: 2023-02-12 23:00:00+00:00 Last Time: 2023-02-13 23:00:00+00:00.
2024-08-01 17:59:37,134 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: _Done.
2024-08-01 17:59:37,134 ; PT3S                                                         ; DEBUG   ; Mx.__init__: _Done.#########
2024-08-01 17:59:37,134 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: MX read ok so far.
2024-08-01 17:59:37,134 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Start.
2024-08-01 17:59:37,134 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: Start.
2024-08-01 17:59:37,349 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: _Done.
2024-08-01 17:59:37,349 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Wblz: Start.
2024-08-01 17:59:37,349 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Wblz: no WBLZs available ...
2024-08-01 17:59:37,349 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Wblz: _Done.
2024-08-01 17:59:37,349 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Start.
2024-08-01 17:59:37,511 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: _Done.
2024-08-01 17:59:37,511 ; PT3S                                                         ; INFO    ; dxWithMx.__init__: Example1: processing dx and mx ...
2024-08-01 17:59:37,511 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Start.
2024-08-01 17:59:37,544 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: _Done.
2024-08-01 17:59:37,545 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: Start.
2024-08-01 17:59:37,545 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: dfName: V3_KNOT: read Results:
2024-08-01 17:59:37,553 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: dfName: V3_ROHR: read Results:
2024-08-01 17:59:37,561 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: dfName: V3_FWVB: read Results:
2024-08-01 17:59:37,561 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: dfName: V3_ROHR: addNodeData:
2024-08-01 17:59:37,561 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: dfName: V3_FWVB: addNodeData:
2024-08-01 17:59:37,561 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForAttributeType: Start.
2024-08-01 17:59:37,561 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForAttributeType: Sir3sIDsMatching: ['FWES~*~*~*~QM', 'FWVB~*~*~*~QM', 'KLAP~*~*~*~QM', 'KNOT~*~*~*~QM', 'PGRP~*~*~*~QM', 'PUMP~*~*~*~QM', 'ROHR~*~*~*~QMAV', 'VENT~*~*~*~QM']
2024-08-01 17:59:37,561 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForAttributeType: choosen Name of 'common' ATTR: QM.
2024-08-01 17:59:37,594 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForAttributeType: _Done.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: _Done.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['QM'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['PH_i'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['PH_k'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['T_i'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['T_k'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['H_i'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['H_k'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['RHO_i'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['RHO_k'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['mlc_i'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_VBEL['mlc_k'] ok so far.
2024-08-01 17:59:37,627 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHR['QMAVAbs'] ok so far.
2024-08-01 17:59:37,642 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHR['VAVAbs'] ok so far.
2024-08-01 17:59:37,644 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHR['PHRAbs'] ok so far.
2024-08-01 17:59:37,644 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHR['JVAbs'] ok so far.
2024-08-01 17:59:37,644 ; PT3S                                                         ; DEBUG   ; dxWithMx._V3_ROHRVEC: Start.
2024-08-01 17:59:37,706 ; PT3S                                                         ; DEBUG   ; dxWithMx._V3_ROHRVEC: _Done.
2024-08-01 17:59:37,706 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHRVEC ok so far.
2024-08-01 17:59:37,706 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_FWVB['W'] ok so far.
2024-08-01 17:59:37,706 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_FWVB['QM'] ok so far.
2024-08-01 17:59:37,706 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_FWVB['TI'] ok so far.
2024-08-01 17:59:37,706 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_FWVB['TK'] ok so far.
2024-08-01 17:59:37,711 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Adding MX-Results to V3_WBLZ ok so far.
2024-08-01 17:59:37,711 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: crs reading successful:  EPSG:25832
2024-08-01 17:59:37,727 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of gdf_FWVB and gdf_ROHR ok so far.
2024-08-01 17:59:37,860 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing NetworkX Graph G ok so far.
2024-08-01 17:59:37,861 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing NetworkX Graph G nodeposDctNx ok so far.
2024-08-01 17:59:37,866 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing NetworkX Graph GSig ok so far.
2024-08-01 17:59:37,866 ; PT3S                                                         ; DEBUG   ; dxWithMx._V3_AGSN: Start.
2024-08-01 17:59:38,929 ; PT3S                                                         ; DEBUG   ; dxWithMx._V3_AGSN: _Done.
2024-08-01 17:59:38,929 ; PT3S                                                         ; DEBUG   ; dxWithMx._V3_AGSNVEC: Start.
2024-08-01 17:59:39,124 ; PT3S                                                         ; DEBUG   ; dxWithMx._V3_AGSNVEC: _Done.
2024-08-01 17:59:39,128 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: _Done.
2024-08-01 17:59:39,128 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: _Done.
2024-08-01 17:59:39,420 ; matplotlib                                                   ; DEBUG   ; matplotlib data path: C:\Users\wolters\AppData\Local\anaconda3\Lib\site-packages\matplotlib\mpl-data
2024-08-01 17:59:39,428 ; matplotlib                                                   ; DEBUG   ; CONFIGDIR=C:\Users\wolters\.matplotlib
2024-08-01 17:59:39,428 ; matplotlib                                                   ; DEBUG   ; interactive is False
2024-08-01 17:59:39,428 ; matplotlib                                                   ; DEBUG   ; platform is win32
2024-08-01 17:59:39,520 ; matplotlib                                                   ; DEBUG   ; CACHEDIR=C:\Users\wolters\.matplotlib
2024-08-01 17:59:39,520 ; matplotlib.font_manager                                      ; DEBUG   ; Using fontManager instance from C:\Users\wolters\.matplotlib\fontlist-v330.json
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=583)
           2	RESUME(arg=0, lineno=583)
           4	LOAD_GLOBAL(arg=1, lineno=600)
          16	LOAD_FAST(arg=0, lineno=600)
          18	PRECALL(arg=1, lineno=600)
          22	CALL(arg=1, lineno=600)
          32	STORE_FAST(arg=2, lineno=600)
          34	LOAD_GLOBAL(arg=3, lineno=601)
          46	LOAD_ATTR(arg=2, lineno=601)
          56	LOAD_FAST(arg=2, lineno=601)
          58	LOAD_CONST(arg=1, lineno=601)
          60	BINARY_OP(arg=0, lineno=601)
          64	LOAD_FAST(arg=1, lineno=601)
          66	LOAD_CONST(arg=1, lineno=601)
          68	BINARY_OP(arg=0, lineno=601)
          72	BUILD_TUPLE(arg=2, lineno=601)
          74	LOAD_GLOBAL(arg=2, lineno=601)
          86	LOAD_ATTR(arg=3, lineno=601)
          96	KW_NAMES(arg=2, lineno=601)
          98	PRECALL(arg=2, lineno=601)
         102	CALL(arg=2, lineno=601)
         112	STORE_FAST(arg=3, lineno=601)
         114	LOAD_GLOBAL(arg=3, lineno=602)
         126	LOAD_ATTR(arg=2, lineno=602)
         136	LOAD_FAST(arg=2, lineno=602)
         138	LOAD_CONST(arg=1, lineno=602)
         140	BINARY_OP(arg=0, lineno=602)
         144	LOAD_FAST(arg=1, lineno=602)
         146	LOAD_CONST(arg=1, lineno=602)
         148	BINARY_OP(arg=0, lineno=602)
         152	BUILD_TUPLE(arg=2, lineno=602)
         154	LOAD_GLOBAL(arg=2, lineno=602)
         166	LOAD_ATTR(arg=4, lineno=602)
         176	KW_NAMES(arg=2, lineno=602)
         178	PRECALL(arg=2, lineno=602)
         182	CALL(arg=2, lineno=602)
         192	STORE_FAST(arg=4, lineno=602)
         194	LOAD_CONST(arg=1, lineno=603)
         196	LOAD_FAST(arg=3, lineno=603)
         198	LOAD_CONST(arg=1, lineno=603)
         200	LOAD_CONST(arg=1, lineno=603)
         202	LOAD_CONST(arg=3, lineno=603)
         204	BUILD_SLICE(arg=2, lineno=603)
         206	BUILD_TUPLE(arg=2, lineno=603)
         208	STORE_SUBSCR(arg=None, lineno=603)
         212	LOAD_GLOBAL(arg=2, lineno=604)
         224	LOAD_ATTR(arg=5, lineno=604)
         234	LOAD_FAST(arg=4, lineno=604)
         236	LOAD_CONST(arg=4, lineno=604)
         238	LOAD_CONST(arg=3, lineno=604)
         240	BUILD_SLICE(arg=2, lineno=604)
         242	LOAD_CONST(arg=1, lineno=604)
         244	LOAD_CONST(arg=3, lineno=604)
         246	BUILD_SLICE(arg=2, lineno=604)
         248	BUILD_TUPLE(arg=2, lineno=604)
         250	STORE_SUBSCR(arg=None, lineno=604)
         254	LOAD_GLOBAL(arg=3, lineno=606)
         266	LOAD_ATTR(arg=4, lineno=606)
         276	LOAD_CONST(arg=5, lineno=606)
         278	PRECALL(arg=1, lineno=606)
         282	CALL(arg=1, lineno=606)
         292	STORE_FAST(arg=5, lineno=606)
         294	LOAD_GLOBAL(arg=13, lineno=607)
         306	LOAD_CONST(arg=4, lineno=607)
         308	LOAD_GLOBAL(arg=1, lineno=607)
         320	LOAD_FAST(arg=0, lineno=607)
         322	PRECALL(arg=1, lineno=607)
         326	CALL(arg=1, lineno=607)
         336	LOAD_CONST(arg=1, lineno=607)
         338	BINARY_OP(arg=0, lineno=607)
         342	PRECALL(arg=2, lineno=607)
         346	CALL(arg=2, lineno=607)
         356	GET_ITER(arg=None, lineno=607)
>        358	NOP(arg=1, lineno=607)
         360	FOR_ITER(arg=272, lineno=607)
         362	STORE_FAST(arg=6, lineno=607)
         364	LOAD_GLOBAL(arg=3, lineno=608)
         376	LOAD_ATTR(arg=4, lineno=608)
         386	LOAD_CONST(arg=5, lineno=608)
         388	PRECALL(arg=1, lineno=608)
         392	CALL(arg=1, lineno=608)
         402	STORE_FAST(arg=7, lineno=608)
         404	LOAD_GLOBAL(arg=3, lineno=609)
         416	LOAD_ATTR(arg=4, lineno=609)
         426	LOAD_CONST(arg=5, lineno=609)
         428	PRECALL(arg=1, lineno=609)
         432	CALL(arg=1, lineno=609)
         442	STORE_FAST(arg=8, lineno=609)
         444	LOAD_GLOBAL(arg=3, lineno=610)
         456	LOAD_ATTR(arg=4, lineno=610)
         466	LOAD_CONST(arg=5, lineno=610)
         468	PRECALL(arg=1, lineno=610)
         472	CALL(arg=1, lineno=610)
         482	STORE_FAST(arg=9, lineno=610)
         484	LOAD_GLOBAL(arg=13, lineno=611)
         496	LOAD_CONST(arg=1, lineno=611)
         498	LOAD_FAST(arg=6, lineno=611)
         500	LOAD_CONST(arg=1, lineno=611)
         502	BINARY_OP(arg=0, lineno=611)
         506	PRECALL(arg=2, lineno=611)
         510	CALL(arg=2, lineno=611)
         520	GET_ITER(arg=None, lineno=611)
>        522	FOR_ITER(arg=175, lineno=611)
         524	STORE_FAST(arg=10, lineno=611)
         526	LOAD_FAST(arg=6, lineno=612)
         528	LOAD_FAST(arg=10, lineno=612)
         530	BINARY_OP(arg=10, lineno=612)
         534	LOAD_CONST(arg=1, lineno=612)
         536	BINARY_OP(arg=0, lineno=612)
         540	STORE_FAST(arg=11, lineno=612)
         542	LOAD_GLOBAL(arg=3, lineno=613)
         554	LOAD_ATTR(arg=4, lineno=613)
         564	LOAD_FAST(arg=0, lineno=613)
         566	LOAD_FAST(arg=11, lineno=613)
         568	LOAD_CONST(arg=1, lineno=613)
         570	BINARY_OP(arg=10, lineno=613)
         574	BINARY_SUBSCR(arg=None, lineno=613)
         584	PRECALL(arg=1, lineno=613)
         588	CALL(arg=1, lineno=613)
         598	STORE_FAST(arg=12, lineno=613)
         600	LOAD_FAST(arg=8, lineno=614)
         602	LOAD_FAST(arg=12, lineno=614)
         604	LOAD_FAST(arg=12, lineno=614)
         606	BINARY_OP(arg=5, lineno=614)
         610	BINARY_OP(arg=13, lineno=614)
         614	STORE_FAST(arg=8, lineno=614)
         616	LOAD_FAST(arg=7, lineno=615)
         618	LOAD_FAST(arg=12, lineno=615)
         620	BINARY_OP(arg=13, lineno=615)
         624	STORE_FAST(arg=7, lineno=615)
         626	LOAD_FAST(arg=9, lineno=616)
         628	LOAD_GLOBAL(arg=3, lineno=616)
         640	LOAD_ATTR(arg=4, lineno=616)
         650	LOAD_CONST(arg=1, lineno=616)
         652	PRECALL(arg=1, lineno=616)
         656	CALL(arg=1, lineno=616)
         666	BINARY_OP(arg=13, lineno=616)
         670	STORE_FAST(arg=9, lineno=616)
         672	LOAD_FAST(arg=8, lineno=617)
         674	LOAD_FAST(arg=7, lineno=617)
         676	LOAD_FAST(arg=7, lineno=617)
         678	BINARY_OP(arg=5, lineno=617)
         682	LOAD_FAST(arg=9, lineno=617)
         684	BINARY_OP(arg=11, lineno=617)
         688	BINARY_OP(arg=10, lineno=617)
         692	STORE_FAST(arg=5, lineno=617)
         694	LOAD_FAST(arg=11, lineno=618)
         696	LOAD_CONST(arg=1, lineno=618)
         698	BINARY_OP(arg=10, lineno=618)
         702	STORE_FAST(arg=13, lineno=618)
         704	LOAD_FAST(arg=13, lineno=619)
         706	LOAD_CONST(arg=5, lineno=619)
         708	COMPARE_OP(arg=3, lineno=619)
         714	POP_JUMP_FORWARD_IF_FALSE(arg=78, lineno=619)
         716	LOAD_GLOBAL(arg=13, lineno=620)
         728	LOAD_CONST(arg=4, lineno=620)
         730	LOAD_FAST(arg=1, lineno=620)
         732	LOAD_CONST(arg=1, lineno=620)
         734	BINARY_OP(arg=0, lineno=620)
         738	PRECALL(arg=2, lineno=620)
         742	CALL(arg=2, lineno=620)
         752	GET_ITER(arg=None, lineno=620)
>        754	FOR_ITER(arg=58, lineno=620)
         756	STORE_FAST(arg=14, lineno=620)
         758	LOAD_FAST(arg=4, lineno=621)
         760	LOAD_FAST(arg=6, lineno=621)
         762	LOAD_FAST(arg=14, lineno=621)
         764	BUILD_TUPLE(arg=2, lineno=621)
         766	BINARY_SUBSCR(arg=None, lineno=621)
         776	LOAD_FAST(arg=5, lineno=621)
         778	LOAD_FAST(arg=4, lineno=621)
         780	LOAD_FAST(arg=13, lineno=621)
         782	LOAD_FAST(arg=14, lineno=621)
         784	LOAD_CONST(arg=1, lineno=621)
         786	BINARY_OP(arg=10, lineno=621)
         790	BUILD_TUPLE(arg=2, lineno=621)
         792	BINARY_SUBSCR(arg=None, lineno=621)
         802	BINARY_OP(arg=0, lineno=621)
         806	COMPARE_OP(arg=5, lineno=621)
         812	POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=621)
         814	LOAD_FAST(arg=11, lineno=622)
         816	LOAD_FAST(arg=3, lineno=622)
         818	LOAD_FAST(arg=6, lineno=622)
         820	LOAD_FAST(arg=14, lineno=622)
         822	BUILD_TUPLE(arg=2, lineno=622)
         824	STORE_SUBSCR(arg=None, lineno=622)
         828	LOAD_FAST(arg=5, lineno=623)
         830	LOAD_FAST(arg=4, lineno=623)
         832	LOAD_FAST(arg=13, lineno=623)
         834	LOAD_FAST(arg=14, lineno=623)
         836	LOAD_CONST(arg=1, lineno=623)
         838	BINARY_OP(arg=10, lineno=623)
         842	BUILD_TUPLE(arg=2, lineno=623)
         844	BINARY_SUBSCR(arg=None, lineno=623)
         854	BINARY_OP(arg=0, lineno=623)
         858	LOAD_FAST(arg=4, lineno=623)
         860	LOAD_FAST(arg=6, lineno=623)
         862	LOAD_FAST(arg=14, lineno=623)
         864	BUILD_TUPLE(arg=2, lineno=623)
         866	STORE_SUBSCR(arg=None, lineno=623)
>        870	JUMP_BACKWARD(arg=59, lineno=623)
>        872	JUMP_BACKWARD(arg=176, lineno=623)
>        874	LOAD_CONST(arg=1, lineno=624)
         876	LOAD_FAST(arg=3, lineno=624)
         878	LOAD_FAST(arg=6, lineno=624)
         880	LOAD_CONST(arg=1, lineno=624)
         882	BUILD_TUPLE(arg=2, lineno=624)
         884	STORE_SUBSCR(arg=None, lineno=624)
         888	LOAD_FAST(arg=5, lineno=625)
         890	LOAD_FAST(arg=4, lineno=625)
         892	LOAD_FAST(arg=6, lineno=625)
         894	LOAD_CONST(arg=1, lineno=625)
         896	BUILD_TUPLE(arg=2, lineno=625)
         898	STORE_SUBSCR(arg=None, lineno=625)
         902	NOP(arg=1, lineno=625)
         904	JUMP_BACKWARD(arg=274, lineno=625)
>        906	LOAD_GLOBAL(arg=1, lineno=627)
         918	LOAD_FAST(arg=0, lineno=627)
         920	PRECALL(arg=1, lineno=627)
         924	CALL(arg=1, lineno=627)
         934	STORE_FAST(arg=15, lineno=627)
         936	LOAD_GLOBAL(arg=3, lineno=629)
         948	LOAD_ATTR(arg=2, lineno=629)
         958	LOAD_FAST(arg=1, lineno=629)
         960	LOAD_CONST(arg=1, lineno=629)
         962	BINARY_OP(arg=0, lineno=629)
         966	LOAD_FAST(arg=0, lineno=629)
         968	LOAD_ATTR(arg=7, lineno=629)
         978	KW_NAMES(arg=2, lineno=629)
         980	PRECALL(arg=2, lineno=629)
         984	CALL(arg=2, lineno=629)
         994	STORE_FAST(arg=16, lineno=629)
         996	LOAD_FAST(arg=0, lineno=630)
         998	LOAD_GLOBAL(arg=1, lineno=630)
        1010	LOAD_FAST(arg=0, lineno=630)
        1012	PRECALL(arg=1, lineno=630)
        1016	CALL(arg=1, lineno=630)
        1026	LOAD_CONST(arg=1, lineno=630)
        1028	BINARY_OP(arg=10, lineno=630)
        1032	BINARY_SUBSCR(arg=None, lineno=630)
        1042	LOAD_FAST(arg=16, lineno=630)
        1044	LOAD_FAST(arg=1, lineno=630)
        1046	STORE_SUBSCR(arg=None, lineno=630)
        1050	LOAD_FAST(arg=0, lineno=631)
        1052	LOAD_CONST(arg=5, lineno=631)
        1054	BINARY_SUBSCR(arg=None, lineno=631)
        1064	LOAD_FAST(arg=16, lineno=631)
        1066	LOAD_CONST(arg=5, lineno=631)
        1068	STORE_SUBSCR(arg=None, lineno=631)
        1072	LOAD_GLOBAL(arg=13, lineno=632)
        1084	LOAD_FAST(arg=1, lineno=632)
        1086	LOAD_CONST(arg=1, lineno=632)
        1088	LOAD_CONST(arg=6, lineno=632)
        1090	PRECALL(arg=3, lineno=632)
        1094	CALL(arg=3, lineno=632)
        1104	GET_ITER(arg=None, lineno=632)
>       1106	FOR_ITER(arg=62, lineno=632)
        1108	STORE_FAST(arg=17, lineno=632)
        1110	LOAD_FAST(arg=3, lineno=633)
        1112	LOAD_FAST(arg=15, lineno=633)
        1114	LOAD_FAST(arg=17, lineno=633)
        1116	BUILD_TUPLE(arg=2, lineno=633)
        1118	BINARY_SUBSCR(arg=None, lineno=633)
        1128	STORE_FAST(arg=18, lineno=633)
        1130	LOAD_GLOBAL(arg=17, lineno=634)
        1142	LOAD_FAST(arg=18, lineno=634)
        1144	LOAD_CONST(arg=4, lineno=634)
        1146	BINARY_OP(arg=10, lineno=634)
        1150	PRECALL(arg=1, lineno=634)
        1154	CALL(arg=1, lineno=634)
        1164	STORE_FAST(arg=19, lineno=634)
        1166	LOAD_FAST(arg=0, lineno=635)
        1168	LOAD_FAST(arg=19, lineno=635)
        1170	BINARY_SUBSCR(arg=None, lineno=635)
        1180	LOAD_FAST(arg=16, lineno=635)
        1182	LOAD_FAST(arg=17, lineno=635)
        1184	LOAD_CONST(arg=1, lineno=635)
        1186	BINARY_OP(arg=10, lineno=635)
        1190	STORE_SUBSCR(arg=None, lineno=635)
        1194	LOAD_GLOBAL(arg=17, lineno=636)
        1206	LOAD_FAST(arg=18, lineno=636)
        1208	LOAD_CONST(arg=1, lineno=636)
        1210	BINARY_OP(arg=10, lineno=636)
        1214	PRECALL(arg=1, lineno=636)
        1218	CALL(arg=1, lineno=636)
        1228	STORE_FAST(arg=15, lineno=636)
        1230	JUMP_BACKWARD(arg=63, lineno=636)
>       1232	LOAD_GLOBAL(arg=3, lineno=637)
        1244	LOAD_ATTR(arg=9, lineno=637)
        1254	LOAD_FAST(arg=16, lineno=637)
        1256	LOAD_CONST(arg=5, lineno=637)
        1258	PRECALL(arg=2, lineno=637)
        1262	CALL(arg=2, lineno=637)
        1272	RETURN_VALUE(arg=None, lineno=637)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=583)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=583)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=600)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=600)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=PRECALL(arg=1, lineno=600)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$values16.2']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=CALL(arg=1, lineno=600)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$values16.2']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=STORE_FAST(arg=2, lineno=600)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$22call.3']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$34load_global.4']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$n_data56.7']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=60, inst=BINARY_OP(arg=0, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$n_data56.7', '$const58.8']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$binop_add60.9']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=66, inst=LOAD_CONST(arg=1, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$binop_add60.9', '$classes64.10']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=68, inst=BINARY_OP(arg=0, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$binop_add60.9', '$classes64.10', '$const66.11']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=BUILD_TUPLE(arg=2, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$binop_add60.9', '$binop_add68.12']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=74, inst=LOAD_GLOBAL(arg=2, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13', '$74load_global.14']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=96, inst=KW_NAMES(arg=2, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13', '$86load_attr.15']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=98, inst=PRECALL(arg=2, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13', '$86load_attr.15']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=102, inst=CALL(arg=2, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13', '$86load_attr.15']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=112, inst=STORE_FAST(arg=3, lineno=601)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$102call.16']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=114, inst=LOAD_GLOBAL(arg=3, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=126, inst=LOAD_ATTR(arg=2, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$114load_global.17']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=136, inst=LOAD_FAST(arg=2, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=138, inst=LOAD_CONST(arg=1, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$n_data136.20']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=140, inst=BINARY_OP(arg=0, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$n_data136.20', '$const138.21']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=144, inst=LOAD_FAST(arg=1, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$binop_add140.22']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=146, inst=LOAD_CONST(arg=1, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$binop_add140.22', '$classes144.23']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=148, inst=BINARY_OP(arg=0, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$binop_add140.22', '$classes144.23', '$const146.24']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=152, inst=BUILD_TUPLE(arg=2, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$binop_add140.22', '$binop_add148.25']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=154, inst=LOAD_GLOBAL(arg=2, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=166, inst=LOAD_ATTR(arg=4, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26', '$154load_global.27']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=176, inst=KW_NAMES(arg=2, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26', '$166load_attr.28']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=178, inst=PRECALL(arg=2, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26', '$166load_attr.28']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=182, inst=CALL(arg=2, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26', '$166load_attr.28']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=192, inst=STORE_FAST(arg=4, lineno=602)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$182call.29']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=194, inst=LOAD_CONST(arg=1, lineno=603)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=196, inst=LOAD_FAST(arg=3, lineno=603)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=198, inst=LOAD_CONST(arg=1, lineno=603)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=200, inst=LOAD_CONST(arg=1, lineno=603)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$const198.32']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=202, inst=LOAD_CONST(arg=3, lineno=603)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$const198.32', '$const200.33']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=204, inst=BUILD_SLICE(arg=2, lineno=603)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$const198.32', '$const200.33', '$const202.34']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=206, inst=BUILD_TUPLE(arg=2, lineno=603)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$const198.32', '$204build_slice.36']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=208, inst=STORE_SUBSCR(arg=None, lineno=603)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$206build_tuple.37']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=212, inst=LOAD_GLOBAL(arg=2, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=224, inst=LOAD_ATTR(arg=5, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$212load_global.38']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=236, inst=LOAD_CONST(arg=4, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=238, inst=LOAD_CONST(arg=3, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$const236.41']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=240, inst=BUILD_SLICE(arg=2, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$const236.41', '$const238.42']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$240build_slice.44']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=244, inst=LOAD_CONST(arg=3, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$240build_slice.44', '$const242.45']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=246, inst=BUILD_SLICE(arg=2, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$240build_slice.44', '$const242.45', '$const244.46']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$240build_slice.44', '$246build_slice.48']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=250, inst=STORE_SUBSCR(arg=None, lineno=604)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$248build_tuple.49']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=254, inst=LOAD_GLOBAL(arg=3, lineno=606)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=266, inst=LOAD_ATTR(arg=4, lineno=606)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$254.51', '$254load_global.50']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=276, inst=LOAD_CONST(arg=5, lineno=606)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$254.51', '$266load_attr.52']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=278, inst=PRECALL(arg=1, lineno=606)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$254.51', '$266load_attr.52', '$const276.53']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=282, inst=CALL(arg=1, lineno=606)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$254.51', '$266load_attr.52', '$const276.53']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=292, inst=STORE_FAST(arg=5, lineno=606)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$282call.54']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=294, inst=LOAD_GLOBAL(arg=13, lineno=607)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=306, inst=LOAD_CONST(arg=4, lineno=607)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=308, inst=LOAD_GLOBAL(arg=1, lineno=607)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=320, inst=LOAD_FAST(arg=0, lineno=607)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$null$308.59', '$308load_global.58']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=322, inst=PRECALL(arg=1, lineno=607)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$null$308.59', '$308load_global.58', '$values320.60']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=326, inst=CALL(arg=1, lineno=607)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$null$308.59', '$308load_global.58', '$values320.60']
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=336, inst=LOAD_CONST(arg=1, lineno=607)
2024-08-01 17:59:43,160 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$326call.61']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=338, inst=BINARY_OP(arg=0, lineno=607)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$326call.61', '$const336.62']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=342, inst=PRECALL(arg=2, lineno=607)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$binop_add338.63']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=346, inst=CALL(arg=2, lineno=607)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$binop_add338.63']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=356, inst=GET_ITER(arg=None, lineno=607)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$346call.64']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=358, stack=('$356get_iter.65',), blockstack=(), npush=0)]
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=358 nstack_initial=1)])
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi358.0']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=358 nstack_initial=1)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=358, inst=NOP(arg=1, lineno=607)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi358.0']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=360, stack=('$phi358.0',), blockstack=(), npush=0)]
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=360 nstack_initial=1)])
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi360.0']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=360 nstack_initial=1)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=360, inst=FOR_ITER(arg=272, lineno=607)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi360.0']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=906, stack=(), blockstack=(), npush=0), Edge(pc=362, stack=('$phi360.0', '$360for_iter.2'), blockstack=(), npush=0)]
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=906 nstack_initial=0), State(pc_initial=362 nstack_initial=2)])
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=906 nstack_initial=0)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=906, inst=LOAD_GLOBAL(arg=1, lineno=627)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=918, inst=LOAD_FAST(arg=0, lineno=627)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$906.1', '$906load_global.0']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=920, inst=PRECALL(arg=1, lineno=627)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$906.1', '$906load_global.0', '$values918.2']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=924, inst=CALL(arg=1, lineno=627)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$906.1', '$906load_global.0', '$values918.2']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=934, inst=STORE_FAST(arg=15, lineno=627)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$924call.3']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=936, inst=LOAD_GLOBAL(arg=3, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=948, inst=LOAD_ATTR(arg=2, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$936load_global.4']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=958, inst=LOAD_FAST(arg=1, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=960, inst=LOAD_CONST(arg=1, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$classes958.7']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=962, inst=BINARY_OP(arg=0, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$classes958.7', '$const960.8']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=966, inst=LOAD_FAST(arg=0, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=968, inst=LOAD_ATTR(arg=7, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9', '$values966.10']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=978, inst=KW_NAMES(arg=2, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9', '$968load_attr.11']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=980, inst=PRECALL(arg=2, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9', '$968load_attr.11']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=984, inst=CALL(arg=2, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9', '$968load_attr.11']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=994, inst=STORE_FAST(arg=16, lineno=629)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$984call.12']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=996, inst=LOAD_FAST(arg=0, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=998, inst=LOAD_GLOBAL(arg=1, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1010, inst=LOAD_FAST(arg=0, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$null$998.15', '$998load_global.14']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1012, inst=PRECALL(arg=1, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$null$998.15', '$998load_global.14', '$values1010.16']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1016, inst=CALL(arg=1, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$null$998.15', '$998load_global.14', '$values1010.16']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1026, inst=LOAD_CONST(arg=1, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$1016call.17']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1028, inst=BINARY_OP(arg=10, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$1016call.17', '$const1026.18']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1032, inst=BINARY_SUBSCR(arg=None, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$binop_sub1028.19']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1042, inst=LOAD_FAST(arg=16, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1032binary_subscr.20']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1044, inst=LOAD_FAST(arg=1, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1032binary_subscr.20', '$kclass1042.21']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1046, inst=STORE_SUBSCR(arg=None, lineno=630)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1032binary_subscr.20', '$kclass1042.21', '$classes1044.22']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1050, inst=LOAD_FAST(arg=0, lineno=631)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1052, inst=LOAD_CONST(arg=5, lineno=631)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values1050.23']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1054, inst=BINARY_SUBSCR(arg=None, lineno=631)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values1050.23', '$const1052.24']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1064, inst=LOAD_FAST(arg=16, lineno=631)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1054binary_subscr.25']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1066, inst=LOAD_CONST(arg=5, lineno=631)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1054binary_subscr.25', '$kclass1064.26']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1068, inst=STORE_SUBSCR(arg=None, lineno=631)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1054binary_subscr.25', '$kclass1064.26', '$const1066.27']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1072, inst=LOAD_GLOBAL(arg=13, lineno=632)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1084, inst=LOAD_FAST(arg=1, lineno=632)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1086, inst=LOAD_CONST(arg=1, lineno=632)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28', '$classes1084.30']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1088, inst=LOAD_CONST(arg=6, lineno=632)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28', '$classes1084.30', '$const1086.31']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1090, inst=PRECALL(arg=3, lineno=632)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28', '$classes1084.30', '$const1086.31', '$const1088.32']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1094, inst=CALL(arg=3, lineno=632)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28', '$classes1084.30', '$const1086.31', '$const1088.32']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1104, inst=GET_ITER(arg=None, lineno=632)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1094call.33']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=1106, stack=('$1104get_iter.34',), blockstack=(), npush=0)]
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=362 nstack_initial=2), State(pc_initial=1106 nstack_initial=1)])
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi362.0', '$phi362.1']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=362 nstack_initial=2)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=362, inst=STORE_FAST(arg=6, lineno=607)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$phi362.1']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=364, inst=LOAD_GLOBAL(arg=3, lineno=608)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=376, inst=LOAD_ATTR(arg=4, lineno=608)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$364.3', '$364load_global.2']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=386, inst=LOAD_CONST(arg=5, lineno=608)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$364.3', '$376load_attr.4']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=388, inst=PRECALL(arg=1, lineno=608)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$364.3', '$376load_attr.4', '$const386.5']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=392, inst=CALL(arg=1, lineno=608)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$364.3', '$376load_attr.4', '$const386.5']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=402, inst=STORE_FAST(arg=7, lineno=608)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$392call.6']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=404, inst=LOAD_GLOBAL(arg=3, lineno=609)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=416, inst=LOAD_ATTR(arg=4, lineno=609)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$404.8', '$404load_global.7']
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=426, inst=LOAD_CONST(arg=5, lineno=609)
2024-08-01 17:59:43,168 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$404.8', '$416load_attr.9']
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=428, inst=PRECALL(arg=1, lineno=609)
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$404.8', '$416load_attr.9', '$const426.10']
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=432, inst=CALL(arg=1, lineno=609)
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$404.8', '$416load_attr.9', '$const426.10']
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=442, inst=STORE_FAST(arg=8, lineno=609)
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$432call.11']
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=444, inst=LOAD_GLOBAL(arg=3, lineno=610)
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0']
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=456, inst=LOAD_ATTR(arg=4, lineno=610)
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$444.13', '$444load_global.12']
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=466, inst=LOAD_CONST(arg=5, lineno=610)
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$444.13', '$456load_attr.14']
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=468, inst=PRECALL(arg=1, lineno=610)
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$444.13', '$456load_attr.14', '$const466.15']
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=472, inst=CALL(arg=1, lineno=610)
2024-08-01 17:59:43,173 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$444.13', '$456load_attr.14', '$const466.15']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=482, inst=STORE_FAST(arg=9, lineno=610)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$472call.16']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=484, inst=LOAD_GLOBAL(arg=13, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=496, inst=LOAD_CONST(arg=1, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=498, inst=LOAD_FAST(arg=6, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=500, inst=LOAD_CONST(arg=1, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19', '$_l498.20']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=502, inst=BINARY_OP(arg=0, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19', '$_l498.20', '$const500.21']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=506, inst=PRECALL(arg=2, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19', '$binop_add502.22']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=510, inst=CALL(arg=2, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19', '$binop_add502.22']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=520, inst=GET_ITER(arg=None, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$510call.23']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=522, stack=('$phi362.0', '$520get_iter.24'), blockstack=(), npush=0)]
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=1106 nstack_initial=1), State(pc_initial=522 nstack_initial=2)])
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi1106.0']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=1106 nstack_initial=1)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1106, inst=FOR_ITER(arg=62, lineno=632)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1106.0']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=1232, stack=(), blockstack=(), npush=0), Edge(pc=1108, stack=('$phi1106.0', '$1106for_iter.2'), blockstack=(), npush=0)]
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=522 nstack_initial=2), State(pc_initial=1232 nstack_initial=0), State(pc_initial=1108 nstack_initial=2)])
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi522.0', '$phi522.1']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=522 nstack_initial=2)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=522, inst=FOR_ITER(arg=175, lineno=611)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi522.0', '$phi522.1']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=874, stack=('$phi522.0',), blockstack=(), npush=0), Edge(pc=524, stack=('$phi522.0', '$phi522.1', '$522for_iter.3'), blockstack=(), npush=0)]
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=1232 nstack_initial=0), State(pc_initial=1108 nstack_initial=2), State(pc_initial=874 nstack_initial=1), State(pc_initial=524 nstack_initial=3)])
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=1232 nstack_initial=0)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1232, inst=LOAD_GLOBAL(arg=3, lineno=637)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1244, inst=LOAD_ATTR(arg=9, lineno=637)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1232load_global.0']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1254, inst=LOAD_FAST(arg=16, lineno=637)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1244load_attr.2']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1256, inst=LOAD_CONST(arg=5, lineno=637)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1244load_attr.2', '$kclass1254.3']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1258, inst=PRECALL(arg=2, lineno=637)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1244load_attr.2', '$kclass1254.3', '$const1256.4']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1262, inst=CALL(arg=2, lineno=637)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1244load_attr.2', '$kclass1254.3', '$const1256.4']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1272, inst=RETURN_VALUE(arg=None, lineno=637)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1262call.5']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=1108 nstack_initial=2), State(pc_initial=874 nstack_initial=1), State(pc_initial=524 nstack_initial=3)])
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi1108.0', '$phi1108.1']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=1108 nstack_initial=2)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1108, inst=STORE_FAST(arg=17, lineno=632)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$phi1108.1']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1110, inst=LOAD_FAST(arg=3, lineno=633)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1112, inst=LOAD_FAST(arg=15, lineno=633)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$mat11110.2']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1114, inst=LOAD_FAST(arg=17, lineno=633)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$mat11110.2', '$k1112.3']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1116, inst=BUILD_TUPLE(arg=2, lineno=633)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$mat11110.2', '$k1112.3', '$countNum1114.4']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1118, inst=BINARY_SUBSCR(arg=None, lineno=633)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$mat11110.2', '$1116build_tuple.5']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1128, inst=STORE_FAST(arg=18, lineno=633)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1118binary_subscr.6']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1130, inst=LOAD_GLOBAL(arg=17, lineno=634)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1142, inst=LOAD_FAST(arg=18, lineno=634)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1144, inst=LOAD_CONST(arg=4, lineno=634)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7', '$pivot1142.9']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1146, inst=BINARY_OP(arg=10, lineno=634)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7', '$pivot1142.9', '$const1144.10']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1150, inst=PRECALL(arg=1, lineno=634)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7', '$binop_sub1146.11']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1154, inst=CALL(arg=1, lineno=634)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7', '$binop_sub1146.11']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1164, inst=STORE_FAST(arg=19, lineno=634)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1154call.12']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1166, inst=LOAD_FAST(arg=0, lineno=635)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1168, inst=LOAD_FAST(arg=19, lineno=635)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$values1166.13']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1170, inst=BINARY_SUBSCR(arg=None, lineno=635)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$values1166.13', '$_id1168.14']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1180, inst=LOAD_FAST(arg=16, lineno=635)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15']
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1182, inst=LOAD_FAST(arg=17, lineno=635)
2024-08-01 17:59:43,174 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15', '$kclass1180.16']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1184, inst=LOAD_CONST(arg=1, lineno=635)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15', '$kclass1180.16', '$countNum1182.17']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1186, inst=BINARY_OP(arg=10, lineno=635)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15', '$kclass1180.16', '$countNum1182.17', '$const1184.18']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1190, inst=STORE_SUBSCR(arg=None, lineno=635)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15', '$kclass1180.16', '$binop_sub1186.19']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1194, inst=LOAD_GLOBAL(arg=17, lineno=636)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1206, inst=LOAD_FAST(arg=18, lineno=636)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1208, inst=LOAD_CONST(arg=1, lineno=636)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20', '$pivot1206.22']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1210, inst=BINARY_OP(arg=10, lineno=636)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20', '$pivot1206.22', '$const1208.23']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1214, inst=PRECALL(arg=1, lineno=636)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20', '$binop_sub1210.24']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1218, inst=CALL(arg=1, lineno=636)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20', '$binop_sub1210.24']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1228, inst=STORE_FAST(arg=15, lineno=636)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1218call.25']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1230, inst=JUMP_BACKWARD(arg=63, lineno=636)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=1106, stack=('$phi1108.0',), blockstack=(), npush=0)]
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=874 nstack_initial=1), State(pc_initial=524 nstack_initial=3), State(pc_initial=1106 nstack_initial=1)])
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi874.0']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=874 nstack_initial=1)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=874, inst=LOAD_CONST(arg=1, lineno=624)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=876, inst=LOAD_FAST(arg=3, lineno=624)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=878, inst=LOAD_FAST(arg=6, lineno=624)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1', '$mat1876.2']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=880, inst=LOAD_CONST(arg=1, lineno=624)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1', '$mat1876.2', '$_l878.3']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=882, inst=BUILD_TUPLE(arg=2, lineno=624)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1', '$mat1876.2', '$_l878.3', '$const880.4']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=884, inst=STORE_SUBSCR(arg=None, lineno=624)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1', '$mat1876.2', '$882build_tuple.5']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=888, inst=LOAD_FAST(arg=5, lineno=625)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=890, inst=LOAD_FAST(arg=4, lineno=625)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=892, inst=LOAD_FAST(arg=6, lineno=625)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6', '$mat2890.7']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=894, inst=LOAD_CONST(arg=1, lineno=625)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6', '$mat2890.7', '$_l892.8']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=896, inst=BUILD_TUPLE(arg=2, lineno=625)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6', '$mat2890.7', '$_l892.8', '$const894.9']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=898, inst=STORE_SUBSCR(arg=None, lineno=625)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6', '$mat2890.7', '$896build_tuple.10']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=902, inst=NOP(arg=1, lineno=625)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=904, inst=JUMP_BACKWARD(arg=274, lineno=625)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=358, stack=('$phi874.0',), blockstack=(), npush=0)]
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=524 nstack_initial=3), State(pc_initial=1106 nstack_initial=1), State(pc_initial=358 nstack_initial=1)])
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi524.0', '$phi524.1', '$phi524.2']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=524 nstack_initial=3)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=524, inst=STORE_FAST(arg=10, lineno=611)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$phi524.2']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=526, inst=LOAD_FAST(arg=6, lineno=612)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=528, inst=LOAD_FAST(arg=10, lineno=612)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$_l526.3']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=530, inst=BINARY_OP(arg=10, lineno=612)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$_l526.3', '$m528.4']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=534, inst=LOAD_CONST(arg=1, lineno=612)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_sub530.5']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=536, inst=BINARY_OP(arg=0, lineno=612)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_sub530.5', '$const534.6']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=540, inst=STORE_FAST(arg=11, lineno=612)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_add536.7']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=542, inst=LOAD_GLOBAL(arg=3, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=554, inst=LOAD_ATTR(arg=4, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$542load_global.8']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=564, inst=LOAD_FAST(arg=0, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=566, inst=LOAD_FAST(arg=11, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$values564.11']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=568, inst=LOAD_CONST(arg=1, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$values564.11', '$i3566.12']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=570, inst=BINARY_OP(arg=10, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$values564.11', '$i3566.12', '$const568.13']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=574, inst=BINARY_SUBSCR(arg=None, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$values564.11', '$binop_sub570.14']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=584, inst=PRECALL(arg=1, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$574binary_subscr.15']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=588, inst=CALL(arg=1, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$574binary_subscr.15']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=598, inst=STORE_FAST(arg=12, lineno=613)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$588call.16']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=600, inst=LOAD_FAST(arg=8, lineno=614)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=602, inst=LOAD_FAST(arg=12, lineno=614)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2600.17']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=604, inst=LOAD_FAST(arg=12, lineno=614)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2600.17', '$val602.18']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=606, inst=BINARY_OP(arg=5, lineno=614)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2600.17', '$val602.18', '$val604.19']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=610, inst=BINARY_OP(arg=13, lineno=614)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2600.17', '$binop_mul606.20']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=614, inst=STORE_FAST(arg=8, lineno=614)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_iadd610.21']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=616, inst=LOAD_FAST(arg=7, lineno=615)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=618, inst=LOAD_FAST(arg=12, lineno=615)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s1616.22']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=620, inst=BINARY_OP(arg=13, lineno=615)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s1616.22', '$val618.23']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=624, inst=STORE_FAST(arg=7, lineno=615)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_iadd620.24']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=626, inst=LOAD_FAST(arg=9, lineno=616)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=628, inst=LOAD_GLOBAL(arg=3, lineno=616)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=640, inst=LOAD_ATTR(arg=4, lineno=616)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$null$628.27', '$628load_global.26']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=650, inst=LOAD_CONST(arg=1, lineno=616)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$null$628.27', '$640load_attr.28']
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=652, inst=PRECALL(arg=1, lineno=616)
2024-08-01 17:59:43,177 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$null$628.27', '$640load_attr.28', '$const650.29']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=656, inst=CALL(arg=1, lineno=616)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$null$628.27', '$640load_attr.28', '$const650.29']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=666, inst=BINARY_OP(arg=13, lineno=616)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$656call.30']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=670, inst=STORE_FAST(arg=9, lineno=616)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_iadd666.31']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=672, inst=LOAD_FAST(arg=8, lineno=617)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=674, inst=LOAD_FAST(arg=7, lineno=617)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=676, inst=LOAD_FAST(arg=7, lineno=617)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$s1674.33']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=678, inst=BINARY_OP(arg=5, lineno=617)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$s1674.33', '$s1676.34']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=682, inst=LOAD_FAST(arg=9, lineno=617)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$binop_mul678.35']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=684, inst=BINARY_OP(arg=11, lineno=617)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$binop_mul678.35', '$w682.36']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=688, inst=BINARY_OP(arg=10, lineno=617)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$binop_truediv684.37']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=692, inst=STORE_FAST(arg=5, lineno=617)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_sub688.38']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=694, inst=LOAD_FAST(arg=11, lineno=618)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=696, inst=LOAD_CONST(arg=1, lineno=618)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$i3694.39']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=698, inst=BINARY_OP(arg=10, lineno=618)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$i3694.39', '$const696.40']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=702, inst=STORE_FAST(arg=13, lineno=618)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_sub698.41']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=704, inst=LOAD_FAST(arg=13, lineno=619)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=706, inst=LOAD_CONST(arg=5, lineno=619)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$i4704.42']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=708, inst=COMPARE_OP(arg=3, lineno=619)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$i4704.42', '$const706.43']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=714, inst=POP_JUMP_FORWARD_IF_FALSE(arg=78, lineno=619)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$708compare_op.44']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=716, stack=('$phi524.0', '$phi524.1'), blockstack=(), npush=0), Edge(pc=872, stack=('$phi524.0', '$phi524.1'), blockstack=(), npush=0)]
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=1106 nstack_initial=1), State(pc_initial=358 nstack_initial=1), State(pc_initial=716 nstack_initial=2), State(pc_initial=872 nstack_initial=2)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=358 nstack_initial=1), State(pc_initial=716 nstack_initial=2), State(pc_initial=872 nstack_initial=2)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=716 nstack_initial=2), State(pc_initial=872 nstack_initial=2)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi716.0', '$phi716.1']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=716 nstack_initial=2)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=716, inst=LOAD_GLOBAL(arg=13, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=728, inst=LOAD_CONST(arg=4, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=730, inst=LOAD_FAST(arg=1, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=732, inst=LOAD_CONST(arg=1, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4', '$classes730.5']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=734, inst=BINARY_OP(arg=0, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4', '$classes730.5', '$const732.6']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=738, inst=PRECALL(arg=2, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4', '$binop_add734.7']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=742, inst=CALL(arg=2, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4', '$binop_add734.7']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=752, inst=GET_ITER(arg=None, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$742call.8']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=754, stack=('$phi716.0', '$phi716.1', '$752get_iter.9'), blockstack=(), npush=0)]
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=872 nstack_initial=2), State(pc_initial=754 nstack_initial=3)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi872.0', '$phi872.1']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=872 nstack_initial=2)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=872, inst=JUMP_BACKWARD(arg=176, lineno=623)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi872.0', '$phi872.1']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=522, stack=('$phi872.0', '$phi872.1'), blockstack=(), npush=0)]
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=754 nstack_initial=3), State(pc_initial=522 nstack_initial=2)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi754.0', '$phi754.1', '$phi754.2']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=754 nstack_initial=3)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=754, inst=FOR_ITER(arg=58, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi754.0', '$phi754.1', '$phi754.2']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=872, stack=('$phi754.0', '$phi754.1'), blockstack=(), npush=0), Edge(pc=756, stack=('$phi754.0', '$phi754.1', '$phi754.2', '$754for_iter.4'), blockstack=(), npush=0)]
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=522 nstack_initial=2), State(pc_initial=872 nstack_initial=2), State(pc_initial=756 nstack_initial=4)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=872 nstack_initial=2), State(pc_initial=756 nstack_initial=4)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=756 nstack_initial=4)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi756.0', '$phi756.1', '$phi756.2', '$phi756.3']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=756 nstack_initial=4)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=756, inst=STORE_FAST(arg=14, lineno=620)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$phi756.3']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=758, inst=LOAD_FAST(arg=4, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=760, inst=LOAD_FAST(arg=6, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$mat2758.4']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=762, inst=LOAD_FAST(arg=14, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$mat2758.4', '$_l760.5']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=764, inst=BUILD_TUPLE(arg=2, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$mat2758.4', '$_l760.5', '$j762.6']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=766, inst=BINARY_SUBSCR(arg=None, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$mat2758.4', '$764build_tuple.7']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=776, inst=LOAD_FAST(arg=5, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=778, inst=LOAD_FAST(arg=4, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=780, inst=LOAD_FAST(arg=13, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=782, inst=LOAD_FAST(arg=14, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$i4780.11']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=784, inst=LOAD_CONST(arg=1, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$i4780.11', '$j782.12']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=786, inst=BINARY_OP(arg=10, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$i4780.11', '$j782.12', '$const784.13']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=790, inst=BUILD_TUPLE(arg=2, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$i4780.11', '$binop_sub786.14']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=792, inst=BINARY_SUBSCR(arg=None, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$790build_tuple.15']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=802, inst=BINARY_OP(arg=0, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$792binary_subscr.16']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=806, inst=COMPARE_OP(arg=5, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$binop_add802.17']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=812, inst=POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=621)
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$806compare_op.18']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=814, stack=('$phi756.0', '$phi756.1', '$phi756.2'), blockstack=(), npush=0), Edge(pc=870, stack=('$phi756.0', '$phi756.1', '$phi756.2'), blockstack=(), npush=0)]
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=814 nstack_initial=3), State(pc_initial=870 nstack_initial=3)])
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi814.0', '$phi814.1', '$phi814.2']
2024-08-01 17:59:43,189 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=814 nstack_initial=3)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=814, inst=LOAD_FAST(arg=11, lineno=622)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=816, inst=LOAD_FAST(arg=3, lineno=622)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=818, inst=LOAD_FAST(arg=6, lineno=622)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3', '$mat1816.4']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=820, inst=LOAD_FAST(arg=14, lineno=622)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3', '$mat1816.4', '$_l818.5']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=822, inst=BUILD_TUPLE(arg=2, lineno=622)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3', '$mat1816.4', '$_l818.5', '$j820.6']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=824, inst=STORE_SUBSCR(arg=None, lineno=622)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3', '$mat1816.4', '$822build_tuple.7']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=828, inst=LOAD_FAST(arg=5, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=830, inst=LOAD_FAST(arg=4, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=832, inst=LOAD_FAST(arg=13, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=834, inst=LOAD_FAST(arg=14, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$i4832.10']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=836, inst=LOAD_CONST(arg=1, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$i4832.10', '$j834.11']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=838, inst=BINARY_OP(arg=10, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$i4832.10', '$j834.11', '$const836.12']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=842, inst=BUILD_TUPLE(arg=2, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$i4832.10', '$binop_sub838.13']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=844, inst=BINARY_SUBSCR(arg=None, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$842build_tuple.14']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=854, inst=BINARY_OP(arg=0, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$844binary_subscr.15']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=858, inst=LOAD_FAST(arg=4, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=860, inst=LOAD_FAST(arg=6, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16', '$mat2858.17']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=862, inst=LOAD_FAST(arg=14, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16', '$mat2858.17', '$_l860.18']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=864, inst=BUILD_TUPLE(arg=2, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16', '$mat2858.17', '$_l860.18', '$j862.19']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=866, inst=STORE_SUBSCR(arg=None, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16', '$mat2858.17', '$864build_tuple.20']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=870, stack=('$phi814.0', '$phi814.1', '$phi814.2'), blockstack=(), npush=0)]
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=870 nstack_initial=3), State(pc_initial=870 nstack_initial=3)])
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi870.0', '$phi870.1', '$phi870.2']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=870 nstack_initial=3)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=870, inst=JUMP_BACKWARD(arg=59, lineno=623)
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi870.0', '$phi870.1', '$phi870.2']
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=754, stack=('$phi870.0', '$phi870.1', '$phi870.2'), blockstack=(), npush=0)]
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=870 nstack_initial=3), State(pc_initial=754 nstack_initial=3)])
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=754 nstack_initial=3)])
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=358 nstack_initial=1): set(),
             State(pc_initial=360 nstack_initial=1): {'$phi360.0'},
             State(pc_initial=362 nstack_initial=2): {'$phi362.1'},
             State(pc_initial=522 nstack_initial=2): {'$phi522.1'},
             State(pc_initial=524 nstack_initial=3): {'$phi524.2'},
             State(pc_initial=716 nstack_initial=2): set(),
             State(pc_initial=754 nstack_initial=3): {'$phi754.2'},
             State(pc_initial=756 nstack_initial=4): {'$phi756.3'},
             State(pc_initial=814 nstack_initial=3): set(),
             State(pc_initial=870 nstack_initial=3): set(),
             State(pc_initial=872 nstack_initial=2): set(),
             State(pc_initial=874 nstack_initial=1): set(),
             State(pc_initial=906 nstack_initial=0): set(),
             State(pc_initial=1106 nstack_initial=1): {'$phi1106.0'},
             State(pc_initial=1108 nstack_initial=2): {'$phi1108.1'},
             State(pc_initial=1232 nstack_initial=0): set()})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {'$phi1106.0': State(pc_initial=906 nstack_initial=0),
 '$phi1108.1': State(pc_initial=1106 nstack_initial=1),
 '$phi358.0': State(pc_initial=0 nstack_initial=0),
 '$phi362.1': State(pc_initial=360 nstack_initial=1),
 '$phi522.1': State(pc_initial=362 nstack_initial=2),
 '$phi524.2': State(pc_initial=522 nstack_initial=2),
 '$phi754.2': State(pc_initial=716 nstack_initial=2),
 '$phi756.3': State(pc_initial=754 nstack_initial=3)}
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0)),
                            ('$phi1108.0',
                             State(pc_initial=1108 nstack_initial=2))},
             '$phi1108.0': {('$phi1106.0',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi874.0',
                            State(pc_initial=874 nstack_initial=1))},
             '$phi360.0': {('$phi358.0',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi362.0': {('$phi360.0',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi872.0',
                            State(pc_initial=872 nstack_initial=2))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi872.1',
                            State(pc_initial=872 nstack_initial=2))},
             '$phi524.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi524.1': {('$phi522.1',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$phi524.0',
                            State(pc_initial=524 nstack_initial=3))},
             '$phi716.1': {('$phi524.1',
                            State(pc_initial=524 nstack_initial=3))},
             '$phi754.0': {('$phi716.0',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi870.0',
                            State(pc_initial=870 nstack_initial=3))},
             '$phi754.1': {('$phi716.1',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi870.1',
                            State(pc_initial=870 nstack_initial=3))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi870.2',
                            State(pc_initial=870 nstack_initial=3))},
             '$phi756.0': {('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi756.1': {('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi756.2': {('$phi754.2',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$phi756.0',
                            State(pc_initial=756 nstack_initial=4))},
             '$phi814.1': {('$phi756.1',
                            State(pc_initial=756 nstack_initial=4))},
             '$phi814.2': {('$phi756.2',
                            State(pc_initial=756 nstack_initial=4))},
             '$phi870.0': {('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi870.1': {('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi870.2': {('$phi756.2',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.2',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi872.0': {('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi872.1': {('$phi524.1',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi874.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))}})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0)),
                            ('$phi1106.0',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=2)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi524.1',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi524.1',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi756.2',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.2',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi756.2',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.2',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi814.2',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))}})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))}})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))}})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))}})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))}})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {'$phi1106.0': {('$1104get_iter.34', State(pc_initial=906 nstack_initial=0))},
 '$phi1108.1': {('$1106for_iter.2', State(pc_initial=1106 nstack_initial=1))},
 '$phi360.0': {('$356get_iter.65', State(pc_initial=0 nstack_initial=0))},
 '$phi362.1': {('$360for_iter.2', State(pc_initial=360 nstack_initial=1))},
 '$phi522.1': {('$520get_iter.24', State(pc_initial=362 nstack_initial=2))},
 '$phi524.2': {('$522for_iter.3', State(pc_initial=522 nstack_initial=2))},
 '$phi754.2': {('$752get_iter.9', State(pc_initial=716 nstack_initial=2))},
 '$phi756.3': {('$754for_iter.4', State(pc_initial=754 nstack_initial=3))}}
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi360.0': '$356get_iter.65'},
             State(pc_initial=360 nstack_initial=1): {'$phi362.1': '$360for_iter.2'},
             State(pc_initial=362 nstack_initial=2): {'$phi522.1': '$520get_iter.24'},
             State(pc_initial=522 nstack_initial=2): {'$phi524.2': '$522for_iter.3'},
             State(pc_initial=716 nstack_initial=2): {'$phi754.2': '$752get_iter.9'},
             State(pc_initial=754 nstack_initial=3): {'$phi756.3': '$754for_iter.4'},
             State(pc_initial=906 nstack_initial=0): {'$phi1106.0': '$1104get_iter.34'},
             State(pc_initial=1106 nstack_initial=1): {'$phi1108.1': '$1106for_iter.2'}})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$values16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$values16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'value': '$22call.3'}), (34, {'idx': 1, 'res': '$34load_global.4'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'item': '$34load_global.4', 'res': '$46load_attr.6'}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'res': '$n_data56.7'}), (58, {'res': '$const58.8'}), (60, {'op': '+', 'lhs': '$n_data56.7', 'rhs': '$const58.8', 'res': '$binop_add60.9'}), (62, {}), (64, {'res': '$classes64.10'}), (66, {'res': '$const66.11'}), (68, {'op': '+', 'lhs': '$classes64.10', 'rhs': '$const66.11', 'res': '$binop_add68.12'}), (70, {}), (72, {'items': ['$binop_add60.9', '$binop_add68.12'], 'res': '$72build_tuple.13'}), (74, {'idx': 1, 'res': '$74load_global.14'}), (76, {}), (78, {}), (80, {}), (82, {}), (84, {}), (86, {'item': '$74load_global.14', 'res': '$86load_attr.15'}), (88, {}), (90, {}), (92, {}), (94, {}), (98, {}), (100, {}), (102, {'func': '$46load_attr.6', 'args': ['$72build_tuple.13', '$86load_attr.15'], 'kw_names': 2, 'res': '$102call.16'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'value': '$102call.16'}), (114, {'idx': 1, 'res': '$114load_global.17'}), (116, {}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {'item': '$114load_global.17', 'res': '$126load_attr.19'}), (128, {}), (130, {}), (132, {}), (134, {}), (136, {'res': '$n_data136.20'}), (138, {'res': '$const138.21'}), (140, {'op': '+', 'lhs': '$n_data136.20', 'rhs': '$const138.21', 'res': '$binop_add140.22'}), (142, {}), (144, {'res': '$classes144.23'}), (146, {'res': '$const146.24'}), (148, {'op': '+', 'lhs': '$classes144.23', 'rhs': '$const146.24', 'res': '$binop_add148.25'}), (150, {}), (152, {'items': ['$binop_add140.22', '$binop_add148.25'], 'res': '$152build_tuple.26'}), (154, {'idx': 1, 'res': '$154load_global.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {}), (166, {'item': '$154load_global.27', 'res': '$166load_attr.28'}), (168, {}), (170, {}), (172, {}), (174, {}), (178, {}), (180, {}), (182, {'func': '$126load_attr.19', 'args': ['$152build_tuple.26', '$166load_attr.28'], 'kw_names': 2, 'res': '$182call.29'}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'value': '$182call.29'}), (194, {'res': '$const194.30'}), (196, {'res': '$mat1196.31'}), (198, {'res': '$const198.32'}), (200, {'res': '$const200.33'}), (202, {'res': '$const202.34'}), (204, {'start': '$const200.33', 'stop': '$const202.34', 'step': None, 'res': '$204build_slice.36', 'slicevar': '$204build_slice.35'}), (206, {'items': ['$const198.32', '$204build_slice.36'], 'res': '$206build_tuple.37'}), (208, {'target': '$mat1196.31', 'index': '$206build_tuple.37', 'value': '$const194.30'}), (210, {}), (212, {'idx': 1, 'res': '$212load_global.38'}), (214, {}), (216, {}), (218, {}), (220, {}), (222, {}), (224, {'item': '$212load_global.38', 'res': '$224load_attr.39'}), (226, {}), (228, {}), (230, {}), (232, {}), (234, {'res': '$mat2234.40'}), (236, {'res': '$const236.41'}), (238, {'res': '$const238.42'}), (240, {'start': '$const236.41', 'stop': '$const238.42', 'step': None, 'res': '$240build_slice.44', 'slicevar': '$240build_slice.43'}), (242, {'res': '$const242.45'}), (244, {'res': '$const244.46'}), (246, {'start': '$const242.45', 'stop': '$const244.46', 'step': None, 'res': '$246build_slice.48', 'slicevar': '$246build_slice.47'}), (248, {'items': ['$240build_slice.44', '$246build_slice.48'], 'res': '$248build_tuple.49'}), (250, {'target': '$mat2234.40', 'index': '$248build_tuple.49', 'value': '$224load_attr.39'}), (252, {}), (254, {'idx': 1, 'res': '$254load_global.50'}), (256, {}), (258, {}), (260, {}), (262, {}), (264, {}), (266, {'item': '$254load_global.50', 'res': '$266load_attr.52'}), (268, {}), (270, {}), (272, {}), (274, {}), (276, {'res': '$const276.53'}), (278, {}), (280, {}), (282, {'func': '$266load_attr.52', 'args': ['$const276.53'], 'kw_names': None, 'res': '$282call.54'}), (284, {}), (286, {}), (288, {}), (290, {}), (292, {'value': '$282call.54'}), (294, {'idx': 6, 'res': '$294load_global.55'}), (296, {}), (298, {}), (300, {}), (302, {}), (304, {}), (306, {'res': '$const306.57'}), (308, {'idx': 0, 'res': '$308load_global.58'}), (310, {}), (312, {}), (314, {}), (316, {}), (318, {}), (320, {'res': '$values320.60'}), (322, {}), (324, {}), (326, {'func': '$308load_global.58', 'args': ['$values320.60'], 'kw_names': None, 'res': '$326call.61'}), (328, {}), (330, {}), (332, {}), (334, {}), (336, {'res': '$const336.62'}), (338, {'op': '+', 'lhs': '$326call.61', 'rhs': '$const336.62', 'res': '$binop_add338.63'}), (340, {}), (342, {}), (344, {}), (346, {'func': '$294load_global.55', 'args': ['$const306.57', '$binop_add338.63'], 'kw_names': None, 'res': '$346call.64'}), (348, {}), (350, {}), (352, {}), (354, {}), (356, {'value': '$346call.64', 'res': '$356get_iter.65'})), outgoing_phis={'$phi360.0': '$356get_iter.65'}, blockstack=(), active_try_block=None, outgoing_edgepushed={358: ('$356get_iter.65',)})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=358 nstack_initial=1):
AdaptBlockInfo(insts=((358, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={360: ('$phi358.0',)})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=360 nstack_initial=1):
AdaptBlockInfo(insts=((360, {'iterator': '$phi360.0', 'pair': '$360for_iter.1', 'indval': '$360for_iter.2', 'pred': '$360for_iter.3'}),), outgoing_phis={'$phi362.1': '$360for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={906: (), 362: ('$phi360.0', '$360for_iter.2')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=362 nstack_initial=2):
AdaptBlockInfo(insts=((362, {'value': '$phi362.1'}), (364, {'idx': 1, 'res': '$364load_global.2'}), (366, {}), (368, {}), (370, {}), (372, {}), (374, {}), (376, {'item': '$364load_global.2', 'res': '$376load_attr.4'}), (378, {}), (380, {}), (382, {}), (384, {}), (386, {'res': '$const386.5'}), (388, {}), (390, {}), (392, {'func': '$376load_attr.4', 'args': ['$const386.5'], 'kw_names': None, 'res': '$392call.6'}), (394, {}), (396, {}), (398, {}), (400, {}), (402, {'value': '$392call.6'}), (404, {'idx': 1, 'res': '$404load_global.7'}), (406, {}), (408, {}), (410, {}), (412, {}), (414, {}), (416, {'item': '$404load_global.7', 'res': '$416load_attr.9'}), (418, {}), (420, {}), (422, {}), (424, {}), (426, {'res': '$const426.10'}), (428, {}), (430, {}), (432, {'func': '$416load_attr.9', 'args': ['$const426.10'], 'kw_names': None, 'res': '$432call.11'}), (434, {}), (436, {}), (438, {}), (440, {}), (442, {'value': '$432call.11'}), (444, {'idx': 1, 'res': '$444load_global.12'}), (446, {}), (448, {}), (450, {}), (452, {}), (454, {}), (456, {'item': '$444load_global.12', 'res': '$456load_attr.14'}), (458, {}), (460, {}), (462, {}), (464, {}), (466, {'res': '$const466.15'}), (468, {}), (470, {}), (472, {'func': '$456load_attr.14', 'args': ['$const466.15'], 'kw_names': None, 'res': '$472call.16'}), (474, {}), (476, {}), (478, {}), (480, {}), (482, {'value': '$472call.16'}), (484, {'idx': 6, 'res': '$484load_global.17'}), (486, {}), (488, {}), (490, {}), (492, {}), (494, {}), (496, {'res': '$const496.19'}), (498, {'res': '$_l498.20'}), (500, {'res': '$const500.21'}), (502, {'op': '+', 'lhs': '$_l498.20', 'rhs': '$const500.21', 'res': '$binop_add502.22'}), (504, {}), (506, {}), (508, {}), (510, {'func': '$484load_global.17', 'args': ['$const496.19', '$binop_add502.22'], 'kw_names': None, 'res': '$510call.23'}), (512, {}), (514, {}), (516, {}), (518, {}), (520, {'value': '$510call.23', 'res': '$520get_iter.24'})), outgoing_phis={'$phi522.1': '$520get_iter.24'}, blockstack=(), active_try_block=None, outgoing_edgepushed={522: ('$phi362.0', '$520get_iter.24')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=522 nstack_initial=2):
AdaptBlockInfo(insts=((522, {'iterator': '$phi522.1', 'pair': '$522for_iter.2', 'indval': '$522for_iter.3', 'pred': '$522for_iter.4'}),), outgoing_phis={'$phi524.2': '$522for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={874: ('$phi522.0',), 524: ('$phi522.0', '$phi522.1', '$522for_iter.3')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=524 nstack_initial=3):
AdaptBlockInfo(insts=((524, {'value': '$phi524.2'}), (526, {'res': '$_l526.3'}), (528, {'res': '$m528.4'}), (530, {'op': '-', 'lhs': '$_l526.3', 'rhs': '$m528.4', 'res': '$binop_sub530.5'}), (532, {}), (534, {'res': '$const534.6'}), (536, {'op': '+', 'lhs': '$binop_sub530.5', 'rhs': '$const534.6', 'res': '$binop_add536.7'}), (538, {}), (540, {'value': '$binop_add536.7'}), (542, {'idx': 1, 'res': '$542load_global.8'}), (544, {}), (546, {}), (548, {}), (550, {}), (552, {}), (554, {'item': '$542load_global.8', 'res': '$554load_attr.10'}), (556, {}), (558, {}), (560, {}), (562, {}), (564, {'res': '$values564.11'}), (566, {'res': '$i3566.12'}), (568, {'res': '$const568.13'}), (570, {'op': '-', 'lhs': '$i3566.12', 'rhs': '$const568.13', 'res': '$binop_sub570.14'}), (572, {}), (574, {'index': '$binop_sub570.14', 'target': '$values564.11', 'res': '$574binary_subscr.15'}), (576, {}), (578, {}), (580, {}), (582, {}), (584, {}), (586, {}), (588, {'func': '$554load_attr.10', 'args': ['$574binary_subscr.15'], 'kw_names': None, 'res': '$588call.16'}), (590, {}), (592, {}), (594, {}), (596, {}), (598, {'value': '$588call.16'}), (600, {'res': '$s2600.17'}), (602, {'res': '$val602.18'}), (604, {'res': '$val604.19'}), (606, {'op': '*', 'lhs': '$val602.18', 'rhs': '$val604.19', 'res': '$binop_mul606.20'}), (608, {}), (610, {'op': '+=', 'lhs': '$s2600.17', 'rhs': '$binop_mul606.20', 'res': '$binop_iadd610.21'}), (612, {}), (614, {'value': '$binop_iadd610.21'}), (616, {'res': '$s1616.22'}), (618, {'res': '$val618.23'}), (620, {'op': '+=', 'lhs': '$s1616.22', 'rhs': '$val618.23', 'res': '$binop_iadd620.24'}), (622, {}), (624, {'value': '$binop_iadd620.24'}), (626, {'res': '$w626.25'}), (628, {'idx': 1, 'res': '$628load_global.26'}), (630, {}), (632, {}), (634, {}), (636, {}), (638, {}), (640, {'item': '$628load_global.26', 'res': '$640load_attr.28'}), (642, {}), (644, {}), (646, {}), (648, {}), (650, {'res': '$const650.29'}), (652, {}), (654, {}), (656, {'func': '$640load_attr.28', 'args': ['$const650.29'], 'kw_names': None, 'res': '$656call.30'}), (658, {}), (660, {}), (662, {}), (664, {}), (666, {'op': '+=', 'lhs': '$w626.25', 'rhs': '$656call.30', 'res': '$binop_iadd666.31'}), (668, {}), (670, {'value': '$binop_iadd666.31'}), (672, {'res': '$s2672.32'}), (674, {'res': '$s1674.33'}), (676, {'res': '$s1676.34'}), (678, {'op': '*', 'lhs': '$s1674.33', 'rhs': '$s1676.34', 'res': '$binop_mul678.35'}), (680, {}), (682, {'res': '$w682.36'}), (684, {'op': '/', 'lhs': '$binop_mul678.35', 'rhs': '$w682.36', 'res': '$binop_truediv684.37'}), (686, {}), (688, {'op': '-', 'lhs': '$s2672.32', 'rhs': '$binop_truediv684.37', 'res': '$binop_sub688.38'}), (690, {}), (692, {'value': '$binop_sub688.38'}), (694, {'res': '$i3694.39'}), (696, {'res': '$const696.40'}), (698, {'op': '-', 'lhs': '$i3694.39', 'rhs': '$const696.40', 'res': '$binop_sub698.41'}), (700, {}), (702, {'value': '$binop_sub698.41'}), (704, {'res': '$i4704.42'}), (706, {'res': '$const706.43'}), (708, {'lhs': '$i4704.42', 'rhs': '$const706.43', 'res': '$708compare_op.44'}), (710, {}), (712, {}), (714, {'pred': '$708compare_op.44'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={716: ('$phi524.0', '$phi524.1'), 872: ('$phi524.0', '$phi524.1')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=716 nstack_initial=2):
AdaptBlockInfo(insts=((716, {'idx': 6, 'res': '$716load_global.2'}), (718, {}), (720, {}), (722, {}), (724, {}), (726, {}), (728, {'res': '$const728.4'}), (730, {'res': '$classes730.5'}), (732, {'res': '$const732.6'}), (734, {'op': '+', 'lhs': '$classes730.5', 'rhs': '$const732.6', 'res': '$binop_add734.7'}), (736, {}), (738, {}), (740, {}), (742, {'func': '$716load_global.2', 'args': ['$const728.4', '$binop_add734.7'], 'kw_names': None, 'res': '$742call.8'}), (744, {}), (746, {}), (748, {}), (750, {}), (752, {'value': '$742call.8', 'res': '$752get_iter.9'})), outgoing_phis={'$phi754.2': '$752get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={754: ('$phi716.0', '$phi716.1', '$752get_iter.9')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=754 nstack_initial=3):
AdaptBlockInfo(insts=((754, {'iterator': '$phi754.2', 'pair': '$754for_iter.3', 'indval': '$754for_iter.4', 'pred': '$754for_iter.5'}),), outgoing_phis={'$phi756.3': '$754for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={872: ('$phi754.0', '$phi754.1'), 756: ('$phi754.0', '$phi754.1', '$phi754.2', '$754for_iter.4')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=756 nstack_initial=4):
AdaptBlockInfo(insts=((756, {'value': '$phi756.3'}), (758, {'res': '$mat2758.4'}), (760, {'res': '$_l760.5'}), (762, {'res': '$j762.6'}), (764, {'items': ['$_l760.5', '$j762.6'], 'res': '$764build_tuple.7'}), (766, {'index': '$764build_tuple.7', 'target': '$mat2758.4', 'res': '$766binary_subscr.8'}), (768, {}), (770, {}), (772, {}), (774, {}), (776, {'res': '$v776.9'}), (778, {'res': '$mat2778.10'}), (780, {'res': '$i4780.11'}), (782, {'res': '$j782.12'}), (784, {'res': '$const784.13'}), (786, {'op': '-', 'lhs': '$j782.12', 'rhs': '$const784.13', 'res': '$binop_sub786.14'}), (788, {}), (790, {'items': ['$i4780.11', '$binop_sub786.14'], 'res': '$790build_tuple.15'}), (792, {'index': '$790build_tuple.15', 'target': '$mat2778.10', 'res': '$792binary_subscr.16'}), (794, {}), (796, {}), (798, {}), (800, {}), (802, {'op': '+', 'lhs': '$v776.9', 'rhs': '$792binary_subscr.16', 'res': '$binop_add802.17'}), (804, {}), (806, {'lhs': '$766binary_subscr.8', 'rhs': '$binop_add802.17', 'res': '$806compare_op.18'}), (808, {}), (810, {}), (812, {'pred': '$806compare_op.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={814: ('$phi756.0', '$phi756.1', '$phi756.2'), 870: ('$phi756.0', '$phi756.1', '$phi756.2')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=814 nstack_initial=3):
AdaptBlockInfo(insts=((814, {'res': '$i3814.3'}), (816, {'res': '$mat1816.4'}), (818, {'res': '$_l818.5'}), (820, {'res': '$j820.6'}), (822, {'items': ['$_l818.5', '$j820.6'], 'res': '$822build_tuple.7'}), (824, {'target': '$mat1816.4', 'index': '$822build_tuple.7', 'value': '$i3814.3'}), (826, {}), (828, {'res': '$v828.8'}), (830, {'res': '$mat2830.9'}), (832, {'res': '$i4832.10'}), (834, {'res': '$j834.11'}), (836, {'res': '$const836.12'}), (838, {'op': '-', 'lhs': '$j834.11', 'rhs': '$const836.12', 'res': '$binop_sub838.13'}), (840, {}), (842, {'items': ['$i4832.10', '$binop_sub838.13'], 'res': '$842build_tuple.14'}), (844, {'index': '$842build_tuple.14', 'target': '$mat2830.9', 'res': '$844binary_subscr.15'}), (846, {}), (848, {}), (850, {}), (852, {}), (854, {'op': '+', 'lhs': '$v828.8', 'rhs': '$844binary_subscr.15', 'res': '$binop_add854.16'}), (856, {}), (858, {'res': '$mat2858.17'}), (860, {'res': '$_l860.18'}), (862, {'res': '$j862.19'}), (864, {'items': ['$_l860.18', '$j862.19'], 'res': '$864build_tuple.20'}), (866, {'target': '$mat2858.17', 'index': '$864build_tuple.20', 'value': '$binop_add854.16'}), (868, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={870: ('$phi814.0', '$phi814.1', '$phi814.2')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=870 nstack_initial=3):
AdaptBlockInfo(insts=((870, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={754: ('$phi870.0', '$phi870.1', '$phi870.2')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=872 nstack_initial=2):
AdaptBlockInfo(insts=((872, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={522: ('$phi872.0', '$phi872.1')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=874 nstack_initial=1):
AdaptBlockInfo(insts=((874, {'res': '$const874.1'}), (876, {'res': '$mat1876.2'}), (878, {'res': '$_l878.3'}), (880, {'res': '$const880.4'}), (882, {'items': ['$_l878.3', '$const880.4'], 'res': '$882build_tuple.5'}), (884, {'target': '$mat1876.2', 'index': '$882build_tuple.5', 'value': '$const874.1'}), (886, {}), (888, {'res': '$v888.6'}), (890, {'res': '$mat2890.7'}), (892, {'res': '$_l892.8'}), (894, {'res': '$const894.9'}), (896, {'items': ['$_l892.8', '$const894.9'], 'res': '$896build_tuple.10'}), (898, {'target': '$mat2890.7', 'index': '$896build_tuple.10', 'value': '$v888.6'}), (900, {}), (902, {}), (904, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={358: ('$phi874.0',)})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=906 nstack_initial=0):
AdaptBlockInfo(insts=((906, {'idx': 0, 'res': '$906load_global.0'}), (908, {}), (910, {}), (912, {}), (914, {}), (916, {}), (918, {'res': '$values918.2'}), (920, {}), (922, {}), (924, {'func': '$906load_global.0', 'args': ['$values918.2'], 'kw_names': None, 'res': '$924call.3'}), (926, {}), (928, {}), (930, {}), (932, {}), (934, {'value': '$924call.3'}), (936, {'idx': 1, 'res': '$936load_global.4'}), (938, {}), (940, {}), (942, {}), (944, {}), (946, {}), (948, {'item': '$936load_global.4', 'res': '$948load_attr.6'}), (950, {}), (952, {}), (954, {}), (956, {}), (958, {'res': '$classes958.7'}), (960, {'res': '$const960.8'}), (962, {'op': '+', 'lhs': '$classes958.7', 'rhs': '$const960.8', 'res': '$binop_add962.9'}), (964, {}), (966, {'res': '$values966.10'}), (968, {'item': '$values966.10', 'res': '$968load_attr.11'}), (970, {}), (972, {}), (974, {}), (976, {}), (980, {}), (982, {}), (984, {'func': '$948load_attr.6', 'args': ['$binop_add962.9', '$968load_attr.11'], 'kw_names': 2, 'res': '$984call.12'}), (986, {}), (988, {}), (990, {}), (992, {}), (994, {'value': '$984call.12'}), (996, {'res': '$values996.13'}), (998, {'idx': 0, 'res': '$998load_global.14'}), (1000, {}), (1002, {}), (1004, {}), (1006, {}), (1008, {}), (1010, {'res': '$values1010.16'}), (1012, {}), (1014, {}), (1016, {'func': '$998load_global.14', 'args': ['$values1010.16'], 'kw_names': None, 'res': '$1016call.17'}), (1018, {}), (1020, {}), (1022, {}), (1024, {}), (1026, {'res': '$const1026.18'}), (1028, {'op': '-', 'lhs': '$1016call.17', 'rhs': '$const1026.18', 'res': '$binop_sub1028.19'}), (1030, {}), (1032, {'index': '$binop_sub1028.19', 'target': '$values996.13', 'res': '$1032binary_subscr.20'}), (1034, {}), (1036, {}), (1038, {}), (1040, {}), (1042, {'res': '$kclass1042.21'}), (1044, {'res': '$classes1044.22'}), (1046, {'target': '$kclass1042.21', 'index': '$classes1044.22', 'value': '$1032binary_subscr.20'}), (1048, {}), (1050, {'res': '$values1050.23'}), (1052, {'res': '$const1052.24'}), (1054, {'index': '$const1052.24', 'target': '$values1050.23', 'res': '$1054binary_subscr.25'}), (1056, {}), (1058, {}), (1060, {}), (1062, {}), (1064, {'res': '$kclass1064.26'}), (1066, {'res': '$const1066.27'}), (1068, {'target': '$kclass1064.26', 'index': '$const1066.27', 'value': '$1054binary_subscr.25'}), (1070, {}), (1072, {'idx': 6, 'res': '$1072load_global.28'}), (1074, {}), (1076, {}), (1078, {}), (1080, {}), (1082, {}), (1084, {'res': '$classes1084.30'}), (1086, {'res': '$const1086.31'}), (1088, {'res': '$const1088.32'}), (1090, {}), (1092, {}), (1094, {'func': '$1072load_global.28', 'args': ['$classes1084.30', '$const1086.31', '$const1088.32'], 'kw_names': None, 'res': '$1094call.33'}), (1096, {}), (1098, {}), (1100, {}), (1102, {}), (1104, {'value': '$1094call.33', 'res': '$1104get_iter.34'})), outgoing_phis={'$phi1106.0': '$1104get_iter.34'}, blockstack=(), active_try_block=None, outgoing_edgepushed={1106: ('$1104get_iter.34',)})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=1106 nstack_initial=1):
AdaptBlockInfo(insts=((1106, {'iterator': '$phi1106.0', 'pair': '$1106for_iter.1', 'indval': '$1106for_iter.2', 'pred': '$1106for_iter.3'}),), outgoing_phis={'$phi1108.1': '$1106for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={1232: (), 1108: ('$phi1106.0', '$1106for_iter.2')})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=1108 nstack_initial=2):
AdaptBlockInfo(insts=((1108, {'value': '$phi1108.1'}), (1110, {'res': '$mat11110.2'}), (1112, {'res': '$k1112.3'}), (1114, {'res': '$countNum1114.4'}), (1116, {'items': ['$k1112.3', '$countNum1114.4'], 'res': '$1116build_tuple.5'}), (1118, {'index': '$1116build_tuple.5', 'target': '$mat11110.2', 'res': '$1118binary_subscr.6'}), (1120, {}), (1122, {}), (1124, {}), (1126, {}), (1128, {'value': '$1118binary_subscr.6'}), (1130, {'idx': 8, 'res': '$1130load_global.7'}), (1132, {}), (1134, {}), (1136, {}), (1138, {}), (1140, {}), (1142, {'res': '$pivot1142.9'}), (1144, {'res': '$const1144.10'}), (1146, {'op': '-', 'lhs': '$pivot1142.9', 'rhs': '$const1144.10', 'res': '$binop_sub1146.11'}), (1148, {}), (1150, {}), (1152, {}), (1154, {'func': '$1130load_global.7', 'args': ['$binop_sub1146.11'], 'kw_names': None, 'res': '$1154call.12'}), (1156, {}), (1158, {}), (1160, {}), (1162, {}), (1164, {'value': '$1154call.12'}), (1166, {'res': '$values1166.13'}), (1168, {'res': '$_id1168.14'}), (1170, {'index': '$_id1168.14', 'target': '$values1166.13', 'res': '$1170binary_subscr.15'}), (1172, {}), (1174, {}), (1176, {}), (1178, {}), (1180, {'res': '$kclass1180.16'}), (1182, {'res': '$countNum1182.17'}), (1184, {'res': '$const1184.18'}), (1186, {'op': '-', 'lhs': '$countNum1182.17', 'rhs': '$const1184.18', 'res': '$binop_sub1186.19'}), (1188, {}), (1190, {'target': '$kclass1180.16', 'index': '$binop_sub1186.19', 'value': '$1170binary_subscr.15'}), (1192, {}), (1194, {'idx': 8, 'res': '$1194load_global.20'}), (1196, {}), (1198, {}), (1200, {}), (1202, {}), (1204, {}), (1206, {'res': '$pivot1206.22'}), (1208, {'res': '$const1208.23'}), (1210, {'op': '-', 'lhs': '$pivot1206.22', 'rhs': '$const1208.23', 'res': '$binop_sub1210.24'}), (1212, {}), (1214, {}), (1216, {}), (1218, {'func': '$1194load_global.20', 'args': ['$binop_sub1210.24'], 'kw_names': None, 'res': '$1218call.25'}), (1220, {}), (1222, {}), (1224, {}), (1226, {}), (1228, {'value': '$1218call.25'}), (1230, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1106: ('$phi1108.0',)})
2024-08-01 17:59:43,194 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=1232 nstack_initial=0):
AdaptBlockInfo(insts=((1232, {'idx': 1, 'res': '$1232load_global.0'}), (1234, {}), (1236, {}), (1238, {}), (1240, {}), (1242, {}), (1244, {'item': '$1232load_global.0', 'res': '$1244load_attr.2'}), (1246, {}), (1248, {}), (1250, {}), (1252, {}), (1254, {'res': '$kclass1254.3'}), (1256, {'res': '$const1256.4'}), (1258, {}), (1260, {}), (1262, {'func': '$1244load_attr.2', 'args': ['$kclass1254.3', '$const1256.4'], 'kw_names': None, 'res': '$1262call.5'}), (1264, {}), (1266, {}), (1268, {}), (1270, {}), (1272, {'retval': '$1262call.5', 'castval': '$1272return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,206 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    values = arg(0, name=values)             ['values']
    classes = arg(1, name=classes)           ['classes']
    $4load_global.0 = global(len: <built-in function len>) ['$4load_global.0']
    n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.0', 'n_data', 'values']
    $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$34load_global.4']
    $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros) ['$34load_global.4', '$46load_attr.6']
    $const58.8 = const(int, 1)               ['$const58.8']
    $binop_add60.9 = n_data + $const58.8     ['$binop_add60.9', '$const58.8', 'n_data']
    $const66.11 = const(int, 1)              ['$const66.11']
    $binop_add68.12 = classes + $const66.11  ['$binop_add68.12', '$const66.11', 'classes']
    $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)]) ['$72build_tuple.13', '$binop_add60.9', '$binop_add68.12']
    $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$74load_global.14']
    $86load_attr.15 = getattr(value=$74load_global.14, attr=int32) ['$74load_global.14', '$86load_attr.15']
    mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None) ['$46load_attr.6', '$72build_tuple.13', '$86load_attr.15', 'mat1']
    $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$114load_global.17']
    $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros) ['$114load_global.17', '$126load_attr.19']
    $const138.21 = const(int, 1)             ['$const138.21']
    $binop_add140.22 = n_data + $const138.21 ['$binop_add140.22', '$const138.21', 'n_data']
    $const146.24 = const(int, 1)             ['$const146.24']
    $binop_add148.25 = classes + $const146.24 ['$binop_add148.25', '$const146.24', 'classes']
    $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)]) ['$152build_tuple.26', '$binop_add140.22', '$binop_add148.25']
    $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$154load_global.27']
    $166load_attr.28 = getattr(value=$154load_global.27, attr=float32) ['$154load_global.27', '$166load_attr.28']
    mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None) ['$126load_attr.19', '$152build_tuple.26', '$166load_attr.28', 'mat2']
    $const194.30 = const(int, 1)             ['$const194.30']
    $const198.32 = const(int, 1)             ['$const198.32']
    $const200.33 = const(int, 1)             ['$const200.33']
    $const202.34 = const(NoneType, None)     ['$const202.34']
    $204build_slice.35 = global(slice: <class 'slice'>) ['$204build_slice.35']
    $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None) ['$204build_slice.35', '$204build_slice.36', '$const200.33', '$const202.34']
    $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)]) ['$204build_slice.36', '$206build_tuple.37', '$const198.32']
    mat1[$206build_tuple.37] = $const194.30  ['$206build_tuple.37', '$const194.30', 'mat1']
    $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$212load_global.38']
    $224load_attr.39 = getattr(value=$212load_global.38, attr=inf) ['$212load_global.38', '$224load_attr.39']
    $const236.41 = const(int, 2)             ['$const236.41']
    $const238.42 = const(NoneType, None)     ['$const238.42']
    $240build_slice.43 = global(slice: <class 'slice'>) ['$240build_slice.43']
    $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None) ['$240build_slice.43', '$240build_slice.44', '$const236.41', '$const238.42']
    $const242.45 = const(int, 1)             ['$const242.45']
    $const244.46 = const(NoneType, None)     ['$const244.46']
    $246build_slice.47 = global(slice: <class 'slice'>) ['$246build_slice.47']
    $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None) ['$246build_slice.47', '$246build_slice.48', '$const242.45', '$const244.46']
    $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)]) ['$240build_slice.44', '$246build_slice.48', '$248build_tuple.49']
    mat2[$248build_tuple.49] = $224load_attr.39 ['$224load_attr.39', '$248build_tuple.49', 'mat2']
    $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$254load_global.50']
    $266load_attr.52 = getattr(value=$254load_global.50, attr=float32) ['$254load_global.50', '$266load_attr.52']
    $const276.53 = const(int, 0)             ['$const276.53']
    v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None) ['$266load_attr.52', '$const276.53', 'v']
    $294load_global.55 = global(range: <class 'range'>) ['$294load_global.55']
    $const306.57 = const(int, 2)             ['$const306.57']
    $308load_global.58 = global(len: <built-in function len>) ['$308load_global.58']
    $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None) ['$308load_global.58', '$326call.61', 'values']
    $const336.62 = const(int, 1)             ['$const336.62']
    $binop_add338.63 = $326call.61 + $const336.62 ['$326call.61', '$binop_add338.63', '$const336.62']
    $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None) ['$294load_global.55', '$346call.64', '$binop_add338.63', '$const306.57']
    $356get_iter.65 = getiter(value=$346call.64) ['$346call.64', '$356get_iter.65']
    $phi360.0 = $356get_iter.65              ['$356get_iter.65', '$phi360.0']
    jump 358                                 []
label 358:
    jump 360                                 []
label 360:
    $360for_iter.1 = iternext(value=$phi360.0) ['$360for_iter.1', '$phi360.0']
    $360for_iter.2 = pair_first(value=$360for_iter.1) ['$360for_iter.1', '$360for_iter.2']
    $360for_iter.3 = pair_second(value=$360for_iter.1) ['$360for_iter.1', '$360for_iter.3']
    $phi362.1 = $360for_iter.2               ['$360for_iter.2', '$phi362.1']
    branch $360for_iter.3, 362, 906          ['$360for_iter.3']
label 362:
    _l = $phi362.1                           ['$phi362.1', '_l']
    $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$364load_global.2']
    $376load_attr.4 = getattr(value=$364load_global.2, attr=float32) ['$364load_global.2', '$376load_attr.4']
    $const386.5 = const(int, 0)              ['$const386.5']
    s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None) ['$376load_attr.4', '$const386.5', 's1']
    $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$404load_global.7']
    $416load_attr.9 = getattr(value=$404load_global.7, attr=float32) ['$404load_global.7', '$416load_attr.9']
    $const426.10 = const(int, 0)             ['$const426.10']
    s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None) ['$416load_attr.9', '$const426.10', 's2']
    $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$444load_global.12']
    $456load_attr.14 = getattr(value=$444load_global.12, attr=float32) ['$444load_global.12', '$456load_attr.14']
    $const466.15 = const(int, 0)             ['$const466.15']
    w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None) ['$456load_attr.14', '$const466.15', 'w']
    $484load_global.17 = global(range: <class 'range'>) ['$484load_global.17']
    $const496.19 = const(int, 1)             ['$const496.19']
    $const500.21 = const(int, 1)             ['$const500.21']
    $binop_add502.22 = _l + $const500.21     ['$binop_add502.22', '$const500.21', '_l']
    $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None) ['$484load_global.17', '$510call.23', '$binop_add502.22', '$const496.19']
    $520get_iter.24 = getiter(value=$510call.23) ['$510call.23', '$520get_iter.24']
    $phi522.1 = $520get_iter.24              ['$520get_iter.24', '$phi522.1']
    jump 522                                 []
label 522:
    $522for_iter.2 = iternext(value=$phi522.1) ['$522for_iter.2', '$phi522.1']
    $522for_iter.3 = pair_first(value=$522for_iter.2) ['$522for_iter.2', '$522for_iter.3']
    $522for_iter.4 = pair_second(value=$522for_iter.2) ['$522for_iter.2', '$522for_iter.4']
    $phi524.2 = $522for_iter.3               ['$522for_iter.3', '$phi524.2']
    branch $522for_iter.4, 524, 874          ['$522for_iter.4']
label 524:
    m = $phi524.2                            ['$phi524.2', 'm']
    $binop_sub530.5 = _l - m                 ['$binop_sub530.5', '_l', 'm']
    $const534.6 = const(int, 1)              ['$const534.6']
    i3 = $binop_sub530.5 + $const534.6       ['$binop_sub530.5', '$const534.6', 'i3']
    $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$542load_global.8']
    $554load_attr.10 = getattr(value=$542load_global.8, attr=float32) ['$542load_global.8', '$554load_attr.10']
    $const568.13 = const(int, 1)             ['$const568.13']
    $binop_sub570.14 = i3 - $const568.13     ['$binop_sub570.14', '$const568.13', 'i3']
    $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>) ['$574binary_subscr.15', '$binop_sub570.14', 'values']
    val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None) ['$554load_attr.10', '$574binary_subscr.15', 'val']
    $binop_mul606.20 = val * val             ['$binop_mul606.20', 'val', 'val']
    $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd610.21', '$binop_mul606.20', 's2']
    s2 = $binop_iadd610.21                   ['$binop_iadd610.21', 's2']
    $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd620.24', 's1', 'val']
    s1 = $binop_iadd620.24                   ['$binop_iadd620.24', 's1']
    $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$628load_global.26']
    $640load_attr.28 = getattr(value=$628load_global.26, attr=float32) ['$628load_global.26', '$640load_attr.28']
    $const650.29 = const(int, 1)             ['$const650.29']
    $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None) ['$640load_attr.28', '$656call.30', '$const650.29']
    $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined) ['$656call.30', '$binop_iadd666.31', 'w']
    w = $binop_iadd666.31                    ['$binop_iadd666.31', 'w']
    $binop_mul678.35 = s1 * s1               ['$binop_mul678.35', 's1', 's1']
    $binop_truediv684.37 = $binop_mul678.35 / w ['$binop_mul678.35', '$binop_truediv684.37', 'w']
    v = s2 - $binop_truediv684.37            ['$binop_truediv684.37', 's2', 'v']
    $const696.40 = const(int, 1)             ['$const696.40']
    i4 = i3 - $const696.40                   ['$const696.40', 'i3', 'i4']
    $const706.43 = const(int, 0)             ['$const706.43']
    $708compare_op.44 = i4 != $const706.43   ['$708compare_op.44', '$const706.43', 'i4']
    bool714 = global(bool: <class 'bool'>)   ['bool714']
    $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None) ['$708compare_op.44', '$714pred', 'bool714']
    branch $714pred, 716, 872                ['$714pred']
label 716:
    $716load_global.2 = global(range: <class 'range'>) ['$716load_global.2']
    $const728.4 = const(int, 2)              ['$const728.4']
    $const732.6 = const(int, 1)              ['$const732.6']
    $binop_add734.7 = classes + $const732.6  ['$binop_add734.7', '$const732.6', 'classes']
    $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None) ['$716load_global.2', '$742call.8', '$binop_add734.7', '$const728.4']
    $752get_iter.9 = getiter(value=$742call.8) ['$742call.8', '$752get_iter.9']
    $phi754.2 = $752get_iter.9               ['$752get_iter.9', '$phi754.2']
    jump 754                                 []
label 754:
    $754for_iter.3 = iternext(value=$phi754.2) ['$754for_iter.3', '$phi754.2']
    $754for_iter.4 = pair_first(value=$754for_iter.3) ['$754for_iter.3', '$754for_iter.4']
    $754for_iter.5 = pair_second(value=$754for_iter.3) ['$754for_iter.3', '$754for_iter.5']
    $phi756.3 = $754for_iter.4               ['$754for_iter.4', '$phi756.3']
    branch $754for_iter.5, 756, 872          ['$754for_iter.5']
label 756:
    j = $phi756.3                            ['$phi756.3', 'j']
    $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)]) ['$764build_tuple.7', '_l', 'j']
    $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>) ['$764build_tuple.7', '$766binary_subscr.8', 'mat2']
    $const784.13 = const(int, 1)             ['$const784.13']
    $binop_sub786.14 = j - $const784.13      ['$binop_sub786.14', '$const784.13', 'j']
    $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)]) ['$790build_tuple.15', '$binop_sub786.14', 'i4']
    $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>) ['$790build_tuple.15', '$792binary_subscr.16', 'mat2']
    $binop_add802.17 = v + $792binary_subscr.16 ['$792binary_subscr.16', '$binop_add802.17', 'v']
    $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17 ['$766binary_subscr.8', '$806compare_op.18', '$binop_add802.17']
    bool812 = global(bool: <class 'bool'>)   ['bool812']
    $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None) ['$806compare_op.18', '$812pred', 'bool812']
    branch $812pred, 814, 870                ['$812pred']
label 814:
    $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)]) ['$822build_tuple.7', '_l', 'j']
    mat1[$822build_tuple.7] = i3             ['$822build_tuple.7', 'i3', 'mat1']
    $const836.12 = const(int, 1)             ['$const836.12']
    $binop_sub838.13 = j - $const836.12      ['$binop_sub838.13', '$const836.12', 'j']
    $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)]) ['$842build_tuple.14', '$binop_sub838.13', 'i4']
    $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>) ['$842build_tuple.14', '$844binary_subscr.15', 'mat2']
    $binop_add854.16 = v + $844binary_subscr.15 ['$844binary_subscr.15', '$binop_add854.16', 'v']
    $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)]) ['$864build_tuple.20', '_l', 'j']
    mat2[$864build_tuple.20] = $binop_add854.16 ['$864build_tuple.20', '$binop_add854.16', 'mat2']
    jump 870                                 []
label 870:
    jump 754                                 []
label 872:
    jump 522                                 []
label 874:
    $const874.1 = const(int, 1)              ['$const874.1']
    $const880.4 = const(int, 1)              ['$const880.4']
    $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)]) ['$882build_tuple.5', '$const880.4', '_l']
    mat1[$882build_tuple.5] = $const874.1    ['$882build_tuple.5', '$const874.1', 'mat1']
    $const894.9 = const(int, 1)              ['$const894.9']
    $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)]) ['$896build_tuple.10', '$const894.9', '_l']
    mat2[$896build_tuple.10] = v             ['$896build_tuple.10', 'mat2', 'v']
    jump 358                                 []
label 906:
    $906load_global.0 = global(len: <built-in function len>) ['$906load_global.0']
    k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None) ['$906load_global.0', 'k', 'values']
    $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$936load_global.4']
    $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros) ['$936load_global.4', '$948load_attr.6']
    $const960.8 = const(int, 1)              ['$const960.8']
    $binop_add962.9 = classes + $const960.8  ['$binop_add962.9', '$const960.8', 'classes']
    $968load_attr.11 = getattr(value=values, attr=dtype) ['$968load_attr.11', 'values']
    kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None) ['$948load_attr.6', '$968load_attr.11', '$binop_add962.9', 'kclass']
    $998load_global.14 = global(len: <built-in function len>) ['$998load_global.14']
    $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None) ['$1016call.17', '$998load_global.14', 'values']
    $const1026.18 = const(int, 1)            ['$const1026.18']
    $binop_sub1028.19 = $1016call.17 - $const1026.18 ['$1016call.17', '$binop_sub1028.19', '$const1026.18']
    $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>) ['$1032binary_subscr.20', '$binop_sub1028.19', 'values']
    kclass[classes] = $1032binary_subscr.20  ['$1032binary_subscr.20', 'classes', 'kclass']
    $const1052.24 = const(int, 0)            ['$const1052.24']
    $1054binary_subscr.25 = getitem(value=values, index=$const1052.24, fn=<built-in function getitem>) ['$1054binary_subscr.25', '$const1052.24', 'values']
    $const1066.27 = const(int, 0)            ['$const1066.27']
    kclass[$const1066.27] = $1054binary_subscr.25 ['$1054binary_subscr.25', '$const1066.27', 'kclass']
    $1072load_global.28 = global(range: <class 'range'>) ['$1072load_global.28']
    $const1086.31 = const(int, 1)            ['$const1086.31']
    $const1088.32 = const(int, -1)           ['$const1088.32']
    $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None) ['$1072load_global.28', '$1094call.33', '$const1086.31', '$const1088.32', 'classes']
    $1104get_iter.34 = getiter(value=$1094call.33) ['$1094call.33', '$1104get_iter.34']
    $phi1106.0 = $1104get_iter.34            ['$1104get_iter.34', '$phi1106.0']
    jump 1106                                []
label 1106:
    $1106for_iter.1 = iternext(value=$phi1106.0) ['$1106for_iter.1', '$phi1106.0']
    $1106for_iter.2 = pair_first(value=$1106for_iter.1) ['$1106for_iter.1', '$1106for_iter.2']
    $1106for_iter.3 = pair_second(value=$1106for_iter.1) ['$1106for_iter.1', '$1106for_iter.3']
    $phi1108.1 = $1106for_iter.2             ['$1106for_iter.2', '$phi1108.1']
    branch $1106for_iter.3, 1108, 1232       ['$1106for_iter.3']
label 1108:
    countNum = $phi1108.1                    ['$phi1108.1', 'countNum']
    $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)]) ['$1116build_tuple.5', 'countNum', 'k']
    pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>) ['$1116build_tuple.5', 'mat1', 'pivot']
    $1130load_global.7 = global(int: <class 'int'>) ['$1130load_global.7']
    $const1144.10 = const(int, 2)            ['$const1144.10']
    $binop_sub1146.11 = pivot - $const1144.10 ['$binop_sub1146.11', '$const1144.10', 'pivot']
    _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None) ['$1130load_global.7', '$binop_sub1146.11', '_id']
    $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>) ['$1170binary_subscr.15', '_id', 'values']
    $const1184.18 = const(int, 1)            ['$const1184.18']
    $binop_sub1186.19 = countNum - $const1184.18 ['$binop_sub1186.19', '$const1184.18', 'countNum']
    kclass[$binop_sub1186.19] = $1170binary_subscr.15 ['$1170binary_subscr.15', '$binop_sub1186.19', 'kclass']
    $1194load_global.20 = global(int: <class 'int'>) ['$1194load_global.20']
    $const1208.23 = const(int, 1)            ['$const1208.23']
    $binop_sub1210.24 = pivot - $const1208.23 ['$binop_sub1210.24', '$const1208.23', 'pivot']
    k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None) ['$1194load_global.20', '$binop_sub1210.24', 'k']
    jump 1106                                []
label 1232:
    $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$1232load_global.0']
    $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete) ['$1232load_global.0', '$1244load_attr.2']
    $const1256.4 = const(int, 0)             ['$const1256.4']
    $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None) ['$1244load_attr.2', '$1262call.5', '$const1256.4', 'kclass']
    $1272return_value.6 = cast(value=$1262call.5) ['$1262call.5', '$1272return_value.6']
    return $1272return_value.6               ['$1272return_value.6']

2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 358
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 360
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 362
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 522
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 524
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = $binop_iadd666.31
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 716
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 754
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 756
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,269 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 814
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 870
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 872
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 874
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 906
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,277 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 1106
2024-08-01 17:59:43,284 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,284 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,284 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,284 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,284 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 1108
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 1232
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A07C390>
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,285 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$1016call.17': [<numba.core.ir.Assign object at 0x000001D63A01C0D0>],
             '$1032binary_subscr.20': [<numba.core.ir.Assign object at 0x000001D63A01C6D0>],
             '$1054binary_subscr.25': [<numba.core.ir.Assign object at 0x000001D639FC9210>],
             '$1072load_global.28': [<numba.core.ir.Assign object at 0x000001D63A01D710>],
             '$1094call.33': [<numba.core.ir.Assign object at 0x000001D63A01DED0>],
             '$1104get_iter.34': [<numba.core.ir.Assign object at 0x000001D63A01E0D0>],
             '$1106for_iter.1': [<numba.core.ir.Assign object at 0x000001D63A01E150>],
             '$1106for_iter.2': [<numba.core.ir.Assign object at 0x000001D63A01E2D0>],
             '$1106for_iter.3': [<numba.core.ir.Assign object at 0x000001D63A01E450>],
             '$1116build_tuple.5': [<numba.core.ir.Assign object at 0x000001D63A01EE90>],
             '$1130load_global.7': [<numba.core.ir.Assign object at 0x000001D63A01F3D0>],
             '$114load_global.17': [<numba.core.ir.Assign object at 0x000001D639FD93D0>],
             '$1170binary_subscr.15': [<numba.core.ir.Assign object at 0x000001D63A024310>],
             '$1194load_global.20': [<numba.core.ir.Assign object at 0x000001D63A024B90>],
             '$1232load_global.0': [<numba.core.ir.Assign object at 0x000001D63A01FF50>],
             '$1244load_attr.2': [<numba.core.ir.Assign object at 0x000001D63A025550>],
             '$1262call.5': [<numba.core.ir.Assign object at 0x000001D63A025A50>],
             '$126load_attr.19': [<numba.core.ir.Assign object at 0x000001D639FF0310>],
             '$1272return_value.6': [<numba.core.ir.Assign object at 0x000001D63A025C90>],
             '$152build_tuple.26': [<numba.core.ir.Assign object at 0x000001D639FF1110>],
             '$154load_global.27': [<numba.core.ir.Assign object at 0x000001D639FF1290>],
             '$166load_attr.28': [<numba.core.ir.Assign object at 0x000001D639FF1610>],
             '$204build_slice.35': [<numba.core.ir.Assign object at 0x000001D639FF2510>],
             '$204build_slice.36': [<numba.core.ir.Assign object at 0x000001D639FF2690>],
             '$206build_tuple.37': [<numba.core.ir.Assign object at 0x000001D639FF2890>],
             '$212load_global.38': [<numba.core.ir.Assign object at 0x000001D639FF2A90>],
             '$224load_attr.39': [<numba.core.ir.Assign object at 0x000001D639FF2D10>],
             '$240build_slice.43': [<numba.core.ir.Assign object at 0x000001D639FF34D0>],
             '$240build_slice.44': [<numba.core.ir.Assign object at 0x000001D639FF3650>],
             '$246build_slice.47': [<numba.core.ir.Assign object at 0x000001D639FF3B90>],
             '$246build_slice.48': [<numba.core.ir.Assign object at 0x000001D639FF3D10>],
             '$248build_tuple.49': [<numba.core.ir.Assign object at 0x000001D639FF3F10>],
             '$254load_global.50': [<numba.core.ir.Assign object at 0x000001D63A0001D0>],
             '$266load_attr.52': [<numba.core.ir.Assign object at 0x000001D63A000410>],
             '$294load_global.55': [<numba.core.ir.Assign object at 0x000001D63A000C10>],
             '$308load_global.58': [<numba.core.ir.Assign object at 0x000001D63A001010>],
             '$326call.61': [<numba.core.ir.Assign object at 0x000001D63A001450>],
             '$346call.64': [<numba.core.ir.Assign object at 0x000001D63A001A90>],
             '$34load_global.4': [<numba.core.ir.Assign object at 0x000001D639F93E50>],
             '$356get_iter.65': [<numba.core.ir.Assign object at 0x000001D63A001CD0>],
             '$360for_iter.1': [<numba.core.ir.Assign object at 0x000001D63A001DD0>],
             '$360for_iter.2': [<numba.core.ir.Assign object at 0x000001D63A001F50>],
             '$360for_iter.3': [<numba.core.ir.Assign object at 0x000001D63A0020D0>],
             '$364load_global.2': [<numba.core.ir.Assign object at 0x000001D63A0025D0>],
             '$376load_attr.4': [<numba.core.ir.Assign object at 0x000001D63A002850>],
             '$404load_global.7': [<numba.core.ir.Assign object at 0x000001D63A002FD0>],
             '$416load_attr.9': [<numba.core.ir.Assign object at 0x000001D63A003290>],
             '$444load_global.12': [<numba.core.ir.Assign object at 0x000001D63A003A90>],
             '$456load_attr.14': [<numba.core.ir.Assign object at 0x000001D63A003D90>],
             '$46load_attr.6': [<numba.core.ir.Assign object at 0x000001D639FC19D0>],
             '$484load_global.17': [<numba.core.ir.Assign object at 0x000001D63A004790>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D639FCA5D0>],
             '$510call.23': [<numba.core.ir.Assign object at 0x000001D63A005190>],
             '$520get_iter.24': [<numba.core.ir.Assign object at 0x000001D63A005450>],
             '$522for_iter.2': [<numba.core.ir.Assign object at 0x000001D63A0056D0>],
             '$522for_iter.3': [<numba.core.ir.Assign object at 0x000001D63A005850>],
             '$522for_iter.4': [<numba.core.ir.Assign object at 0x000001D63A0059D0>],
             '$542load_global.8': [<numba.core.ir.Assign object at 0x000001D63A006AD0>],
             '$554load_attr.10': [<numba.core.ir.Assign object at 0x000001D63A006E50>],
             '$574binary_subscr.15': [<numba.core.ir.Assign object at 0x000001D63A007850>],
             '$628load_global.26': [<numba.core.ir.Assign object at 0x000001D63A00D010>],
             '$640load_attr.28': [<numba.core.ir.Assign object at 0x000001D63A00D390>],
             '$656call.30': [<numba.core.ir.Assign object at 0x000001D63A00D8D0>],
             '$708compare_op.44': [<numba.core.ir.Assign object at 0x000001D63A00F7D0>],
             '$714pred': [<numba.core.ir.Assign object at 0x000001D63A00FB90>],
             '$716load_global.2': [<numba.core.ir.Assign object at 0x000001D63A007E50>],
             '$72build_tuple.13': [<numba.core.ir.Assign object at 0x000001D639FD29D0>],
             '$742call.8': [<numba.core.ir.Assign object at 0x000001D63A014110>],
             '$74load_global.14': [<numba.core.ir.Assign object at 0x000001D639FBBBD0>],
             '$752get_iter.9': [<numba.core.ir.Assign object at 0x000001D63A014350>],
             '$754for_iter.3': [<numba.core.ir.Assign object at 0x000001D63A0146D0>],
             '$754for_iter.4': [<numba.core.ir.Assign object at 0x000001D63A014850>],
             '$754for_iter.5': [<numba.core.ir.Assign object at 0x000001D63A0149D0>],
             '$764build_tuple.7': [<numba.core.ir.Assign object at 0x000001D63A015410>],
             '$766binary_subscr.8': [<numba.core.ir.Assign object at 0x000001D63A015610>],
             '$790build_tuple.15': [<numba.core.ir.Assign object at 0x000001D63A016310>],
             '$792binary_subscr.16': [<numba.core.ir.Assign object at 0x000001D63A0164D0>],
             '$806compare_op.18': [<numba.core.ir.Assign object at 0x000001D63A0169D0>],
             '$812pred': [<numba.core.ir.Assign object at 0x000001D63A016D90>],
             '$822build_tuple.7': [<numba.core.ir.Assign object at 0x000001D63A017510>],
             '$842build_tuple.14': [<numba.core.ir.Assign object at 0x000001D63A018190>],
             '$844binary_subscr.15': [<numba.core.ir.Assign object at 0x000001D63A018390>],
             '$864build_tuple.20': [<numba.core.ir.Assign object at 0x000001D63A018C10>],
             '$86load_attr.15': [<numba.core.ir.Assign object at 0x000001D639FDB1D0>],
             '$882build_tuple.5': [<numba.core.ir.Assign object at 0x000001D63A019710>],
             '$896build_tuple.10': [<numba.core.ir.Assign object at 0x000001D63A01A050>],
             '$906load_global.0': [<numba.core.ir.Assign object at 0x000001D63A01A390>],
             '$936load_global.4': [<numba.core.ir.Assign object at 0x000001D63A01AAD0>],
             '$948load_attr.6': [<numba.core.ir.Assign object at 0x000001D63A01AD50>],
             '$968load_attr.11': [<numba.core.ir.Assign object at 0x000001D63A01B610>],
             '$998load_global.14': [<numba.core.ir.Assign object at 0x000001D63A01BD50>],
             '$binop_add140.22': [<numba.core.ir.Assign object at 0x000001D639FF08D0>],
             '$binop_add148.25': [<numba.core.ir.Assign object at 0x000001D639FF0E90>],
             '$binop_add338.63': [<numba.core.ir.Assign object at 0x000001D63A0017D0>],
             '$binop_add502.22': [<numba.core.ir.Assign object at 0x000001D63A004F10>],
             '$binop_add60.9': [<numba.core.ir.Assign object at 0x000001D639FAFC90>],
             '$binop_add68.12': [<numba.core.ir.Assign object at 0x000001D639FD2690>],
             '$binop_add734.7': [<numba.core.ir.Assign object at 0x000001D63A00FE10>],
             '$binop_add802.17': [<numba.core.ir.Assign object at 0x000001D63A0167D0>],
             '$binop_add854.16': [<numba.core.ir.Assign object at 0x000001D63A0185D0>],
             '$binop_add962.9': [<numba.core.ir.Assign object at 0x000001D63A01B290>],
             '$binop_iadd610.21': [<numba.core.ir.Assign object at 0x000001D63A00C590>],
             '$binop_iadd620.24': [<numba.core.ir.Assign object at 0x000001D63A00CB90>],
             '$binop_iadd666.31': [<numba.core.ir.Assign object at 0x000001D63A00DBD0>],
             '$binop_mul606.20': [<numba.core.ir.Assign object at 0x000001D63A00C390>],
             '$binop_mul678.35': [<numba.core.ir.Assign object at 0x000001D63A00E390>],
             '$binop_sub1028.19': [<numba.core.ir.Assign object at 0x000001D63A01C490>],
             '$binop_sub1146.11': [<numba.core.ir.Assign object at 0x000001D63A01FA10>],
             '$binop_sub1186.19': [<numba.core.ir.Assign object at 0x000001D63A024A10>],
             '$binop_sub1210.24': [<numba.core.ir.Assign object at 0x000001D63A025110>],
             '$binop_sub530.5': [<numba.core.ir.Assign object at 0x000001D63A0062D0>],
             '$binop_sub570.14': [<numba.core.ir.Assign object at 0x000001D63A007690>],
             '$binop_sub786.14': [<numba.core.ir.Assign object at 0x000001D63A0160D0>],
             '$binop_sub838.13': [<numba.core.ir.Assign object at 0x000001D63A017F50>],
             '$binop_truediv684.37': [<numba.core.ir.Assign object at 0x000001D63A00E7D0>],
             '$const1026.18': [<numba.core.ir.Assign object at 0x000001D63A01C250>],
             '$const1052.24': [<numba.core.ir.Assign object at 0x000001D63A01CF50>],
             '$const1066.27': [<numba.core.ir.Assign object at 0x000001D63A01D450>],
             '$const1086.31': [<numba.core.ir.Assign object at 0x000001D63A01DA90>],
             '$const1088.32': [<numba.core.ir.Assign object at 0x000001D63A01DC50>],
             '$const1144.10': [<numba.core.ir.Assign object at 0x000001D63A01F7D0>],
             '$const1184.18': [<numba.core.ir.Assign object at 0x000001D63A024810>],
             '$const1208.23': [<numba.core.ir.Assign object at 0x000001D63A024F10>],
             '$const1256.4': [<numba.core.ir.Assign object at 0x000001D63A025850>],
             '$const138.21': [<numba.core.ir.Assign object at 0x000001D639FF06D0>],
             '$const146.24': [<numba.core.ir.Assign object at 0x000001D639FF0C90>],
             '$const194.30': [<numba.core.ir.Assign object at 0x000001D639FF1C50>],
             '$const198.32': [<numba.core.ir.Assign object at 0x000001D639FF1FD0>],
             '$const200.33': [<numba.core.ir.Assign object at 0x000001D639FF2190>],
             '$const202.34': [<numba.core.ir.Assign object at 0x000001D639FF2350>],
             '$const236.41': [<numba.core.ir.Assign object at 0x000001D639FF3110>],
             '$const238.42': [<numba.core.ir.Assign object at 0x000001D639FF32D0>],
             '$const242.45': [<numba.core.ir.Assign object at 0x000001D639FF37D0>],
             '$const244.46': [<numba.core.ir.Assign object at 0x000001D639FF3990>],
             '$const276.53': [<numba.core.ir.Assign object at 0x000001D63A000650>],
             '$const306.57': [<numba.core.ir.Assign object at 0x000001D63A000E90>],
             '$const336.62': [<numba.core.ir.Assign object at 0x000001D63A0015D0>],
             '$const386.5': [<numba.core.ir.Assign object at 0x000001D63A002A10>],
             '$const426.10': [<numba.core.ir.Assign object at 0x000001D63A003450>],
             '$const466.15': [<numba.core.ir.Assign object at 0x000001D63A004090>],
             '$const496.19': [<numba.core.ir.Assign object at 0x000001D63A004990>],
             '$const500.21': [<numba.core.ir.Assign object at 0x000001D63A004D10>],
             '$const534.6': [<numba.core.ir.Assign object at 0x000001D63A0064D0>],
             '$const568.13': [<numba.core.ir.Assign object at 0x000001D63A007450>],
             '$const58.8': [<numba.core.ir.Assign object at 0x000001D639FC1690>],
             '$const650.29': [<numba.core.ir.Assign object at 0x000001D63A00D650>],
             '$const66.11': [<numba.core.ir.Assign object at 0x000001D639FD1C90>],
             '$const696.40': [<numba.core.ir.Assign object at 0x000001D63A00EED0>],
             '$const706.43': [<numba.core.ir.Assign object at 0x000001D63A00F5D0>],
             '$const728.4': [<numba.core.ir.Assign object at 0x000001D63A00CE50>],
             '$const732.6': [<numba.core.ir.Assign object at 0x000001D63A00FC50>],
             '$const784.13': [<numba.core.ir.Assign object at 0x000001D63A015E90>],
             '$const836.12': [<numba.core.ir.Assign object at 0x000001D63A017D50>],
             '$const874.1': [<numba.core.ir.Assign object at 0x000001D63A019010>],
             '$const880.4': [<numba.core.ir.Assign object at 0x000001D63A0194D0>],
             '$const894.9': [<numba.core.ir.Assign object at 0x000001D63A019E50>],
             '$const960.8': [<numba.core.ir.Assign object at 0x000001D63A01B090>],
             '$phi1106.0': [<numba.core.ir.Assign object at 0x000001D63A01A910>],
             '$phi1108.1': [<numba.core.ir.Assign object at 0x000001D63A01E4D0>],
             '$phi360.0': [<numba.core.ir.Assign object at 0x000001D639FAC250>],
             '$phi362.1': [<numba.core.ir.Assign object at 0x000001D63A0011D0>],
             '$phi522.1': [<numba.core.ir.Assign object at 0x000001D63A0038D0>],
             '$phi524.2': [<numba.core.ir.Assign object at 0x000001D63A005A90>],
             '$phi754.2': [<numba.core.ir.Assign object at 0x000001D63A00EB50>],
             '$phi756.3': [<numba.core.ir.Assign object at 0x000001D63A014A90>],
             '_id': [<numba.core.ir.Assign object at 0x000001D63A01FC50>],
             '_l': [<numba.core.ir.Assign object at 0x000001D63A002410>],
             'bool714': [<numba.core.ir.Assign object at 0x000001D63A00F9D0>],
             'bool812': [<numba.core.ir.Assign object at 0x000001D63A016BD0>],
             'classes': [<numba.core.ir.Assign object at 0x000001D639FC9D90>],
             'countNum': [<numba.core.ir.Assign object at 0x000001D63A01E790>],
             'i3': [<numba.core.ir.Assign object at 0x000001D63A006750>],
             'i4': [<numba.core.ir.Assign object at 0x000001D63A00F110>],
             'j': [<numba.core.ir.Assign object at 0x000001D63A014D50>],
             'k': [<numba.core.ir.Assign object at 0x000001D63A01A790>,
                   <numba.core.ir.Assign object at 0x000001D63A025310>],
             'kclass': [<numba.core.ir.Assign object at 0x000001D63A01B850>],
             'm': [<numba.core.ir.Assign object at 0x000001D63A005D50>],
             'mat1': [<numba.core.ir.Assign object at 0x000001D639FD9610>],
             'mat2': [<numba.core.ir.Assign object at 0x000001D639FF1990>],
             'n_data': [<numba.core.ir.Assign object at 0x000001D639FC9A10>],
             'pivot': [<numba.core.ir.Assign object at 0x000001D63A01F090>],
             's1': [<numba.core.ir.Assign object at 0x000001D63A002C90>,
                    <numba.core.ir.Assign object at 0x000001D63A00CC10>],
             's2': [<numba.core.ir.Assign object at 0x000001D63A003690>,
                    <numba.core.ir.Assign object at 0x000001D63A00C610>],
             'v': [<numba.core.ir.Assign object at 0x000001D63A000910>,
                   <numba.core.ir.Assign object at 0x000001D63A00EA50>],
             'val': [<numba.core.ir.Assign object at 0x000001D63A007A90>],
             'values': [<numba.core.ir.Assign object at 0x000001D637C84BD0>],
             'w': [<numba.core.ir.Assign object at 0x000001D63A004350>,
                   <numba.core.ir.Assign object at 0x000001D63A00DC50>]})
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; SSA violators {'w', 'k', 'v', 's2', 's1'}
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var w
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,286 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; first assign: w
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; replaced with: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = $binop_iadd666.31
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; replaced with: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,294 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,298 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,300 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,300 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,300 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,300 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,300 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,300 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,300 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033650>
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {362: [<numba.core.ir.Assign object at 0x000001D63A000550>],
             524: [<numba.core.ir.Assign object at 0x000001D639FC9D50>]})
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,301 ; numba.core.ssa                                               ; DEBUG   ; find_def var='w' stmt=$binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 524
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 524
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 522
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; insert phi node w.2 = phi(incoming_values=[], incoming_blocks=[]) at 522
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 872
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 872
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 872
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; incoming_def w.1 = $binop_iadd666.31
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 362
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; incoming_def w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; find_def var='w' stmt=$binop_truediv684.37 = $binop_mul678.35 / w
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,311 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FB8190>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var k
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; first assign: k
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; replaced with: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; replaced with: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FBF010>
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,316 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {906: [<numba.core.ir.Assign object at 0x000001D63A0A0850>],
             1108: [<numba.core.ir.Assign object at 0x000001D63A0A0C90>]})
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,327 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,332 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; find_def var='k' stmt=$1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 1108
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; idom 1106 from label 1108
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 1106
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 1106
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; insert phi node k.2 = phi(incoming_values=[], incoming_blocks=[]) at 1106
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 906
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; incoming_def k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 1108
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; incoming_def k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A07FCD0>
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var v
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; first assign: v
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; replaced with: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,338 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; replaced with: v.1 = s2 - $binop_truediv684.37
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,344 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-08-01 17:59:43,348 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.2 = phi(incoming_values=[Var(k, classifiers.py:627), Var(k.1, classifiers.py:636)], incoming_blocks=[906, 1108])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FB8190>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001D639FC9150>],
             524: [<numba.core.ir.Assign object at 0x000001D639FB8D10>]})
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.1 = s2 - $binop_truediv684.37
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; find_def var='v' stmt=$binop_add802.17 = v + $792binary_subscr.16
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 756
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; idom 754 from label 756
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 754
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 754
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; idom 716 from label 754
2024-08-01 17:59:43,349 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 716
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 716
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 716
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_add802.17 = v.1 + $792binary_subscr.16
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def var='v' stmt=$binop_add854.16 = v + $844binary_subscr.15
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 814
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; idom 756 from label 814
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 756
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 756
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; idom 754 from label 756
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 754
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 754
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; idom 716 from label 754
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 716
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 716
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 716
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_add854.16 = v.1 + $844binary_subscr.15
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def var='v' stmt=mat2[$896build_tuple.10] = v
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 874
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 874
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 522
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; insert phi node v.2 = phi(incoming_values=[], incoming_blocks=[]) at 522
2024-08-01 17:59:43,359 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 872
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 872
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 872
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; incoming_def v.1 = s2 - $binop_truediv684.37
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 362
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 362
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; idom 360 from label 362
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 360
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 360
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; idom 358 from label 360
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 358
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 358
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; insert phi node v.3 = phi(incoming_values=[], incoming_blocks=[]) at 358
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; incoming_def v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 874
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 874
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 874
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; incoming_def v.2 = phi(incoming_values=[Var(v.1, classifiers.py:617)], incoming_blocks=[872])
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; incoming_def v.3 = phi(incoming_values=[Var(v, classifiers.py:606), Var(v.2, classifiers.py:624)], incoming_blocks=[0, 874])
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; replaced with: mat2[$896build_tuple.10] = v.2
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.2 = phi(incoming_values=[Var(k, classifiers.py:627), Var(k.1, classifiers.py:636)], incoming_blocks=[906, 1108])
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,361 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var s2
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.3 = phi(incoming_values=[Var(v, classifiers.py:606), Var(v.2, classifiers.py:624)], incoming_blocks=[0, 874])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; first assign: s2
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; replaced with: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.2 = phi(incoming_values=[Var(v.1, classifiers.py:617), Var(v.3, classifiers.py:624)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; replaced with: s2.1 = $binop_iadd610.21
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.1 = s2 - $binop_truediv684.37
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v.1 + $792binary_subscr.16
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v.1 + $844binary_subscr.15
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v.2
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.2 = phi(incoming_values=[Var(k, classifiers.py:627), Var(k.1, classifiers.py:636)], incoming_blocks=[906, 1108])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D639FDB850>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {362: [<numba.core.ir.Assign object at 0x000001D639FD8690>],
             524: [<numba.core.ir.Assign object at 0x000001D63A0A12D0>]})
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,364 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.3 = phi(incoming_values=[Var(v, classifiers.py:606), Var(v.2, classifiers.py:624)], incoming_blocks=[0, 874])
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.2 = phi(incoming_values=[Var(v.1, classifiers.py:617), Var(v.3, classifiers.py:624)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,377 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def var='s2' stmt=$binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 524
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 524
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 522
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; insert phi node s2.2 = phi(incoming_values=[], incoming_blocks=[]) at 522
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; incoming_def s2.1 = $binop_iadd610.21
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 362
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; incoming_def s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2.2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.1 = $binop_iadd610.21
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.1 = s2 - $binop_truediv684.37
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; find_def var='s2' stmt=v.1 = s2 - $binop_truediv684.37
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; replaced with: v.1 = s2.1 - $binop_truediv684.37
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v.1 + $792binary_subscr.16
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v.1 + $844binary_subscr.15
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v.2
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.2 = phi(incoming_values=[Var(k, classifiers.py:627), Var(k.1, classifiers.py:636)], incoming_blocks=[906, 1108])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A027550>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var s1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.3 = phi(incoming_values=[Var(v, classifiers.py:606), Var(v.2, classifiers.py:624)], incoming_blocks=[0, 874])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; first assign: s1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; replaced with: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.2 = phi(incoming_values=[Var(s2.1, classifiers.py:614), Var(s2, classifiers.py:609)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.2 = phi(incoming_values=[Var(v.1, classifiers.py:617), Var(v.3, classifiers.py:624)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2.2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.1 = $binop_iadd610.21
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; replaced with: s1.1 = $binop_iadd620.24
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.1 = s2.1 - $binop_truediv684.37
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v.1 + $792binary_subscr.16
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v.1 + $844binary_subscr.15
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,380 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v.2
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,394 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.2 = phi(incoming_values=[Var(k, classifiers.py:627), Var(k.1, classifiers.py:636)], incoming_blocks=[906, 1108])
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,396 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A033310>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {362: [<numba.core.ir.Assign object at 0x000001D63A0A1310>],
             524: [<numba.core.ir.Assign object at 0x000001D63A0A13D0>]})
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.3 = phi(incoming_values=[Var(v, classifiers.py:606), Var(v.2, classifiers.py:624)], incoming_blocks=[0, 874])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.2 = phi(incoming_values=[Var(s2.1, classifiers.py:614), Var(s2, classifiers.py:609)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.2 = phi(incoming_values=[Var(v.1, classifiers.py:617), Var(v.3, classifiers.py:624)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2.2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.1 = $binop_iadd610.21
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def var='s1' stmt=$binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 524
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 524
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 522
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; insert phi node s1.2 = phi(incoming_values=[], incoming_blocks=[]) at 522
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 872
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 872
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 872
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; incoming_def s1.1 = $binop_iadd620.24
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 362
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; incoming_def s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1.2, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.1 = $binop_iadd620.24
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; find_def var='s1' stmt=$binop_mul678.35 = s1 * s1
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_mul678.35 = s1.1 * s1.1
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.1 = s2.1 - $binop_truediv684.37
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v.1 + $792binary_subscr.16
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v.1 + $844binary_subscr.15
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v.2
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,397 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.2 = phi(incoming_values=[Var(k, classifiers.py:627), Var(k.1, classifiers.py:636)], incoming_blocks=[906, 1108])
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D639FAE7D0>
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-08-01 17:59:43,407 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4321)
           2	RESUME(arg=0, lineno=4321)
           4	LOAD_GLOBAL(arg=1, lineno=4322)
          16	LOAD_ATTR(arg=1, lineno=4322)
          26	LOAD_FAST(arg=0, lineno=4322)
          28	LOAD_FAST(arg=1, lineno=4322)
          30	KW_NAMES(arg=1, lineno=4322)
          32	PRECALL(arg=2, lineno=4322)
          36	CALL(arg=2, lineno=4322)
          46	STORE_FAST(arg=2, lineno=4322)
          48	LOAD_FAST(arg=2, lineno=4323)
          50	LOAD_METHOD(arg=2, lineno=4323)
          72	PRECALL(arg=0, lineno=4323)
          76	CALL(arg=0, lineno=4323)
          86	POP_TOP(arg=None, lineno=4323)
          88	LOAD_FAST(arg=2, lineno=4324)
          90	RETURN_VALUE(arg=None, lineno=4324)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4321)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4321)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4322)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4322)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4322)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4322)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4322)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=PRECALL(arg=2, lineno=4322)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=CALL(arg=2, lineno=4322)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4322)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$36call.5']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4323)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4323)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr48.6']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=PRECALL(arg=0, lineno=4323)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=76, inst=CALL(arg=0, lineno=4323)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=86, inst=POP_TOP(arg=None, lineno=4323)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$76call.9']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4324)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4324)
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr88.10']
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,412 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,427 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,427 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,427 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,427 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,428 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4321)], kws=[('dtype', Var(dtype, arrayobj.py:4321))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A0A0E90>
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4321)], kws=[('dtype', Var(dtype, arrayobj.py:4321))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $90return_value.11 = cast(value=arr)
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $90return_value.11
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x000001D63A07F390>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D639FBB2D0>],
             '$50load_method.8': [<numba.core.ir.Assign object at 0x000001D639FAFA90>],
             '$76call.9': [<numba.core.ir.Assign object at 0x000001D639FAEE10>],
             '$90return_value.11': [<numba.core.ir.Assign object at 0x000001D639FC3050>],
             'arr': [<numba.core.ir.Assign object at 0x000001D63A014F50>],
             'dtype': [<numba.core.ir.Assign object at 0x000001D639FB82D0>],
             'shape': [<numba.core.ir.Assign object at 0x000001D639FC8AD0>]})
2024-08-01 17:59:43,429 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4253)
           2	COPY_FREE_VARS(arg=1, lineno=4253)
           4	RESUME(arg=0, lineno=4253)
           6	LOAD_GLOBAL(arg=1, lineno=4254)
          18	LOAD_FAST(arg=0, lineno=4254)
          20	LOAD_FAST(arg=1, lineno=4254)
          22	LOAD_DEREF(arg=2, lineno=4254)
          24	PRECALL(arg=3, lineno=4254)
          28	CALL(arg=3, lineno=4254)
          38	RETURN_VALUE(arg=None, lineno=4254)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4253)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4253)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=RESUME(arg=0, lineno=4253)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4254)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4254)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0']
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4254)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4254)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=PRECALL(arg=3, lineno=4254)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=CALL(arg=3, lineno=4254)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4254)
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$28call.5']
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,438 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,438 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(int32, 2d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A168B10>
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22load_deref.4 = freevar(retty: array(int32, 2d, C))
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38return_value.6 = cast(value=$28call.5)
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $38return_value.6
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x000001D639FC3DD0>],
             '$28call.5': [<numba.core.ir.Assign object at 0x000001D63A0C2290>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x000001D63A1689D0>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x000001D63A142210>],
             'dtype': [<numba.core.ir.Assign object at 0x000001D63A142290>],
             'shape': [<numba.core.ir.Assign object at 0x000001D63A141C10>]})
2024-08-01 17:59:43,444 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4129)
           2	RESUME(arg=0, lineno=4129)
           4	LOAD_FAST(arg=0, lineno=4132)
           6	LOAD_METHOD(arg=0, lineno=4132)
          28	LOAD_FAST(arg=1, lineno=4132)
          30	LOAD_FAST(arg=2, lineno=4132)
          32	PRECALL(arg=2, lineno=4132)
          36	CALL(arg=2, lineno=4132)
          46	RETURN_VALUE(arg=None, lineno=4132)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4129)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4129)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4132)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_METHOD(arg=0, lineno=4132)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arrtype4.0']
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4132)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2']
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=4132)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$size28.3']
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=PRECALL(arg=2, lineno=4132)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$size28.3', '$align30.4']
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=CALL(arg=2, lineno=4132)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$size28.3', '$align30.4']
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4132)
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$36call.5']
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,444 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$arrtype4.0'}), (6, {'item': '$arrtype4.0', 'res': '$6load_method.2'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'res': '$size28.3'}), (30, {'res': '$align30.4'}), (32, {}), (34, {}), (36, {'func': '$6load_method.2', 'args': ['$size28.3', '$align30.4'], 'kw_names': None, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'retval': '$36call.5', 'castval': '$46return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,444 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $6load_method.2 = getattr(value=arrtype, attr=_allocate) ['$6load_method.2', 'arrtype']
    $36call.5 = call $6load_method.2(size, align, func=$6load_method.2, args=[Var(size, arrayobj.py:4129), Var(align, arrayobj.py:4129)], kws=(), vararg=None, varkwarg=None, target=None) ['$36call.5', '$6load_method.2', 'align', 'size']
    $46return_value.6 = cast(value=$36call.5) ['$36call.5', '$46return_value.6']
    return $46return_value.6                 ['$46return_value.6']

2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1BA3D0>
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arrtype = arg(0, name=arrtype)
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; on stmt: size = arg(1, name=size)
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; on stmt: align = arg(2, name=align)
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_method.2 = getattr(value=arrtype, attr=_allocate)
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $36call.5 = call $6load_method.2(size, align, func=$6load_method.2, args=[Var(size, arrayobj.py:4129), Var(align, arrayobj.py:4129)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46return_value.6 = cast(value=$36call.5)
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $46return_value.6
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$36call.5': [<numba.core.ir.Assign object at 0x000001D63A1B82D0>],
             '$46return_value.6': [<numba.core.ir.Assign object at 0x000001D63A1B8550>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x000001D63A1A3D90>],
             'align': [<numba.core.ir.Assign object at 0x000001D63A1A3950>],
             'arrtype': [<numba.core.ir.Assign object at 0x000001D63A1A3710>],
             'size': [<numba.core.ir.Assign object at 0x000001D63A1A3850>]})
2024-08-01 17:59:43,465 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4124)
           2	RESUME(arg=0, lineno=4124)
           4	LOAD_GLOBAL(arg=1, lineno=4125)
          16	LOAD_FAST(arg=1, lineno=4125)
          18	LOAD_FAST(arg=2, lineno=4125)
          20	PRECALL(arg=2, lineno=4125)
          24	CALL(arg=2, lineno=4125)
          34	RETURN_VALUE(arg=None, lineno=4125)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4124)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4124)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4125)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4125)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=4125)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$allocsize16.2']
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=PRECALL(arg=2, lineno=4125)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$allocsize16.2', '$align18.3']
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=CALL(arg=2, lineno=4125)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$allocsize16.2', '$align18.3']
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=4125)
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$24call.4']
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,470 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$allocsize16.2'}), (18, {'res': '$align18.3'}), (20, {}), (22, {}), (24, {'func': '$4load_global.0', 'args': ['$allocsize16.2', '$align18.3'], 'kw_names': None, 'res': '$24call.4'}), (26, {}), (28, {}), (30, {}), (32, {}), (34, {'retval': '$24call.4', 'castval': '$34return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,470 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$4load_global.0']
    $24call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4124), Var(align, arrayobj.py:4124)], kws=(), vararg=None, varkwarg=None, target=None) ['$24call.4', '$4load_global.0', 'align', 'allocsize']
    $34return_value.5 = cast(value=$24call.4) ['$24call.4', '$34return_value.5']
    return $34return_value.5                 ['$34return_value.5']

2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1C1850>
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; on stmt: cls = arg(0, name=cls)
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; on stmt: allocsize = arg(1, name=allocsize)
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; on stmt: align = arg(2, name=align)
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $24call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4124), Var(align, arrayobj.py:4124)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34return_value.5 = cast(value=$24call.4)
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $34return_value.5
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$24call.4': [<numba.core.ir.Assign object at 0x000001D63A1C0C50>],
             '$34return_value.5': [<numba.core.ir.Assign object at 0x000001D63A1C0E50>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D63A1A2B10>],
             'align': [<numba.core.ir.Assign object at 0x000001D63A0072D0>],
             'allocsize': [<numba.core.ir.Assign object at 0x000001D63A1B8E50>],
             'cls': [<numba.core.ir.Assign object at 0x000001D63A1B8F90>]})
2024-08-01 17:59:43,477 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4312)
           2	RESUME(arg=0, lineno=4312)
           4	LOAD_GLOBAL(arg=1, lineno=4313)
          16	LOAD_FAST(arg=0, lineno=4313)
          18	PRECALL(arg=1, lineno=4313)
          22	CALL(arg=1, lineno=4313)
          32	POP_TOP(arg=None, lineno=4313)
          34	LOAD_CONST(arg=0, lineno=4313)
          36	RETURN_VALUE(arg=None, lineno=4313)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4312)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4312)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4313)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4313)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=PRECALL(arg=1, lineno=4313)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=CALL(arg=1, lineno=4313)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=POP_TOP(arg=None, lineno=4313)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$22call.3']
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=4313)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=4313)
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const34.4']
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,588 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$self16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$self16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (34, {'res': '$const34.4'}), (36, {'retval': '$const34.4', 'castval': '$36return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,588 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4312)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'self']
    $const34.4 = const(NoneType, None)       ['$const34.4']
    $36return_value.5 = cast(value=$const34.4) ['$36return_value.5', '$const34.4']
    return $36return_value.5                 ['$36return_value.5']

2024-08-01 17:59:43,588 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,588 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A247450>
2024-08-01 17:59:43,588 ; numba.core.ssa                                               ; DEBUG   ; on stmt: self = arg(0, name=self)
2024-08-01 17:59:43,588 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2024-08-01 17:59:43,594 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4312)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,594 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const34.4 = const(NoneType, None)
2024-08-01 17:59:43,594 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $36return_value.5 = cast(value=$const34.4)
2024-08-01 17:59:43,594 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $36return_value.5
2024-08-01 17:59:43,594 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001D63A246290>],
             '$36return_value.5': [<numba.core.ir.Assign object at 0x000001D63A2466D0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D63A245E90>],
             '$const34.4': [<numba.core.ir.Assign object at 0x000001D63A246550>],
             'self': [<numba.core.ir.Assign object at 0x000001D63A245C90>]})
2024-08-01 17:59:43,594 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4321)
           2	RESUME(arg=0, lineno=4321)
           4	LOAD_GLOBAL(arg=1, lineno=4322)
          16	LOAD_ATTR(arg=1, lineno=4322)
          26	LOAD_FAST(arg=0, lineno=4322)
          28	LOAD_FAST(arg=1, lineno=4322)
          30	KW_NAMES(arg=1, lineno=4322)
          32	PRECALL(arg=2, lineno=4322)
          36	CALL(arg=2, lineno=4322)
          46	STORE_FAST(arg=2, lineno=4322)
          48	LOAD_FAST(arg=2, lineno=4323)
          50	LOAD_METHOD(arg=2, lineno=4323)
          72	PRECALL(arg=0, lineno=4323)
          76	CALL(arg=0, lineno=4323)
          86	POP_TOP(arg=None, lineno=4323)
          88	LOAD_FAST(arg=2, lineno=4324)
          90	RETURN_VALUE(arg=None, lineno=4324)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4321)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4321)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4322)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4322)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4322)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4322)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4322)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=PRECALL(arg=2, lineno=4322)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=CALL(arg=2, lineno=4322)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4322)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$36call.5']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4323)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4323)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr48.6']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=PRECALL(arg=0, lineno=4323)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=76, inst=CALL(arg=0, lineno=4323)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=86, inst=POP_TOP(arg=None, lineno=4323)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$76call.9']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4324)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4324)
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr88.10']
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,667 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,667 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4321)], kws=[('dtype', Var(dtype, arrayobj.py:4321))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A2D3450>
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4321)], kws=[('dtype', Var(dtype, arrayobj.py:4321))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $90return_value.11 = cast(value=arr)
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $90return_value.11
2024-08-01 17:59:43,677 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x000001D63A2DC9D0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D63A2DC790>],
             '$50load_method.8': [<numba.core.ir.Assign object at 0x000001D63A2DD710>],
             '$76call.9': [<numba.core.ir.Assign object at 0x000001D63A2DD8D0>],
             '$90return_value.11': [<numba.core.ir.Assign object at 0x000001D63A2DDCD0>],
             'arr': [<numba.core.ir.Assign object at 0x000001D63A2DD0D0>],
             'dtype': [<numba.core.ir.Assign object at 0x000001D63A2DC550>],
             'shape': [<numba.core.ir.Assign object at 0x000001D63A2DC450>]})
2024-08-01 17:59:43,683 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4253)
           2	COPY_FREE_VARS(arg=1, lineno=4253)
           4	RESUME(arg=0, lineno=4253)
           6	LOAD_GLOBAL(arg=1, lineno=4254)
          18	LOAD_FAST(arg=0, lineno=4254)
          20	LOAD_FAST(arg=1, lineno=4254)
          22	LOAD_DEREF(arg=2, lineno=4254)
          24	PRECALL(arg=3, lineno=4254)
          28	CALL(arg=3, lineno=4254)
          38	RETURN_VALUE(arg=None, lineno=4254)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4253)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4253)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=RESUME(arg=0, lineno=4253)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4254)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4254)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0']
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4254)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4254)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=PRECALL(arg=3, lineno=4254)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=CALL(arg=3, lineno=4254)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4254)
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$28call.5']
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,685 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,685 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(float32, 2d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A2CB910>
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22load_deref.4 = freevar(retty: array(float32, 2d, C))
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38return_value.6 = cast(value=$28call.5)
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $38return_value.6
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x000001D63A2BC310>],
             '$28call.5': [<numba.core.ir.Assign object at 0x000001D63A2BC050>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x000001D63A2BEF90>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x000001D63A2BC950>],
             'dtype': [<numba.core.ir.Assign object at 0x000001D63A2BCE90>],
             'shape': [<numba.core.ir.Assign object at 0x000001D63A2BCC90>]})
2024-08-01 17:59:43,685 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,737 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4312)
           2	RESUME(arg=0, lineno=4312)
           4	LOAD_GLOBAL(arg=1, lineno=4313)
          16	LOAD_FAST(arg=0, lineno=4313)
          18	PRECALL(arg=1, lineno=4313)
          22	CALL(arg=1, lineno=4313)
          32	POP_TOP(arg=None, lineno=4313)
          34	LOAD_CONST(arg=0, lineno=4313)
          36	RETURN_VALUE(arg=None, lineno=4313)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4312)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4312)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4313)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4313)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=PRECALL(arg=1, lineno=4313)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=CALL(arg=1, lineno=4313)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=POP_TOP(arg=None, lineno=4313)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$22call.3']
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=4313)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=4313)
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const34.4']
2024-08-01 17:59:43,738 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,739 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$self16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$self16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (34, {'res': '$const34.4'}), (36, {'retval': '$const34.4', 'castval': '$36return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,739 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4312)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'self']
    $const34.4 = const(NoneType, None)       ['$const34.4']
    $36return_value.5 = cast(value=$const34.4) ['$36return_value.5', '$const34.4']
    return $36return_value.5                 ['$36return_value.5']

2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A237110>
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; on stmt: self = arg(0, name=self)
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4312)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const34.4 = const(NoneType, None)
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $36return_value.5 = cast(value=$const34.4)
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $36return_value.5
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001D63A237FD0>],
             '$36return_value.5': [<numba.core.ir.Assign object at 0x000001D63A235190>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D63A237E10>],
             '$const34.4': [<numba.core.ir.Assign object at 0x000001D63A2361D0>],
             'self': [<numba.core.ir.Assign object at 0x000001D63A234490>]})
2024-08-01 17:59:43,742 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4321)
           2	RESUME(arg=0, lineno=4321)
           4	LOAD_GLOBAL(arg=1, lineno=4322)
          16	LOAD_ATTR(arg=1, lineno=4322)
          26	LOAD_FAST(arg=0, lineno=4322)
          28	LOAD_FAST(arg=1, lineno=4322)
          30	KW_NAMES(arg=1, lineno=4322)
          32	PRECALL(arg=2, lineno=4322)
          36	CALL(arg=2, lineno=4322)
          46	STORE_FAST(arg=2, lineno=4322)
          48	LOAD_FAST(arg=2, lineno=4323)
          50	LOAD_METHOD(arg=2, lineno=4323)
          72	PRECALL(arg=0, lineno=4323)
          76	CALL(arg=0, lineno=4323)
          86	POP_TOP(arg=None, lineno=4323)
          88	LOAD_FAST(arg=2, lineno=4324)
          90	RETURN_VALUE(arg=None, lineno=4324)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4321)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4321)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4322)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4322)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4322)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4322)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4322)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=PRECALL(arg=2, lineno=4322)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=CALL(arg=2, lineno=4322)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4322)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$36call.5']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4323)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4323)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr48.6']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=PRECALL(arg=0, lineno=4323)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=76, inst=CALL(arg=0, lineno=4323)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=86, inst=POP_TOP(arg=None, lineno=4323)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$76call.9']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4324)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4324)
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr88.10']
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,828 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,828 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4321)], kws=[('dtype', Var(dtype, arrayobj.py:4321))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A312D50>
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4321)], kws=[('dtype', Var(dtype, arrayobj.py:4321))], vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $90return_value.11 = cast(value=arr)
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $90return_value.11
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x000001D63A30A450>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D63A30A4D0>],
             '$50load_method.8': [<numba.core.ir.Assign object at 0x000001D63A308110>],
             '$76call.9': [<numba.core.ir.Assign object at 0x000001D63A308150>],
             '$90return_value.11': [<numba.core.ir.Assign object at 0x000001D63A1FD4D0>],
             'arr': [<numba.core.ir.Assign object at 0x000001D63A3099D0>],
             'dtype': [<numba.core.ir.Assign object at 0x000001D63A30AC90>],
             'shape': [<numba.core.ir.Assign object at 0x000001D63A30AA10>]})
2024-08-01 17:59:43,840 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4253)
           2	COPY_FREE_VARS(arg=1, lineno=4253)
           4	RESUME(arg=0, lineno=4253)
           6	LOAD_GLOBAL(arg=1, lineno=4254)
          18	LOAD_FAST(arg=0, lineno=4254)
          20	LOAD_FAST(arg=1, lineno=4254)
          22	LOAD_DEREF(arg=2, lineno=4254)
          24	PRECALL(arg=3, lineno=4254)
          28	CALL(arg=3, lineno=4254)
          38	RETURN_VALUE(arg=None, lineno=4254)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4253)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4253)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=RESUME(arg=0, lineno=4253)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4254)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4254)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0']
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4254)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4254)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=PRECALL(arg=3, lineno=4254)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=CALL(arg=3, lineno=4254)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4254)
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$28call.5']
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,844 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,844 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(float64, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A30A8D0>
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22load_deref.4 = freevar(retty: array(float64, 1d, C))
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4253), Var(dtype, arrayobj.py:4253), Var($22load_deref.4, arrayobj.py:4254)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38return_value.6 = cast(value=$28call.5)
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $38return_value.6
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x000001D63A311050>],
             '$28call.5': [<numba.core.ir.Assign object at 0x000001D63A311150>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x000001D63A310990>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x000001D63A311810>],
             'dtype': [<numba.core.ir.Assign object at 0x000001D63A311D10>],
             'shape': [<numba.core.ir.Assign object at 0x000001D63A311B50>]})
2024-08-01 17:59:43,844 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4312)
           2	RESUME(arg=0, lineno=4312)
           4	LOAD_GLOBAL(arg=1, lineno=4313)
          16	LOAD_FAST(arg=0, lineno=4313)
          18	PRECALL(arg=1, lineno=4313)
          22	CALL(arg=1, lineno=4313)
          32	POP_TOP(arg=None, lineno=4313)
          34	LOAD_CONST(arg=0, lineno=4313)
          36	RETURN_VALUE(arg=None, lineno=4313)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4312)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4312)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4313)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4313)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=PRECALL(arg=1, lineno=4313)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=CALL(arg=1, lineno=4313)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=POP_TOP(arg=None, lineno=4313)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$22call.3']
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=4313)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=4313)
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const34.4']
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,894 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$self16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$self16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (34, {'res': '$const34.4'}), (36, {'retval': '$const34.4', 'castval': '$36return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,894 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4312)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'self']
    $const34.4 = const(NoneType, None)       ['$const34.4']
    $36return_value.5 = cast(value=$const34.4) ['$36return_value.5', '$const34.4']
    return $36return_value.5                 ['$36return_value.5']

2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A237250>
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; on stmt: self = arg(0, name=self)
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4312)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const34.4 = const(NoneType, None)
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $36return_value.5 = cast(value=$const34.4)
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $36return_value.5
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x000001D63A21BA10>],
             '$36return_value.5': [<numba.core.ir.Assign object at 0x000001D63A21BCD0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D63A218690>],
             '$const34.4': [<numba.core.ir.Assign object at 0x000001D63A2185D0>],
             'self': [<numba.core.ir.Assign object at 0x000001D63A21AB10>]})
2024-08-01 17:59:43,894 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=3491)
           2	RESUME(arg=0, lineno=3491)
           4	LOAD_GLOBAL(arg=1, lineno=3492)
          16	LOAD_ATTR(arg=1, lineno=3492)
          26	LOAD_GLOBAL(arg=1, lineno=3492)
          38	LOAD_ATTR(arg=2, lineno=3492)
          48	LOAD_FAST(arg=0, lineno=3492)
          50	PRECALL(arg=1, lineno=3492)
          54	CALL(arg=1, lineno=3492)
          64	PRECALL(arg=1, lineno=3492)
          68	CALL(arg=1, lineno=3492)
          78	STORE_FAST(arg=0, lineno=3492)
          80	LOAD_FAST(arg=0, lineno=3493)
          82	LOAD_ATTR(arg=3, lineno=3493)
          92	STORE_FAST(arg=2, lineno=3493)
          94	LOAD_FAST(arg=1, lineno=3494)
          96	STORE_FAST(arg=3, lineno=3494)
          98	LOAD_FAST(arg=3, lineno=3496)
         100	LOAD_FAST(arg=2, lineno=3496)
         102	UNARY_NEGATIVE(arg=None, lineno=3496)
         104	COMPARE_OP(arg=0, lineno=3496)
         110	POP_JUMP_FORWARD_IF_TRUE(arg=6, lineno=3496)
         112	LOAD_FAST(arg=3, lineno=3496)
         114	LOAD_FAST(arg=2, lineno=3496)
         116	COMPARE_OP(arg=5, lineno=3496)
         122	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=3496)
>        124	LOAD_GLOBAL(arg=9, lineno=3497)
         136	LOAD_CONST(arg=1, lineno=3497)
         138	PRECALL(arg=1, lineno=3497)
         142	CALL(arg=1, lineno=3497)
         152	RAISE_VARARGS(arg=1, lineno=3497)
>        154	LOAD_FAST(arg=3, lineno=3501)
         156	LOAD_CONST(arg=2, lineno=3501)
         158	COMPARE_OP(arg=0, lineno=3501)
         164	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=3501)
         166	LOAD_FAST(arg=3, lineno=3502)
         168	LOAD_FAST(arg=2, lineno=3502)
         170	BINARY_OP(arg=13, lineno=3502)
         174	STORE_FAST(arg=3, lineno=3502)
>        176	LOAD_GLOBAL(arg=1, lineno=3504)
         188	LOAD_ATTR(arg=5, lineno=3504)
         198	LOAD_FAST(arg=0, lineno=3504)
         200	LOAD_CONST(arg=0, lineno=3504)
         202	LOAD_FAST(arg=3, lineno=3504)
         204	BUILD_SLICE(arg=2, lineno=3504)
         206	BINARY_SUBSCR(arg=None, lineno=3504)
         216	LOAD_FAST(arg=0, lineno=3504)
         218	LOAD_FAST(arg=3, lineno=3504)
         220	LOAD_CONST(arg=3, lineno=3504)
         222	BINARY_OP(arg=0, lineno=3504)
         226	LOAD_CONST(arg=0, lineno=3504)
         228	BUILD_SLICE(arg=2, lineno=3504)
         230	BINARY_SUBSCR(arg=None, lineno=3504)
         240	BUILD_TUPLE(arg=2, lineno=3504)
         242	PRECALL(arg=1, lineno=3504)
         246	CALL(arg=1, lineno=3504)
         256	RETURN_VALUE(arg=None, lineno=3504)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=3491)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=3491)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=38, inst=LOAD_ATTR(arg=2, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$null$26.4', '$26load_global.3']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$null$26.4', '$38load_attr.5']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=PRECALL(arg=1, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$null$26.4', '$38load_attr.5', '$arr48.6']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=54, inst=CALL(arg=1, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$null$26.4', '$38load_attr.5', '$arr48.6']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=64, inst=PRECALL(arg=1, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$54call.7']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=68, inst=CALL(arg=1, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$54call.7']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=78, inst=STORE_FAST(arg=0, lineno=3492)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$68call.8']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=3493)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=82, inst=LOAD_ATTR(arg=3, lineno=3493)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr80.9']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3493)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$82load_attr.10']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=3494)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=96, inst=STORE_FAST(arg=3, lineno=3494)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$obj94.11']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=3496)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=3496)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos98.12']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=102, inst=UNARY_NEGATIVE(arg=None, lineno=3496)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos98.12', '$N100.13']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=104, inst=COMPARE_OP(arg=0, lineno=3496)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos98.12', '$102unary_negative.14']
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=110, inst=POP_JUMP_FORWARD_IF_TRUE(arg=6, lineno=3496)
2024-08-01 17:59:43,977 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$104compare_op.15']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=112, stack=(), blockstack=(), npush=0), Edge(pc=124, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=112 nstack_initial=0)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=112, inst=LOAD_FAST(arg=3, lineno=3496)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=114, inst=LOAD_FAST(arg=2, lineno=3496)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos112.0']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=116, inst=COMPARE_OP(arg=5, lineno=3496)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos112.0', '$N114.1']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=122, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=3496)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$116compare_op.2']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=124 nstack_initial=0)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=124, inst=LOAD_GLOBAL(arg=9, lineno=3497)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=136, inst=LOAD_CONST(arg=1, lineno=3497)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$124.1', '$124load_global.0']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=138, inst=PRECALL(arg=1, lineno=3497)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$124.1', '$124load_global.0', '$const136.2']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=142, inst=CALL(arg=1, lineno=3497)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$124.1', '$124load_global.0', '$const136.2']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=152, inst=RAISE_VARARGS(arg=1, lineno=3497)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$142call.3']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=154 nstack_initial=0)])
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=154 nstack_initial=0)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=154, inst=LOAD_FAST(arg=3, lineno=3501)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=156, inst=LOAD_CONST(arg=2, lineno=3501)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos154.0']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=158, inst=COMPARE_OP(arg=0, lineno=3501)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos154.0', '$const156.1']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=164, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=3501)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$158compare_op.2']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=166, stack=(), blockstack=(), npush=0), Edge(pc=176, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=166 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=166 nstack_initial=0)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=166, inst=LOAD_FAST(arg=3, lineno=3502)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=168, inst=LOAD_FAST(arg=2, lineno=3502)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos166.0']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=170, inst=BINARY_OP(arg=13, lineno=3502)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos166.0', '$N168.1']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=174, inst=STORE_FAST(arg=3, lineno=3502)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$binop_iadd170.2']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=176 nstack_initial=0)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=176, inst=LOAD_GLOBAL(arg=1, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=188, inst=LOAD_ATTR(arg=5, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$176load_global.0']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=198, inst=LOAD_FAST(arg=0, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=200, inst=LOAD_CONST(arg=0, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$arr198.3']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=202, inst=LOAD_FAST(arg=3, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$arr198.3', '$const200.4']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=204, inst=BUILD_SLICE(arg=2, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$arr198.3', '$const200.4', '$pos202.5']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=206, inst=BINARY_SUBSCR(arg=None, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$arr198.3', '$204build_slice.7']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=218, inst=LOAD_FAST(arg=3, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=220, inst=LOAD_CONST(arg=3, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$pos218.10']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=222, inst=BINARY_OP(arg=0, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$pos218.10', '$const220.11']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=226, inst=LOAD_CONST(arg=0, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$binop_add222.12']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=228, inst=BUILD_SLICE(arg=2, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$binop_add222.12', '$const226.13']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=230, inst=BINARY_SUBSCR(arg=None, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$228build_slice.15']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=240, inst=BUILD_TUPLE(arg=2, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$230binary_subscr.16']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=242, inst=PRECALL(arg=1, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$240build_tuple.17']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=246, inst=CALL(arg=1, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$240build_tuple.17']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=256, inst=RETURN_VALUE(arg=None, lineno=3504)
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$246call.18']
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=176 nstack_initial=0)])
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=166 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set()})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'idx': 0, 'res': '$26load_global.3'}), (28, {}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'item': '$26load_global.3', 'res': '$38load_attr.5'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'res': '$arr48.6'}), (50, {}), (52, {}), (54, {'func': '$38load_attr.5', 'args': ['$arr48.6'], 'kw_names': None, 'res': '$54call.7'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {'func': '$16load_attr.2', 'args': ['$54call.7'], 'kw_names': None, 'res': '$68call.8'}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'value': '$68call.8'}), (80, {'res': '$arr80.9'}), (82, {'item': '$arr80.9', 'res': '$82load_attr.10'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82load_attr.10'}), (94, {'res': '$obj94.11'}), (96, {'value': '$obj94.11'}), (98, {'res': '$pos98.12'}), (100, {'res': '$N100.13'}), (102, {'value': '$N100.13', 'res': '$102unary_negative.14'}), (104, {'lhs': '$pos98.12', 'rhs': '$102unary_negative.14', 'res': '$104compare_op.15'}), (106, {}), (108, {}), (110, {'pred': '$104compare_op.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: (), 124: ()})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$pos112.0'}), (114, {'res': '$N114.1'}), (116, {'lhs': '$pos112.0', 'rhs': '$N114.1', 'res': '$116compare_op.2'}), (118, {}), (120, {}), (122, {'pred': '$116compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 154: ()})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'idx': 4, 'res': '$124load_global.0'}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {}), (136, {'res': '$const136.2'}), (138, {}), (140, {}), (142, {'func': '$124load_global.0', 'args': ['$const136.2'], 'kw_names': None, 'res': '$142call.3'}), (144, {}), (146, {}), (148, {}), (150, {}), (152, {'exc': '$142call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$pos154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$pos154.0', 'rhs': '$const156.1', 'res': '$158compare_op.2'}), (160, {}), (162, {}), (164, {'pred': '$158compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={166: (), 176: ()})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=166 nstack_initial=0):
AdaptBlockInfo(insts=((166, {'res': '$pos166.0'}), (168, {'res': '$N168.1'}), (170, {'op': '+=', 'lhs': '$pos166.0', 'rhs': '$N168.1', 'res': '$binop_iadd170.2'}), (172, {}), (174, {'value': '$binop_iadd170.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: ()})
2024-08-01 17:59:43,984 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'idx': 0, 'res': '$176load_global.0'}), (178, {}), (180, {}), (182, {}), (184, {}), (186, {}), (188, {'item': '$176load_global.0', 'res': '$188load_attr.2'}), (190, {}), (192, {}), (194, {}), (196, {}), (198, {'res': '$arr198.3'}), (200, {'res': '$const200.4'}), (202, {'res': '$pos202.5'}), (204, {'start': '$const200.4', 'stop': '$pos202.5', 'step': None, 'res': '$204build_slice.7', 'slicevar': '$204build_slice.6'}), (206, {'index': '$204build_slice.7', 'target': '$arr198.3', 'res': '$206binary_subscr.8'}), (208, {}), (210, {}), (212, {}), (214, {}), (216, {'res': '$arr216.9'}), (218, {'res': '$pos218.10'}), (220, {'res': '$const220.11'}), (222, {'op': '+', 'lhs': '$pos218.10', 'rhs': '$const220.11', 'res': '$binop_add222.12'}), (224, {}), (226, {'res': '$const226.13'}), (228, {'start': '$binop_add222.12', 'stop': '$const226.13', 'step': None, 'res': '$228build_slice.15', 'slicevar': '$228build_slice.14'}), (230, {'index': '$228build_slice.15', 'target': '$arr216.9', 'res': '$230binary_subscr.16'}), (232, {}), (234, {}), (236, {}), (238, {}), (240, {'items': ['$206binary_subscr.8', '$230binary_subscr.16'], 'res': '$240build_tuple.17'}), (242, {}), (244, {}), (246, {'func': '$188load_attr.2', 'args': ['$240build_tuple.17'], 'kw_names': None, 'res': '$246call.18'}), (248, {}), (250, {}), (252, {}), (254, {}), (256, {'retval': '$246call.18', 'castval': '$256return_value.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:43,984 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    arr = arg(0, name=arr)                   ['arr']
    obj = arg(1, name=obj)                   ['obj']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=ravel) ['$16load_attr.2', '$4load_global.0']
    $26load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$26load_global.3']
    $38load_attr.5 = getattr(value=$26load_global.3, attr=asarray) ['$26load_global.3', '$38load_attr.5']
    $54call.7 = call $38load_attr.5(arr, func=$38load_attr.5, args=[Var(arr, arraymath.py:3491)], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_attr.5', '$54call.7', 'arr']
    arr.1 = call $16load_attr.2($54call.7, func=$16load_attr.2, args=[Var($54call.7, arraymath.py:3492)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$54call.7', 'arr.1']
    N = getattr(value=arr.1, attr=size)      ['N', 'arr.1']
    pos = obj                                ['obj', 'pos']
    $102unary_negative.14 = unary(fn=<built-in function neg>, value=N) ['$102unary_negative.14', 'N']
    $104compare_op.15 = pos < $102unary_negative.14 ['$102unary_negative.14', '$104compare_op.15', 'pos']
    bool110 = global(bool: <class 'bool'>)   ['bool110']
    $110pred = call bool110($104compare_op.15, func=bool110, args=(Var($104compare_op.15, arraymath.py:3496),), kws=(), vararg=None, varkwarg=None, target=None) ['$104compare_op.15', '$110pred', 'bool110']
    branch $110pred, 124, 112                ['$110pred']
label 112:
    $116compare_op.2 = pos >= N              ['$116compare_op.2', 'N', 'pos']
    bool122 = global(bool: <class 'bool'>)   ['bool122']
    $122pred = call bool122($116compare_op.2, func=bool122, args=(Var($116compare_op.2, arraymath.py:3496),), kws=(), vararg=None, varkwarg=None, target=None) ['$116compare_op.2', '$122pred', 'bool122']
    branch $122pred, 124, 154                ['$122pred']
label 124:
    $124load_global.0 = global(IndexError: <class 'IndexError'>) ['$124load_global.0']
    $const136.2 = const(str, obj must be less than the len(arr)) ['$const136.2']
    $142call.3 = call $124load_global.0($const136.2, func=$124load_global.0, args=[Var($const136.2, arraymath.py:3497)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_global.0', '$142call.3', '$const136.2']
    raise $142call.3                         ['$142call.3']
label 154:
    $const156.1 = const(int, 0)              ['$const156.1']
    $158compare_op.2 = pos < $const156.1     ['$158compare_op.2', '$const156.1', 'pos']
    bool164 = global(bool: <class 'bool'>)   ['bool164']
    $164pred = call bool164($158compare_op.2, func=bool164, args=(Var($158compare_op.2, arraymath.py:3501),), kws=(), vararg=None, varkwarg=None, target=None) ['$158compare_op.2', '$164pred', 'bool164']
    branch $164pred, 166, 176                ['$164pred']
label 166:
    $binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd170.2', 'N', 'pos']
    pos = $binop_iadd170.2                   ['$binop_iadd170.2', 'pos']
    jump 176                                 []
label 176:
    $176load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$176load_global.0']
    $188load_attr.2 = getattr(value=$176load_global.0, attr=concatenate) ['$176load_global.0', '$188load_attr.2']
    $const200.4 = const(NoneType, None)      ['$const200.4']
    $204build_slice.6 = global(slice: <class 'slice'>) ['$204build_slice.6']
    $204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3504), Var(pos, arraymath.py:3494)), kws=(), vararg=None, varkwarg=None, target=None) ['$204build_slice.6', '$204build_slice.7', '$const200.4', 'pos']
    $206binary_subscr.8 = getitem(value=arr.1, index=$204build_slice.7, fn=<built-in function getitem>) ['$204build_slice.7', '$206binary_subscr.8', 'arr.1']
    $const220.11 = const(int, 1)             ['$const220.11']
    $binop_add222.12 = pos + $const220.11    ['$binop_add222.12', '$const220.11', 'pos']
    $const226.13 = const(NoneType, None)     ['$const226.13']
    $228build_slice.14 = global(slice: <class 'slice'>) ['$228build_slice.14']
    $228build_slice.15 = call $228build_slice.14($binop_add222.12, $const226.13, func=$228build_slice.14, args=(Var($binop_add222.12, arraymath.py:3504), Var($const226.13, arraymath.py:3504)), kws=(), vararg=None, varkwarg=None, target=None) ['$228build_slice.14', '$228build_slice.15', '$binop_add222.12', '$const226.13']
    $230binary_subscr.16 = getitem(value=arr.1, index=$228build_slice.15, fn=<built-in function getitem>) ['$228build_slice.15', '$230binary_subscr.16', 'arr.1']
    $240build_tuple.17 = build_tuple(items=[Var($206binary_subscr.8, arraymath.py:3504), Var($230binary_subscr.16, arraymath.py:3504)]) ['$206binary_subscr.8', '$230binary_subscr.16', '$240build_tuple.17']
    $246call.18 = call $188load_attr.2($240build_tuple.17, func=$188load_attr.2, args=[Var($240build_tuple.17, arraymath.py:3504)], kws=(), vararg=None, varkwarg=None, target=None) ['$188load_attr.2', '$240build_tuple.17', '$246call.18']
    $256return_value.19 = cast(value=$246call.18) ['$246call.18', '$256return_value.19']
    return $256return_value.19               ['$256return_value.19']

2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = arg(0, name=arr)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: obj = arg(1, name=obj)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=ravel)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $26load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38load_attr.5 = getattr(value=$26load_global.3, attr=asarray)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $54call.7 = call $38load_attr.5(arr, func=$38load_attr.5, args=[Var(arr, arraymath.py:3491)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr.1 = call $16load_attr.2($54call.7, func=$16load_attr.2, args=[Var($54call.7, arraymath.py:3492)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: N = getattr(value=arr.1, attr=size)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = obj
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102unary_negative.14 = unary(fn=<built-in function neg>, value=N)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $104compare_op.15 = pos < $102unary_negative.14
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool110 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $110pred = call bool110($104compare_op.15, func=bool110, args=(Var($104compare_op.15, arraymath.py:3496),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $110pred, 124, 112
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 112
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116compare_op.2 = pos >= N
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool122 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $122pred = call bool122($116compare_op.2, func=bool122, args=(Var($116compare_op.2, arraymath.py:3496),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $122pred, 124, 154
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 124
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $124load_global.0 = global(IndexError: <class 'IndexError'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const136.2 = const(str, obj must be less than the len(arr))
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $142call.3 = call $124load_global.0($const136.2, func=$124load_global.0, args=[Var($const136.2, arraymath.py:3497)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'IndexError'>('obj must be less than the len(arr)')
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 154
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const156.1 = const(int, 0)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $158compare_op.2 = pos < $const156.1
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool164 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $164pred = call bool164($158compare_op.2, func=bool164, args=(Var($158compare_op.2, arraymath.py:3501),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $164pred, 166, 176
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 166
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = $binop_iadd170.2
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 176
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 176
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $176load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $188load_attr.2 = getattr(value=$176load_global.0, attr=concatenate)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.4 = const(NoneType, None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.6 = global(slice: <class 'slice'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3504), Var(pos, arraymath.py:3494)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206binary_subscr.8 = getitem(value=arr.1, index=$204build_slice.7, fn=<built-in function getitem>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const220.11 = const(int, 1)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add222.12 = pos + $const220.11
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const226.13 = const(NoneType, None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.14 = global(slice: <class 'slice'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.15 = call $228build_slice.14($binop_add222.12, $const226.13, func=$228build_slice.14, args=(Var($binop_add222.12, arraymath.py:3504), Var($const226.13, arraymath.py:3504)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $230binary_subscr.16 = getitem(value=arr.1, index=$228build_slice.15, fn=<built-in function getitem>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_tuple.17 = build_tuple(items=[Var($206binary_subscr.8, arraymath.py:3504), Var($230binary_subscr.16, arraymath.py:3504)])
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246call.18 = call $188load_attr.2($240build_tuple.17, func=$188load_attr.2, args=[Var($240build_tuple.17, arraymath.py:3504)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $256return_value.19 = cast(value=$246call.18)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $256return_value.19
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$102unary_negative.14': [<numba.core.ir.Assign object at 0x000001D63A26BD50>],
             '$104compare_op.15': [<numba.core.ir.Assign object at 0x000001D63A26BF90>],
             '$110pred': [<numba.core.ir.Assign object at 0x000001D63A248390>],
             '$116compare_op.2': [<numba.core.ir.Assign object at 0x000001D63A248790>],
             '$122pred': [<numba.core.ir.Assign object at 0x000001D63A248BD0>],
             '$124load_global.0': [<numba.core.ir.Assign object at 0x000001D63A248DD0>],
             '$142call.3': [<numba.core.ir.Assign object at 0x000001D63A2492D0>],
             '$158compare_op.2': [<numba.core.ir.Assign object at 0x000001D63A249990>],
             '$164pred': [<numba.core.ir.Assign object at 0x000001D63A249D50>],
             '$16load_attr.2': [<numba.core.ir.Assign object at 0x000001D63A26A2D0>],
             '$176load_global.0': [<numba.core.ir.Assign object at 0x000001D63A24A690>],
             '$188load_attr.2': [<numba.core.ir.Assign object at 0x000001D63A24A950>],
             '$204build_slice.6': [<numba.core.ir.Assign object at 0x000001D63A24B0D0>],
             '$204build_slice.7': [<numba.core.ir.Assign object at 0x000001D63A24B250>],
             '$206binary_subscr.8': [<numba.core.ir.Assign object at 0x000001D63A24B3D0>],
             '$228build_slice.14': [<numba.core.ir.Assign object at 0x000001D63A24BE50>],
             '$228build_slice.15': [<numba.core.ir.Assign object at 0x000001D63A24BFD0>],
             '$230binary_subscr.16': [<numba.core.ir.Assign object at 0x000001D63A330190>],
             '$240build_tuple.17': [<numba.core.ir.Assign object at 0x000001D63A330490>],
             '$246call.18': [<numba.core.ir.Assign object at 0x000001D63A330710>],
             '$256return_value.19': [<numba.core.ir.Assign object at 0x000001D63A330910>],
             '$26load_global.3': [<numba.core.ir.Assign object at 0x000001D63A26A510>],
             '$38load_attr.5': [<numba.core.ir.Assign object at 0x000001D63A26A7D0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D63A26A050>],
             '$54call.7': [<numba.core.ir.Assign object at 0x000001D63A26AC50>],
             '$binop_add222.12': [<numba.core.ir.Assign object at 0x000001D63A24BA90>],
             '$binop_iadd170.2': [<numba.core.ir.Assign object at 0x000001D63A24A390>],
             '$const136.2': [<numba.core.ir.Assign object at 0x000001D63A249090>],
             '$const156.1': [<numba.core.ir.Assign object at 0x000001D63A249790>],
             '$const200.4': [<numba.core.ir.Assign object at 0x000001D63A24AD10>],
             '$const220.11': [<numba.core.ir.Assign object at 0x000001D63A24B890>],
             '$const226.13': [<numba.core.ir.Assign object at 0x000001D63A24BC50>],
             'N': [<numba.core.ir.Assign object at 0x000001D63A26B3D0>],
             'arr': [<numba.core.ir.Assign object at 0x000001D63A2690D0>],
             'arr.1': [<numba.core.ir.Assign object at 0x000001D63A26AED0>],
             'bool110': [<numba.core.ir.Assign object at 0x000001D63A2481D0>],
             'bool122': [<numba.core.ir.Assign object at 0x000001D63A248A10>],
             'bool164': [<numba.core.ir.Assign object at 0x000001D63A249B90>],
             'obj': [<numba.core.ir.Assign object at 0x000001D63A268650>],
             'pos': [<numba.core.ir.Assign object at 0x000001D63A26B890>,
                     <numba.core.ir.Assign object at 0x000001D63A24A4D0>]})
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; SSA violators {'pos'}
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var pos
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = arg(0, name=arr)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: obj = arg(1, name=obj)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=ravel)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $26load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38load_attr.5 = getattr(value=$26load_global.3, attr=asarray)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $54call.7 = call $38load_attr.5(arr, func=$38load_attr.5, args=[Var(arr, arraymath.py:3491)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr.1 = call $16load_attr.2($54call.7, func=$16load_attr.2, args=[Var($54call.7, arraymath.py:3492)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: N = getattr(value=arr.1, attr=size)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = obj
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; first assign: pos
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; replaced with: pos = obj
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102unary_negative.14 = unary(fn=<built-in function neg>, value=N)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $104compare_op.15 = pos < $102unary_negative.14
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool110 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $110pred = call bool110($104compare_op.15, func=bool110, args=(Var($104compare_op.15, arraymath.py:3496),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $110pred, 124, 112
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 112
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116compare_op.2 = pos >= N
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool122 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $122pred = call bool122($116compare_op.2, func=bool122, args=(Var($116compare_op.2, arraymath.py:3496),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $122pred, 124, 154
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 124
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $124load_global.0 = global(IndexError: <class 'IndexError'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const136.2 = const(str, obj must be less than the len(arr))
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $142call.3 = call $124load_global.0($const136.2, func=$124load_global.0, args=[Var($const136.2, arraymath.py:3497)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'IndexError'>('obj must be less than the len(arr)')
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 154
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const156.1 = const(int, 0)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $158compare_op.2 = pos < $const156.1
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool164 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $164pred = call bool164($158compare_op.2, func=bool164, args=(Var($158compare_op.2, arraymath.py:3501),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $164pred, 166, 176
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 166
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = $binop_iadd170.2
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; replaced with: pos.1 = $binop_iadd170.2
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 176
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 176
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A24BD10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $176load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $188load_attr.2 = getattr(value=$176load_global.0, attr=concatenate)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.4 = const(NoneType, None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.6 = global(slice: <class 'slice'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3504), Var(pos, arraymath.py:3494)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206binary_subscr.8 = getitem(value=arr.1, index=$204build_slice.7, fn=<built-in function getitem>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const220.11 = const(int, 1)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add222.12 = pos + $const220.11
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const226.13 = const(NoneType, None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.14 = global(slice: <class 'slice'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.15 = call $228build_slice.14($binop_add222.12, $const226.13, func=$228build_slice.14, args=(Var($binop_add222.12, arraymath.py:3504), Var($const226.13, arraymath.py:3504)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $230binary_subscr.16 = getitem(value=arr.1, index=$228build_slice.15, fn=<built-in function getitem>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_tuple.17 = build_tuple(items=[Var($206binary_subscr.8, arraymath.py:3504), Var($230binary_subscr.16, arraymath.py:3504)])
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246call.18 = call $188load_attr.2($240build_tuple.17, func=$188load_attr.2, args=[Var($240build_tuple.17, arraymath.py:3504)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $256return_value.19 = cast(value=$246call.18)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $256return_value.19
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001D63A033A50>],
             166: [<numba.core.ir.Assign object at 0x000001D63A3867D0>]})
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A386E10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = arg(0, name=arr)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: obj = arg(1, name=obj)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=ravel)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $26load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38load_attr.5 = getattr(value=$26load_global.3, attr=asarray)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $54call.7 = call $38load_attr.5(arr, func=$38load_attr.5, args=[Var(arr, arraymath.py:3491)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr.1 = call $16load_attr.2($54call.7, func=$16load_attr.2, args=[Var($54call.7, arraymath.py:3492)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: N = getattr(value=arr.1, attr=size)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = obj
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102unary_negative.14 = unary(fn=<built-in function neg>, value=N)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $104compare_op.15 = pos < $102unary_negative.14
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$104compare_op.15 = pos < $102unary_negative.14
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool110 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $110pred = call bool110($104compare_op.15, func=bool110, args=(Var($104compare_op.15, arraymath.py:3496),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $110pred, 124, 112
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 112
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A386E10>
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116compare_op.2 = pos >= N
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$116compare_op.2 = pos >= N
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 112
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; idom 0 from label 112
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-08-01 17:59:44,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool122 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $122pred = call bool122($116compare_op.2, func=bool122, args=(Var($116compare_op.2, arraymath.py:3496),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $122pred, 124, 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 124
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A386E10>
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $124load_global.0 = global(IndexError: <class 'IndexError'>)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const136.2 = const(str, obj must be less than the len(arr))
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $142call.3 = call $124load_global.0($const136.2, func=$124load_global.0, args=[Var($const136.2, arraymath.py:3497)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'IndexError'>('obj must be less than the len(arr)')
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A386E10>
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const156.1 = const(int, 0)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $158compare_op.2 = pos < $const156.1
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$158compare_op.2 = pos < $const156.1
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; idom 112 from label 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; idom 0 from label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool164 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $164pred = call bool164($158compare_op.2, func=bool164, args=(Var($158compare_op.2, arraymath.py:3501),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $164pred, 166, 176
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 166
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A386E10>
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 166
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; idom 154 from label 166
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; idom 112 from label 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; idom 0 from label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos.1 = $binop_iadd170.2
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 176
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 176
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A386E10>
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $176load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\wolters\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $188load_attr.2 = getattr(value=$176load_global.0, attr=concatenate)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.4 = const(NoneType, None)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.6 = global(slice: <class 'slice'>)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3504), Var(pos, arraymath.py:3494)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3504), Var(pos, arraymath.py:3494)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 176
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; insert phi node pos.2 = phi(incoming_values=[], incoming_blocks=[]) at 176
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; idom 112 from label 154
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; idom 0 from label 112
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; incoming_def pos = obj
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 166
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; incoming_def pos.1 = $binop_iadd170.2
2024-08-01 17:59:44,027 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $204build_slice.7 = call $204build_slice.6($const200.4, pos.2, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3504), Var(pos.2, arraymath.py:3504)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206binary_subscr.8 = getitem(value=arr.1, index=$204build_slice.7, fn=<built-in function getitem>)
2024-08-01 17:59:44,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const220.11 = const(int, 1)
2024-08-01 17:59:44,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add222.12 = pos + $const220.11
2024-08-01 17:59:44,032 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$binop_add222.12 = pos + $const220.11
2024-08-01 17:59:44,032 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_add222.12 = pos.2 + $const220.11
2024-08-01 17:59:44,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const226.13 = const(NoneType, None)
2024-08-01 17:59:44,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.14 = global(slice: <class 'slice'>)
2024-08-01 17:59:44,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.15 = call $228build_slice.14($binop_add222.12, $const226.13, func=$228build_slice.14, args=(Var($binop_add222.12, arraymath.py:3504), Var($const226.13, arraymath.py:3504)), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,033 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $230binary_subscr.16 = getitem(value=arr.1, index=$228build_slice.15, fn=<built-in function getitem>)
2024-08-01 17:59:44,033 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_tuple.17 = build_tuple(items=[Var($206binary_subscr.8, arraymath.py:3504), Var($230binary_subscr.16, arraymath.py:3504)])
2024-08-01 17:59:44,033 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246call.18 = call $188load_attr.2($240build_tuple.17, func=$188load_attr.2, args=[Var($240build_tuple.17, arraymath.py:3504)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,033 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $256return_value.19 = cast(value=$246call.18)
2024-08-01 17:59:44,033 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $256return_value.19
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4252)
           2	RESUME(arg=0, lineno=4252)
           4	LOAD_FAST(arg=0, lineno=4253)
           6	RETURN_VALUE(arg=None, lineno=4253)
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4252)
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4252)
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4253)
2024-08-01 17:59:44,040 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=4253)
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$a4.0']
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:44,041 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'retval': '$a4.0', 'castval': '$6return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,041 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $6return_value.1 = cast(value=a)         ['$6return_value.1', 'a']
    return $6return_value.1                  ['$6return_value.1']

2024-08-01 17:59:44,044 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:44,044 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A385BD0>
2024-08-01 17:59:44,044 ; numba.core.ssa                                               ; DEBUG   ; on stmt: a = arg(0, name=a)
2024-08-01 17:59:44,044 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-08-01 17:59:44,044 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6return_value.1 = cast(value=a)
2024-08-01 17:59:44,044 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $6return_value.1
2024-08-01 17:59:44,044 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$6return_value.1': [<numba.core.ir.Assign object at 0x000001D63A385990>],
             'a': [<numba.core.ir.Assign object at 0x000001D63A384510>],
             'dtype': [<numba.core.ir.Assign object at 0x000001D63A384BD0>]})
2024-08-01 17:59:44,044 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=5697)
           2	RESUME(arg=0, lineno=5697)
           4	LOAD_GLOBAL(arg=1, lineno=5698)
          16	LOAD_FAST(arg=0, lineno=5698)
          18	LOAD_FAST(arg=1, lineno=5698)
          20	PRECALL(arg=2, lineno=5698)
          24	CALL(arg=2, lineno=5698)
          34	RETURN_VALUE(arg=None, lineno=5698)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=5697)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=5697)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=5698)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=5698)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=5698)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$arrays16.2']
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=PRECALL(arg=2, lineno=5698)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$arrays16.2', '$axis18.3']
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=CALL(arg=2, lineno=5698)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$arrays16.2', '$axis18.3']
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=5698)
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$24call.4']
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:44,062 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$arrays16.2'}), (18, {'res': '$axis18.3'}), (20, {}), (22, {}), (24, {'func': '$4load_global.0', 'args': ['$arrays16.2', '$axis18.3'], 'kw_names': None, 'res': '$24call.4'}), (26, {}), (28, {}), (30, {}), (32, {}), (34, {'retval': '$24call.4', 'castval': '$34return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,062 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    arrays = arg(0, name=arrays)             ['arrays']
    axis = arg(1, name=axis)                 ['axis']
    $4load_global.0 = global(np_concatenate: <intrinsic np_concatenate>) ['$4load_global.0']
    $24call.4 = call $4load_global.0(arrays, axis, func=$4load_global.0, args=[Var(arrays, arrayobj.py:5697), Var(axis, arrayobj.py:5697)], kws=(), vararg=None, varkwarg=None, target=None) ['$24call.4', '$4load_global.0', 'arrays', 'axis']
    $34return_value.5 = cast(value=$24call.4) ['$24call.4', '$34return_value.5']
    return $34return_value.5                 ['$34return_value.5']

2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A2CB0D0>
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arrays = arg(0, name=arrays)
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; on stmt: axis = arg(1, name=axis)
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np_concatenate: <intrinsic np_concatenate>)
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $24call.4 = call $4load_global.0(arrays, axis, func=$4load_global.0, args=[Var(arrays, arrayobj.py:5697), Var(axis, arrayobj.py:5697)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34return_value.5 = cast(value=$24call.4)
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $34return_value.5
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$24call.4': [<numba.core.ir.Assign object at 0x000001D63A2C9F10>],
             '$34return_value.5': [<numba.core.ir.Assign object at 0x000001D63A2C9550>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x000001D63A2C9150>],
             'arrays': [<numba.core.ir.Assign object at 0x000001D63A2C8350>],
             'axis': [<numba.core.ir.Assign object at 0x000001D63A2C89D0>]})
2024-08-01 17:59:44,062 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=2134)
           2	RESUME(arg=0, lineno=2134)
           4	LOAD_FAST(arg=0, lineno=2135)
           6	LOAD_METHOD(arg=0, lineno=2135)
          28	PRECALL(arg=0, lineno=2135)
          32	CALL(arg=0, lineno=2135)
          42	RETURN_VALUE(arg=None, lineno=2135)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=2134)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=2134)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2135)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_METHOD(arg=0, lineno=2135)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$a4.0']
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=PRECALL(arg=0, lineno=2135)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2']
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=CALL(arg=0, lineno=2135)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2']
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=2135)
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$32call.3']
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:44,110 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'item': '$a4.0', 'res': '$6load_method.2'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'func': '$6load_method.2', 'args': [], 'kw_names': None, 'res': '$32call.3'}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {'retval': '$32call.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,110 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    a = arg(0, name=a)                       ['a']
    $6load_method.2 = getattr(value=a, attr=ravel) ['$6load_method.2', 'a']
    $32call.3 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$32call.3', '$6load_method.2']
    $42return_value.4 = cast(value=$32call.3) ['$32call.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A2BE550>
2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: a = arg(0, name=a)
2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_method.2 = getattr(value=a, attr=ravel)
2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $32call.3 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42return_value.4 = cast(value=$32call.3)
2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $42return_value.4
2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$32call.3': [<numba.core.ir.Assign object at 0x000001D63A2453D0>],
             '$42return_value.4': [<numba.core.ir.Assign object at 0x000001D63A246D50>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x000001D63A246E90>],
             'a': [<numba.core.ir.Assign object at 0x000001D63A246A90>]})
2024-08-01 17:59:44,119 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=2112)
           2	RESUME(arg=0, lineno=2112)
           4	LOAD_FAST(arg=0, lineno=2114)
           6	LOAD_METHOD(arg=0, lineno=2114)
          28	LOAD_FAST(arg=0, lineno=2114)
          30	LOAD_ATTR(arg=1, lineno=2114)
          40	PRECALL(arg=1, lineno=2114)
          44	CALL(arg=1, lineno=2114)
          54	RETURN_VALUE(arg=None, lineno=2114)
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=2112)
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=2112)
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2114)
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_METHOD(arg=0, lineno=2114)
2024-08-01 17:59:44,125 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$ary4.0']
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=2114)
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2']
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=LOAD_ATTR(arg=1, lineno=2114)
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$ary28.3']
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=40, inst=PRECALL(arg=1, lineno=2114)
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$30load_attr.4']
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=44, inst=CALL(arg=1, lineno=2114)
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$30load_attr.4']
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=2114)
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$44call.5']
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-08-01 17:59:44,126 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$ary4.0'}), (6, {'item': '$ary4.0', 'res': '$6load_method.2'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'res': '$ary28.3'}), (30, {'item': '$ary28.3', 'res': '$30load_attr.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'func': '$6load_method.2', 'args': ['$30load_attr.4'], 'kw_names': None, 'res': '$44call.5'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {'retval': '$44call.5', 'castval': '$54return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,127 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    ary = arg(0, name=ary)                   ['ary']
    $6load_method.2 = getattr(value=ary, attr=reshape) ['$6load_method.2', 'ary']
    $30load_attr.4 = getattr(value=ary, attr=size) ['$30load_attr.4', 'ary']
    $44call.5 = call $6load_method.2($30load_attr.4, func=$6load_method.2, args=[Var($30load_attr.4, arrayobj.py:2114)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_attr.4', '$44call.5', '$6load_method.2']
    $54return_value.6 = cast(value=$44call.5) ['$44call.5', '$54return_value.6']
    return $54return_value.6                 ['$54return_value.6']

2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A237110>
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ary = arg(0, name=ary)
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_method.2 = getattr(value=ary, attr=reshape)
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30load_attr.4 = getattr(value=ary, attr=size)
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44call.5 = call $6load_method.2($30load_attr.4, func=$6load_method.2, args=[Var($30load_attr.4, arrayobj.py:2114)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $54return_value.6 = cast(value=$44call.5)
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $54return_value.6
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$30load_attr.4': [<numba.core.ir.Assign object at 0x000001D63A1DE210>],
             '$44call.5': [<numba.core.ir.Assign object at 0x000001D63A1DC790>],
             '$54return_value.6': [<numba.core.ir.Assign object at 0x000001D63A1DC5D0>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x000001D63A1DE090>],
             'ary': [<numba.core.ir.Assign object at 0x000001D63A1DDE10>]})
2024-08-01 17:59:44,127 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=1975)
           2	RESUME(arg=0, lineno=1975)
           4	LOAD_CONST(arg=1, lineno=1976)
           6	STORE_FAST(arg=2, lineno=1976)
           8	LOAD_CONST(arg=2, lineno=1977)
          10	STORE_FAST(arg=3, lineno=1977)
          12	LOAD_GLOBAL(arg=1, lineno=1978)
          24	LOAD_FAST(arg=1, lineno=1978)
          26	PRECALL(arg=1, lineno=1978)
          30	CALL(arg=1, lineno=1978)
          40	GET_ITER(arg=None, lineno=1978)
>         42	FOR_ITER(arg=24, lineno=1978)
          44	UNPACK_SEQUENCE(arg=2, lineno=1978)
          48	STORE_FAST(arg=4, lineno=1978)
          50	STORE_FAST(arg=5, lineno=1978)
          52	LOAD_FAST(arg=5, lineno=1979)
          54	LOAD_CONST(arg=1, lineno=1979)
          56	COMPARE_OP(arg=0, lineno=1979)
          62	POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=1979)
          64	LOAD_FAST(arg=2, lineno=1980)
          66	LOAD_CONST(arg=2, lineno=1980)
          68	BINARY_OP(arg=13, lineno=1980)
          72	STORE_FAST(arg=2, lineno=1980)
          74	LOAD_FAST(arg=4, lineno=1981)
          76	STORE_FAST(arg=6, lineno=1981)
          78	JUMP_BACKWARD(arg=19, lineno=1981)
>         80	LOAD_FAST(arg=3, lineno=1983)
          82	LOAD_FAST(arg=5, lineno=1983)
          84	BINARY_OP(arg=18, lineno=1983)
          88	STORE_FAST(arg=3, lineno=1983)
          90	JUMP_BACKWARD(arg=25, lineno=1983)
>         92	LOAD_FAST(arg=2, lineno=1985)
          94	LOAD_CONST(arg=1, lineno=1985)
          96	COMPARE_OP(arg=2, lineno=1985)
         102	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=1985)
         104	LOAD_FAST(arg=0, lineno=1986)
         106	LOAD_FAST(arg=3, lineno=1986)
         108	COMPARE_OP(arg=3, lineno=1986)
         114	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=1986)
         116	LOAD_GLOBAL(arg=3, lineno=1987)
         128	LOAD_CONST(arg=3, lineno=1987)
         130	PRECALL(arg=1, lineno=1987)
         134	CALL(arg=1, lineno=1987)
         144	RAISE_VARARGS(arg=1, lineno=1987)
>        146	LOAD_CONST(arg=0, lineno=1986)
         148	RETURN_VALUE(arg=None, lineno=1986)
>        150	LOAD_FAST(arg=2, lineno=1989)
         152	LOAD_CONST(arg=2, lineno=1989)
         154	COMPARE_OP(arg=2, lineno=1989)
         160	POP_JUMP_FORWARD_IF_FALSE(arg=53, lineno=1989)
         162	LOAD_FAST(arg=3, lineno=1991)
         164	LOAD_CONST(arg=1, lineno=1991)
         166	COMPARE_OP(arg=2, lineno=1991)
         172	POP_JUMP_FORWARD_IF_FALSE(arg=9, lineno=1991)
         174	LOAD_CONST(arg=1, lineno=1992)
         176	STORE_FAST(arg=7, lineno=1992)
         178	LOAD_FAST(arg=0, lineno=1993)
         180	LOAD_CONST(arg=1, lineno=1993)
         182	COMPARE_OP(arg=2, lineno=1993)
         188	STORE_FAST(arg=8, lineno=1993)
         190	JUMP_FORWARD(arg=14, lineno=1993)
>        192	LOAD_FAST(arg=0, lineno=1995)
         194	LOAD_FAST(arg=3, lineno=1995)
         196	BINARY_OP(arg=2, lineno=1995)
         200	STORE_FAST(arg=7, lineno=1995)
         202	LOAD_FAST(arg=0, lineno=1996)
         204	LOAD_FAST(arg=3, lineno=1996)
         206	BINARY_OP(arg=6, lineno=1996)
         210	LOAD_CONST(arg=1, lineno=1996)
         212	COMPARE_OP(arg=2, lineno=1996)
         218	STORE_FAST(arg=8, lineno=1996)
>        220	LOAD_FAST(arg=8, lineno=1997)
         222	POP_JUMP_FORWARD_IF_TRUE(arg=15, lineno=1997)
         224	LOAD_GLOBAL(arg=3, lineno=1998)
         236	LOAD_CONST(arg=3, lineno=1998)
         238	PRECALL(arg=1, lineno=1998)
         242	CALL(arg=1, lineno=1998)
         252	RAISE_VARARGS(arg=1, lineno=1998)
>        254	LOAD_FAST(arg=7, lineno=1999)
         256	LOAD_FAST(arg=1, lineno=1999)
         258	LOAD_FAST(arg=6, lineno=1999)
         260	STORE_SUBSCR(arg=None, lineno=1999)
         264	LOAD_CONST(arg=0, lineno=1999)
         266	RETURN_VALUE(arg=None, lineno=1999)
>        268	LOAD_GLOBAL(arg=3, lineno=2002)
         280	LOAD_CONST(arg=4, lineno=2002)
         282	PRECALL(arg=1, lineno=2002)
         286	CALL(arg=1, lineno=2002)
         296	RAISE_VARARGS(arg=1, lineno=2002)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=1975)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=1975)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1976)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=STORE_FAST(arg=2, lineno=1976)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const4.0']
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=1977)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=10, inst=STORE_FAST(arg=3, lineno=1977)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const8.1']
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=1978)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1978)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$12.3', '$12load_global.2']
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=PRECALL(arg=1, lineno=1978)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$12.3', '$12load_global.2', '$shape24.4']
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=CALL(arg=1, lineno=1978)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$12.3', '$12load_global.2', '$shape24.4']
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=40, inst=GET_ITER(arg=None, lineno=1978)
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$30call.5']
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=42, stack=('$40get_iter.6',), blockstack=(), npush=0)]
2024-08-01 17:59:44,127 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=42 nstack_initial=1)])
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi42.0']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=42 nstack_initial=1)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=42, inst=FOR_ITER(arg=24, lineno=1978)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi42.0']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=('$phi42.0', '$42for_iter.2'), blockstack=(), npush=0)]
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=44 nstack_initial=2)])
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=92 nstack_initial=0)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=1985)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=94, inst=LOAD_CONST(arg=1, lineno=1985)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$num_neg_value92.0']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=96, inst=COMPARE_OP(arg=2, lineno=1985)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$num_neg_value92.0', '$const94.1']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=102, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=1985)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$96compare_op.2']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=44 nstack_initial=2), State(pc_initial=104 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi44.0', '$phi44.1']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=44 nstack_initial=2)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=44, inst=UNPACK_SEQUENCE(arg=2, lineno=1978)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$phi44.1']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=STORE_FAST(arg=4, lineno=1978)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$44unpack_sequence.3', '$44unpack_sequence.2']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=STORE_FAST(arg=5, lineno=1978)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$44unpack_sequence.3']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1979)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1979)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$s52.5']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=56, inst=COMPARE_OP(arg=0, lineno=1979)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$s52.5', '$const54.6']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=62, inst=POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=1979)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$56compare_op.7']
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=64, stack=('$phi44.0',), blockstack=(), npush=0), Edge(pc=80, stack=('$phi44.0',), blockstack=(), npush=0)]
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=150 nstack_initial=0), State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1)])
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=104 nstack_initial=0)
2024-08-01 17:59:44,139 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=1986)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1986)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize104.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=108, inst=COMPARE_OP(arg=3, lineno=1986)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize104.0', '$known_size106.1']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=114, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=1986)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$108compare_op.2']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=116, stack=(), blockstack=(), npush=0), Edge(pc=146, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=150 nstack_initial=0)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=150, inst=LOAD_FAST(arg=2, lineno=1989)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=152, inst=LOAD_CONST(arg=2, lineno=1989)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$num_neg_value150.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=154, inst=COMPARE_OP(arg=2, lineno=1989)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$num_neg_value150.0', '$const152.1']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=160, inst=POP_JUMP_FORWARD_IF_FALSE(arg=53, lineno=1989)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$154compare_op.2']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=162, stack=(), blockstack=(), npush=0), Edge(pc=268, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0)])
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi64.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=64 nstack_initial=1)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=1980)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=1980)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0', '$num_neg_value64.1']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=68, inst=BINARY_OP(arg=13, lineno=1980)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0', '$num_neg_value64.1', '$const66.2']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=STORE_FAST(arg=2, lineno=1980)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0', '$binop_iadd68.3']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=1981)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=76, inst=STORE_FAST(arg=6, lineno=1981)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0', '$ax74.4']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=78, inst=JUMP_BACKWARD(arg=19, lineno=1981)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=42, stack=('$phi64.0',), blockstack=(), npush=0)]
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1)])
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi80.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=1983)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=1983)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0', '$known_size80.1']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=84, inst=BINARY_OP(arg=18, lineno=1983)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0', '$known_size80.1', '$s82.2']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=88, inst=STORE_FAST(arg=3, lineno=1983)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0', '$binop_imul84.3']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=90, inst=JUMP_BACKWARD(arg=25, lineno=1983)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=42, stack=('$phi80.0',), blockstack=(), npush=0)]
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=116 nstack_initial=0)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=116, inst=LOAD_GLOBAL(arg=3, lineno=1987)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=128, inst=LOAD_CONST(arg=3, lineno=1987)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$116.1', '$116load_global.0']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=130, inst=PRECALL(arg=1, lineno=1987)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$116.1', '$116load_global.0', '$const128.2']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=134, inst=CALL(arg=1, lineno=1987)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$116.1', '$116load_global.0', '$const128.2']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=144, inst=RAISE_VARARGS(arg=1, lineno=1987)
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$134call.3']
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,141 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=146 nstack_initial=0)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=146, inst=LOAD_CONST(arg=0, lineno=1986)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=148, inst=RETURN_VALUE(arg=None, lineno=1986)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const146.0']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=162 nstack_initial=0)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=162, inst=LOAD_FAST(arg=3, lineno=1991)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1991)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$known_size162.0']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=166, inst=COMPARE_OP(arg=2, lineno=1991)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$known_size162.0', '$const164.1']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=172, inst=POP_JUMP_FORWARD_IF_FALSE(arg=9, lineno=1991)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$166compare_op.2']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=174, stack=(), blockstack=(), npush=0), Edge(pc=192, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=268 nstack_initial=0)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=268, inst=LOAD_GLOBAL(arg=3, lineno=2002)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=280, inst=LOAD_CONST(arg=4, lineno=2002)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$268.1', '$268load_global.0']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=282, inst=PRECALL(arg=1, lineno=2002)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$268.1', '$268load_global.0', '$const280.2']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=286, inst=CALL(arg=1, lineno=2002)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$268.1', '$268load_global.0', '$const280.2']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=296, inst=RAISE_VARARGS(arg=1, lineno=2002)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$286call.3']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=174 nstack_initial=0)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=174, inst=LOAD_CONST(arg=1, lineno=1992)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=176, inst=STORE_FAST(arg=7, lineno=1992)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const174.0']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1993)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=180, inst=LOAD_CONST(arg=1, lineno=1993)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize178.1']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=182, inst=COMPARE_OP(arg=2, lineno=1993)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize178.1', '$const180.2']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=188, inst=STORE_FAST(arg=8, lineno=1993)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$182compare_op.3']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=190, inst=JUMP_FORWARD(arg=14, lineno=1993)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=220 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=192 nstack_initial=0)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=192, inst=LOAD_FAST(arg=0, lineno=1995)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=194, inst=LOAD_FAST(arg=3, lineno=1995)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize192.0']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=196, inst=BINARY_OP(arg=2, lineno=1995)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize192.0', '$known_size194.1']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=200, inst=STORE_FAST(arg=7, lineno=1995)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$binop_floordiv196.2']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=1996)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=204, inst=LOAD_FAST(arg=3, lineno=1996)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize202.3']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=206, inst=BINARY_OP(arg=6, lineno=1996)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize202.3', '$known_size204.4']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=210, inst=LOAD_CONST(arg=1, lineno=1996)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$binop_mod206.5']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=212, inst=COMPARE_OP(arg=2, lineno=1996)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$binop_mod206.5', '$const210.6']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=218, inst=STORE_FAST(arg=8, lineno=1996)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$212compare_op.7']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=220 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=220 nstack_initial=0)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=220, inst=LOAD_FAST(arg=8, lineno=1997)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=222, inst=POP_JUMP_FORWARD_IF_TRUE(arg=15, lineno=1997)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$ok220.0']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=224, stack=(), blockstack=(), npush=0), Edge(pc=254, stack=(), blockstack=(), npush=0)]
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=224 nstack_initial=0), State(pc_initial=254 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=224 nstack_initial=0), State(pc_initial=254 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=224 nstack_initial=0)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=224, inst=LOAD_GLOBAL(arg=3, lineno=1998)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=236, inst=LOAD_CONST(arg=3, lineno=1998)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$224.1', '$224load_global.0']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=238, inst=PRECALL(arg=1, lineno=1998)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$224.1', '$224load_global.0', '$const236.2']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=242, inst=CALL(arg=1, lineno=1998)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$224.1', '$224load_global.0', '$const236.2']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=252, inst=RAISE_VARARGS(arg=1, lineno=1998)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$242call.3']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=254 nstack_initial=0)])
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=254 nstack_initial=0)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=254, inst=LOAD_FAST(arg=7, lineno=1999)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=256, inst=LOAD_FAST(arg=1, lineno=1999)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$inferred254.0']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=258, inst=LOAD_FAST(arg=6, lineno=1999)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$inferred254.0', '$shape256.1']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=1999)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$inferred254.0', '$shape256.1', '$neg_ax258.2']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=264, inst=LOAD_CONST(arg=0, lineno=1999)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=266, inst=RETURN_VALUE(arg=None, lineno=1999)
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const264.3']
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=1): {'$phi42.0'},
             State(pc_initial=44 nstack_initial=2): {'$phi44.1'},
             State(pc_initial=64 nstack_initial=1): set(),
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=162 nstack_initial=0): set(),
             State(pc_initial=174 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=220 nstack_initial=0): set(),
             State(pc_initial=224 nstack_initial=0): set(),
             State(pc_initial=254 nstack_initial=0): set(),
             State(pc_initial=268 nstack_initial=0): set()})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {'$phi42.0': State(pc_initial=0 nstack_initial=0),
 '$phi44.1': State(pc_initial=42 nstack_initial=1)}
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi44.0': {('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi80.0': {('$phi44.0', State(pc_initial=44 nstack_initial=2))}})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {'$phi42.0': {('$40get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi44.1': {('$42for_iter.2', State(pc_initial=42 nstack_initial=1))}}
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi42.0': '$40get_iter.6'},
             State(pc_initial=42 nstack_initial=1): {'$phi44.1': '$42for_iter.2'}})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$const4.0'}), (6, {'value': '$const4.0'}), (8, {'res': '$const8.1'}), (10, {'value': '$const8.1'}), (12, {'idx': 0, 'res': '$12load_global.2'}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {'res': '$shape24.4'}), (26, {}), (28, {}), (30, {'func': '$12load_global.2', 'args': ['$shape24.4'], 'kw_names': None, 'res': '$30call.5'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {'value': '$30call.5', 'res': '$40get_iter.6'})), outgoing_phis={'$phi42.0': '$40get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$40get_iter.6',)})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=42 nstack_initial=1):
AdaptBlockInfo(insts=((42, {'iterator': '$phi42.0', 'pair': '$42for_iter.1', 'indval': '$42for_iter.2', 'pred': '$42for_iter.3'}),), outgoing_phis={'$phi44.1': '$42for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 44: ('$phi42.0', '$42for_iter.2')})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=44 nstack_initial=2):
AdaptBlockInfo(insts=((44, {'iterable': '$phi44.1', 'stores': ['$44unpack_sequence.2', '$44unpack_sequence.3'], 'tupleobj': '$44unpack_sequence.4'}), (46, {}), (48, {'value': '$44unpack_sequence.2'}), (50, {'value': '$44unpack_sequence.3'}), (52, {'res': '$s52.5'}), (54, {'res': '$const54.6'}), (56, {'lhs': '$s52.5', 'rhs': '$const54.6', 'res': '$56compare_op.7'}), (58, {}), (60, {}), (62, {'pred': '$56compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi44.0',), 80: ('$phi44.0',)})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'res': '$num_neg_value64.1'}), (66, {'res': '$const66.2'}), (68, {'op': '+=', 'lhs': '$num_neg_value64.1', 'rhs': '$const66.2', 'res': '$binop_iadd68.3'}), (70, {}), (72, {'value': '$binop_iadd68.3'}), (74, {'res': '$ax74.4'}), (76, {'value': '$ax74.4'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$phi64.0',)})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$known_size80.1'}), (82, {'res': '$s82.2'}), (84, {'op': '*=', 'lhs': '$known_size80.1', 'rhs': '$s82.2', 'res': '$binop_imul84.3'}), (86, {}), (88, {'value': '$binop_imul84.3'}), (90, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$phi80.0',)})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$num_neg_value92.0'}), (94, {'res': '$const94.1'}), (96, {'lhs': '$num_neg_value92.0', 'rhs': '$const94.1', 'res': '$96compare_op.2'}), (98, {}), (100, {}), (102, {'pred': '$96compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 150: ()})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$origsize104.0'}), (106, {'res': '$known_size106.1'}), (108, {'lhs': '$origsize104.0', 'rhs': '$known_size106.1', 'res': '$108compare_op.2'}), (110, {}), (112, {}), (114, {'pred': '$108compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: (), 146: ()})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'idx': 1, 'res': '$116load_global.0'}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {'res': '$const128.2'}), (130, {}), (132, {}), (134, {'func': '$116load_global.0', 'args': ['$const128.2'], 'kw_names': None, 'res': '$134call.3'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {'exc': '$134call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$const146.0'}), (148, {'retval': '$const146.0', 'castval': '$148return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$num_neg_value150.0'}), (152, {'res': '$const152.1'}), (154, {'lhs': '$num_neg_value150.0', 'rhs': '$const152.1', 'res': '$154compare_op.2'}), (156, {}), (158, {}), (160, {'pred': '$154compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={162: (), 268: ()})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=162 nstack_initial=0):
AdaptBlockInfo(insts=((162, {'res': '$known_size162.0'}), (164, {'res': '$const164.1'}), (166, {'lhs': '$known_size162.0', 'rhs': '$const164.1', 'res': '$166compare_op.2'}), (168, {}), (170, {}), (172, {'pred': '$166compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={174: (), 192: ()})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=((174, {'res': '$const174.0'}), (176, {'value': '$const174.0'}), (178, {'res': '$origsize178.1'}), (180, {'res': '$const180.2'}), (182, {'lhs': '$origsize178.1', 'rhs': '$const180.2', 'res': '$182compare_op.3'}), (184, {}), (186, {}), (188, {'value': '$182compare_op.3'}), (190, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: ()})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$origsize192.0'}), (194, {'res': '$known_size194.1'}), (196, {'op': '//', 'lhs': '$origsize192.0', 'rhs': '$known_size194.1', 'res': '$binop_floordiv196.2'}), (198, {}), (200, {'value': '$binop_floordiv196.2'}), (202, {'res': '$origsize202.3'}), (204, {'res': '$known_size204.4'}), (206, {'op': '%', 'lhs': '$origsize202.3', 'rhs': '$known_size204.4', 'res': '$binop_mod206.5'}), (208, {}), (210, {'res': '$const210.6'}), (212, {'lhs': '$binop_mod206.5', 'rhs': '$const210.6', 'res': '$212compare_op.7'}), (214, {}), (216, {}), (218, {'value': '$212compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: ()})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=220 nstack_initial=0):
AdaptBlockInfo(insts=((220, {'res': '$ok220.0'}), (222, {'pred': '$ok220.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: (), 254: ()})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=224 nstack_initial=0):
AdaptBlockInfo(insts=((224, {'idx': 1, 'res': '$224load_global.0'}), (226, {}), (228, {}), (230, {}), (232, {}), (234, {}), (236, {'res': '$const236.2'}), (238, {}), (240, {}), (242, {'func': '$224load_global.0', 'args': ['$const236.2'], 'kw_names': None, 'res': '$242call.3'}), (244, {}), (246, {}), (248, {}), (250, {}), (252, {'exc': '$242call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=254 nstack_initial=0):
AdaptBlockInfo(insts=((254, {'res': '$inferred254.0'}), (256, {'res': '$shape256.1'}), (258, {'res': '$neg_ax258.2'}), (260, {'target': '$shape256.1', 'index': '$neg_ax258.2', 'value': '$inferred254.0'}), (262, {}), (264, {'res': '$const264.3'}), (266, {'retval': '$const264.3', 'castval': '$266return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,144 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=268 nstack_initial=0):
AdaptBlockInfo(insts=((268, {'idx': 1, 'res': '$268load_global.0'}), (270, {}), (272, {}), (274, {}), (276, {}), (278, {}), (280, {'res': '$const280.2'}), (282, {}), (284, {}), (286, {'func': '$268load_global.0', 'args': ['$const280.2'], 'kw_names': None, 'res': '$286call.3'}), (288, {}), (290, {}), (292, {}), (294, {}), (296, {'exc': '$286call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-08-01 17:59:44,144 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    $12load_global.2 = global(enumerate: <class 'enumerate'>) ['$12load_global.2']
    $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.2', '$30call.5', 'shape']
    $40get_iter.6 = getiter(value=$30call.5) ['$30call.5', '$40get_iter.6']
    $phi42.0 = $40get_iter.6                 ['$40get_iter.6', '$phi42.0']
    jump 42                                  []
label 42:
    $42for_iter.1 = iternext(value=$phi42.0) ['$42for_iter.1', '$phi42.0']
    $42for_iter.2 = pair_first(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.2']
    $42for_iter.3 = pair_second(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.3']
    $phi44.1 = $42for_iter.2                 ['$42for_iter.2', '$phi44.1']
    branch $42for_iter.3, 44, 92             ['$42for_iter.3']
label 44:
    $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2) ['$44unpack_sequence.4', '$phi44.1']
    $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.2', '$44unpack_sequence.4']
    $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.3', '$44unpack_sequence.4']
    ax = $44unpack_sequence.2                ['$44unpack_sequence.2', 'ax']
    s = $44unpack_sequence.3                 ['$44unpack_sequence.3', 's']
    $const54.6 = const(int, 0)               ['$const54.6']
    $56compare_op.7 = s < $const54.6         ['$56compare_op.7', '$const54.6', 's']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.7', '$62pred', 'bool62']
    branch $62pred, 64, 80                   ['$62pred']
label 64:
    $const66.2 = const(int, 1)               ['$const66.2']
    $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd68.3', '$const66.2', 'num_neg_value']
    num_neg_value = $binop_iadd68.3          ['$binop_iadd68.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 42                                  []
label 80:
    $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul84.3', 'known_size', 's']
    known_size = $binop_imul84.3             ['$binop_imul84.3', 'known_size']
    jump 42                                  []
label 92:
    $const94.1 = const(int, 0)               ['$const94.1']
    $96compare_op.2 = num_neg_value == $const94.1 ['$96compare_op.2', '$const94.1', 'num_neg_value']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None) ['$102pred', '$96compare_op.2', 'bool102']
    branch $102pred, 104, 150                ['$102pred']
label 104:
    $108compare_op.2 = origsize != known_size ['$108compare_op.2', 'known_size', 'origsize']
    bool114 = global(bool: <class 'bool'>)   ['bool114']
    $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None) ['$108compare_op.2', '$114pred', 'bool114']
    branch $114pred, 116, 146                ['$114pred']
label 116:
    $116load_global.0 = global(ValueError: <class 'ValueError'>) ['$116load_global.0']
    $const128.2 = const(str, total size of new array must be unchanged) ['$const128.2']
    $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_global.0', '$134call.3', '$const128.2']
    raise $134call.3                         ['$134call.3']
label 146:
    $const146.0 = const(NoneType, None)      ['$const146.0']
    $148return_value.1 = cast(value=$const146.0) ['$148return_value.1', '$const146.0']
    return $148return_value.1                ['$148return_value.1']
label 150:
    $const152.1 = const(int, 1)              ['$const152.1']
    $154compare_op.2 = num_neg_value == $const152.1 ['$154compare_op.2', '$const152.1', 'num_neg_value']
    bool160 = global(bool: <class 'bool'>)   ['bool160']
    $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None) ['$154compare_op.2', '$160pred', 'bool160']
    branch $160pred, 162, 268                ['$160pred']
label 162:
    $const164.1 = const(int, 0)              ['$const164.1']
    $166compare_op.2 = known_size == $const164.1 ['$166compare_op.2', '$const164.1', 'known_size']
    bool172 = global(bool: <class 'bool'>)   ['bool172']
    $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None) ['$166compare_op.2', '$172pred', 'bool172']
    branch $172pred, 174, 192                ['$172pred']
label 174:
    inferred = const(int, 0)                 ['inferred']
    $const180.2 = const(int, 0)              ['$const180.2']
    ok = origsize == $const180.2             ['$const180.2', 'ok', 'origsize']
    jump 220                                 []
label 192:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $binop_mod206.5 = origsize % known_size  ['$binop_mod206.5', 'known_size', 'origsize']
    $const210.6 = const(int, 0)              ['$const210.6']
    ok = $binop_mod206.5 == $const210.6      ['$binop_mod206.5', '$const210.6', 'ok']
    jump 220                                 []
label 220:
    bool222 = global(bool: <class 'bool'>)   ['bool222']
    $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None) ['$222pred', 'bool222', 'ok']
    branch $222pred, 254, 224                ['$222pred']
label 224:
    $224load_global.0 = global(ValueError: <class 'ValueError'>) ['$224load_global.0']
    $const236.2 = const(str, total size of new array must be unchanged) ['$const236.2']
    $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None) ['$224load_global.0', '$242call.3', '$const236.2']
    raise $242call.3                         ['$242call.3']
label 254:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    $const264.3 = const(NoneType, None)      ['$const264.3']
    $266return_value.4 = cast(value=$const264.3) ['$266return_value.4', '$const264.3']
    return $266return_value.4                ['$266return_value.4']
label 268:
    $268load_global.0 = global(ValueError: <class 'ValueError'>) ['$268load_global.0']
    $const280.2 = const(str, multiple negative shape values) ['$const280.2']
    $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None) ['$268load_global.0', '$286call.3', '$const280.2']
    raise $286call.3                         ['$286call.3']

2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 42
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 44
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,161 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 64
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 80
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = $binop_imul84.3
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 92
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 104
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 116
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 146
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 150
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 162
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 174
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 192
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 220
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 224
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 254
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 268
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 269
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000001D63A1FD050>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$102pred': [<numba.core.ir.Assign object at 0x000001D63A267F50>],
             '$108compare_op.2': [<numba.core.ir.Assign object at 0x000001D63A2668D0>],
             '$114pred': [<numba.core.ir.Assign object at 0x000001D63A2227D0>],
             '$116load_global.0': [<numba.core.ir.Assign object at 0x000001D63A222250>],
             '$12load_global.2': [<numba.core.ir.Assign object at 0x000001D63A2C08D0>],
             '$134call.3': [<numba.core.ir.Assign object at 0x000001D63A2222D0>],
             '$148return_value.1': [<numba.core.ir.Assign object at 0x000001D63A220690>],
             '$154compare_op.2': [<numba.core.ir.Assign object at 0x000001D63A222910>],
             '$160pred': [<numba.core.ir.Assign object at 0x000001D63A220350>],
             '$166compare_op.2': [<numba.core.ir.Assign object at 0x000001D63A222050>],
             '$172pred': [<numba.core.ir.Assign object at 0x000001D63A223710>],
             '$222pred': [<numba.core.ir.Assign object at 0x000001D63A2F4710>],
             '$224load_global.0': [<numba.core.ir.Assign object at 0x000001D63A2F4210>],
             '$242call.3': [<numba.core.ir.Assign object at 0x000001D63A2F5690>],
             '$266return_value.4': [<numba.core.ir.Assign object at 0x000001D63A385250>],
             '$268load_global.0': [<numba.core.ir.Assign object at 0x000001D63A384ED0>],
             '$286call.3': [<numba.core.ir.Assign object at 0x000001D63A3877D0>],
             '$30call.5': [<numba.core.ir.Assign object at 0x000001D63A2C1D90>],
             '$40get_iter.6': [<numba.core.ir.Assign object at 0x000001D63A2C1E50>],
             '$42for_iter.1': [<numba.core.ir.Assign object at 0x000001D63A264490>],
             '$42for_iter.2': [<numba.core.ir.Assign object at 0x000001D63A267C10>],
             '$42for_iter.3': [<numba.core.ir.Assign object at 0x000001D63A2673D0>],
             '$44unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001D63A265D10>],
             '$44unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001D63A264BD0>],
             '$44unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001D63A264FD0>],
             '$56compare_op.7': [<numba.core.ir.Assign object at 0x000001D63A264690>],
             '$62pred': [<numba.core.ir.Assign object at 0x000001D63A264D50>],
             '$96compare_op.2': [<numba.core.ir.Assign object at 0x000001D63A267010>],
             '$binop_iadd68.3': [<numba.core.ir.Assign object at 0x000001D63A2667D0>],
             '$binop_imul84.3': [<numba.core.ir.Assign object at 0x000001D63A266010>],
             '$binop_mod206.5': [<numba.core.ir.Assign object at 0x000001D63A223510>],
             '$const128.2': [<numba.core.ir.Assign object at 0x000001D63A223E90>],
             '$const146.0': [<numba.core.ir.Assign object at 0x000001D63A223C90>],
             '$const152.1': [<numba.core.ir.Assign object at 0x000001D63A223990>],
             '$const164.1': [<numba.core.ir.Assign object at 0x000001D63A221790>],
             '$const180.2': [<numba.core.ir.Assign object at 0x000001D63A220710>],
             '$const210.6': [<numba.core.ir.Assign object at 0x000001D63A2F7190>],
             '$const236.2': [<numba.core.ir.Assign object at 0x000001D63A2F4F90>],
             '$const264.3': [<numba.core.ir.Assign object at 0x000001D63A386A10>],
             '$const280.2': [<numba.core.ir.Assign object at 0x000001D63A387ED0>],
             '$const54.6': [<numba.core.ir.Assign object at 0x000001D63A264B50>],
             '$const66.2': [<numba.core.ir.Assign object at 0x000001D63A266810>],
             '$const94.1': [<numba.core.ir.Assign object at 0x000001D63A267450>],
             '$phi42.0': [<numba.core.ir.Assign object at 0x000001D63A2C0450>],
             '$phi44.1': [<numba.core.ir.Assign object at 0x000001D63A265010>],
             'ax': [<numba.core.ir.Assign object at 0x000001D63A267550>],
             'bool102': [<numba.core.ir.Assign object at 0x000001D63A265C10>],
             'bool114': [<numba.core.ir.Assign object at 0x000001D63A223490>],
             'bool160': [<numba.core.ir.Assign object at 0x000001D63A2213D0>],
             'bool172': [<numba.core.ir.Assign object at 0x000001D63A222090>],
             'bool222': [<numba.core.ir.Assign object at 0x000001D63A2F5E50>],
             'bool62': [<numba.core.ir.Assign object at 0x000001D63A264810>],
             'inferred': [<numba.core.ir.Assign object at 0x000001D63A220C90>,
                          <numba.core.ir.Assign object at 0x000001D63A222A50>],
             'known_size': [<numba.core.ir.Assign object at 0x000001D63A2C0C50>,
                            <numba.core.ir.Assign object at 0x000001D63A266490>],
             'neg_ax': [<numba.core.ir.Assign object at 0x000001D63A266A90>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x000001D63A2C13D0>,
                               <numba.core.ir.Assign object at 0x000001D63A2662D0>],
             'ok': [<numba.core.ir.Assign object at 0x000001D63A220890>,
                    <numba.core.ir.Assign object at 0x000001D63A2F6DD0>],
             'origsize': [<numba.core.ir.Assign object at 0x000001D63A27A610>],
             's': [<numba.core.ir.Assign object at 0x000001D63A264510>],
             'shape': [<numba.core.ir.Assign object at 0x000001D63A27AA10>]})
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; SSA violators {'known_size', 'inferred', 'ok', 'num_neg_value'}
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var known_size
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; first assign: known_size
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; replaced with: known_size = const(int, 1)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,168 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = $binop_imul84.3
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; replaced with: known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26BFD0>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001D63A268A50>],
             80: [<numba.core.ir.Assign object at 0x000001D63A26AC90>]})
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,173 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=$binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 80
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 80
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; incoming_def known_size = const(int, 1)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 269
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 269
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 269
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 64
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 64
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 64
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; incoming_def known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1977)], incoming_blocks=[0])
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 80
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; incoming_def known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; incoming_def known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1983), Var(known_size.1, arrayobj.py:1983)], incoming_blocks=[64, 80])
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=$108compare_op.2 = origsize != known_size
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 104
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 104
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $108compare_op.2 = origsize != known_size.2
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=$166compare_op.2 = known_size == $const164.1
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 150 from label 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $166compare_op.2 = known_size.2 == $const164.1
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=inferred = origsize // known_size
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 192
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 162 from label 192
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 150 from label 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; replaced with: inferred = origsize // known_size.2
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=$binop_mod206.5 = origsize % known_size
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 192
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 162 from label 192
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 150 from label 162
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_mod206.5 = origsize % known_size.2
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268F50>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var inferred
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1977), Var(known_size.3, arrayobj.py:1983)], incoming_blocks=[0, 269])
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,177 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; first assign: inferred
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; replaced with: inferred = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size.2
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; replaced with: inferred.1 = origsize // known_size.2
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A2684D0>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1983), Var(known_size.1, arrayobj.py:1983)], incoming_blocks=[64, 80])
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {174: [<numba.core.ir.Assign object at 0x000001D63A26AA10>],
             192: [<numba.core.ir.Assign object at 0x000001D63A26B190>]})
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1977), Var(known_size.3, arrayobj.py:1983)], incoming_blocks=[0, 269])
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,189 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.1 = origsize // known_size.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; find_def var='inferred' stmt=shape[neg_ax] = inferred
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 254
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; idom 220 from label 254
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 192
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; incoming_def inferred.1 = origsize // known_size.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 174
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; incoming_def inferred = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; replaced with: shape[neg_ax] = inferred.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A1FD050>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1983), Var(known_size.1, arrayobj.py:1983)], incoming_blocks=[64, 80])
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var ok
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1977), Var(known_size.3, arrayobj.py:1983)], incoming_blocks=[0, 269])
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; first assign: ok
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; replaced with: ok = origsize == $const180.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.1 = origsize // known_size.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; replaced with: ok.1 = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1995), Var(inferred, arrayobj.py:1992)], incoming_blocks=[192, 174])
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A310>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1983), Var(known_size.1, arrayobj.py:1983)], incoming_blocks=[64, 80])
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {174: [<numba.core.ir.Assign object at 0x000001D63A2C3C90>],
             192: [<numba.core.ir.Assign object at 0x000001D63A2C2C50>]})
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1977), Var(known_size.3, arrayobj.py:1983)], incoming_blocks=[0, 269])
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,194 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.1 = origsize // known_size.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1995), Var(inferred, arrayobj.py:1992)], incoming_blocks=[192, 174])
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; find_def var='ok' stmt=$222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1993),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 220
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 220
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 192
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; incoming_def ok.1 = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 174
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; incoming_def ok = origsize == $const180.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:1997),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A268990>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1983), Var(known_size.1, arrayobj.py:1983)], incoming_blocks=[64, 80])
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var num_neg_value
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; first assign: num_neg_value
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; replaced with: num_neg_value = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1977), Var(known_size.3, arrayobj.py:1983)], incoming_blocks=[0, 269])
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; replaced with: num_neg_value.1 = $binop_iadd68.3
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.1 = origsize // known_size.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1996), Var(ok, arrayobj.py:1993)], incoming_blocks=[192, 174])
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1995), Var(inferred, arrayobj.py:1992)], incoming_blocks=[192, 174])
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:1997),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred.2
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,204 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x000001D63A26A810>
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1983), Var(known_size.1, arrayobj.py:1983)], incoming_blocks=[64, 80])
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001D63A26AB90>],
             64: [<numba.core.ir.Assign object at 0x000001D63A26BA50>]})
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1975)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1977), Var(known_size.3, arrayobj.py:1983)], incoming_blocks=[0, 269])
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def var='num_neg_value' stmt=$binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 64
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 64
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 42
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 42
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; incoming_def num_neg_value = const(int, 0)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 269
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 269
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 269
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 64
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; incoming_def num_neg_value.1 = $binop_iadd68.3
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 80
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 80
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 80
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; incoming_def num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1976)], incoming_blocks=[0])
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:1980), Var(num_neg_value.2, arrayobj.py:1980)], incoming_blocks=[64, 80])
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,211 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; find_def var='num_neg_value' stmt=$96compare_op.2 = num_neg_value == $const94.1
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1985),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1986),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1987)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; find_def var='num_neg_value' stmt=$154compare_op.2 = num_neg_value == $const152.1
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.1 = origsize // known_size.2
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1996), Var(ok, arrayobj.py:1993)], incoming_blocks=[192, 174])
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1995), Var(inferred, arrayobj.py:1992)], incoming_blocks=[192, 174])
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:1997),), kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1998)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred.2
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000001D63A2C2850>
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1983), Var(known_size.1, arrayobj.py:1983)], incoming_blocks=[64, 80])
2024-08-01 17:59:44,215 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-08-01 17:59:45,278 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Selenium Manager binary found at: C:\Users\wolters\AppData\Local\anaconda3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe
2024-08-01 17:59:45,278 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Executing process: C:\Users\wolters\AppData\Local\anaconda3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe --browser firefox --debug --language-binding python --output json
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; geckodriver not found in PATH
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; firefox detected at C:\Program Files (x86)\Mozilla Firefox\firefox.exe
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Running command: wmic datafile where name='C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe' get Version /value
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Output: "\r\r\n\r\r\nVersion=128.0.3.199\r\r\n\r\r\n\r\r\n\r"
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Detected browser: firefox 128.0.3.199
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Required driver: geckodriver 0.34.0
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; geckodriver 0.34.0 already in the cache
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Driver path: C:\Users\wolters\.cache\selenium\geckodriver\win64\0.34.0\geckodriver.exe
2024-08-01 17:59:45,844 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Browser path: C:\Program Files (x86)\Mozilla Firefox\firefox.exe
2024-08-01 17:59:45,844 ; selenium.webdriver.common.service                            ; DEBUG   ; Started executable: `C:\Users\wolters\.cache\selenium\geckodriver\win64\0.34.0\geckodriver.exe` in a child process with pid: 19544 using 0 to output -3
2024-08-01 17:59:46,887 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; POST http://localhost:64717/session {'capabilities': {'firstMatch': [{}], 'alwaysMatch': {'browserName': 'firefox', 'acceptInsecureCerts': True, 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, 'browserVersion': None, 'moz:firefoxOptions': {'binary': 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe', 'prefs': {'remote.active-protocols': 3}, 'args': ['--headless']}}}}
2024-08-01 17:59:46,888 ; urllib3.connectionpool                                       ; DEBUG   ; Starting new HTTP connection (1): localhost:64717
2024-08-01 17:59:50,414 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:64717 "POST /session HTTP/1.1" 200 0
2024-08-01 17:59:50,414 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":{"sessionId":"fae085d5-9482-4a55-a6a3-8b0c4f300a55","capabilities":{"acceptInsecureCerts":true,"browserName":"firefox","browserVersion":"128.0.3","moz:accessibilityChecks":false,"moz:buildID":"20240725162350","moz:debuggerAddress":"127.0.0.1:64718","moz:geckodriverVersion":"0.34.0","moz:headless":true,"moz:platformVersion":"10.0","moz:processID":11132,"moz:profile":"C:\\Users\\wolters\\AppData\\Local\\Temp\\rust_mozprofileXLxdkJ","moz:shutdownTimeout":60000,"moz:webdriverClick":true,"moz:windowless":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0"}}} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '842', 'date': 'Thu, 01 Aug 2024 15:59:48 GMT'})
2024-08-01 17:59:50,414 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-08-01 17:59:50,527 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; POST http://localhost:64717/session/fae085d5-9482-4a55-a6a3-8b0c4f300a55/url {'url': 'file:///C:\\Users\\wolters\\AppData\\Local\\Temp\\folium_a48lcisx.html'}
2024-08-01 17:59:51,381 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:64717 "POST /session/fae085d5-9482-4a55-a6a3-8b0c4f300a55/url HTTP/1.1" 200 0
2024-08-01 17:59:51,382 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '14', 'date': 'Thu, 01 Aug 2024 15:59:50 GMT'})
2024-08-01 17:59:51,382 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-08-01 17:59:51,382 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; POST http://localhost:64717/session/fae085d5-9482-4a55-a6a3-8b0c4f300a55/window/fullscreen {}
2024-08-01 17:59:51,929 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:64717 "POST /session/fae085d5-9482-4a55-a6a3-8b0c4f300a55/window/fullscreen HTTP/1.1" 200 0
2024-08-01 17:59:51,930 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":{"x":0,"y":0,"width":1366,"height":768}} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '49', 'date': 'Thu, 01 Aug 2024 15:59:50 GMT'})
2024-08-01 17:59:51,930 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-08-01 17:59:56,931 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; POST http://localhost:64717/session/fae085d5-9482-4a55-a6a3-8b0c4f300a55/element {'using': 'css selector', 'value': '.folium-map'}
2024-08-01 17:59:56,939 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:64717 "POST /session/fae085d5-9482-4a55-a6a3-8b0c4f300a55/element HTTP/1.1" 200 0
2024-08-01 17:59:56,939 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":{"element-6066-11e4-a52e-4f735466cecf":"ddc816fa-984e-4394-82cb-b63689daa35a"}} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '88', 'date': 'Thu, 01 Aug 2024 15:59:56 GMT'})
2024-08-01 17:59:56,939 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-08-01 17:59:56,939 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; GET http://localhost:64717/session/fae085d5-9482-4a55-a6a3-8b0c4f300a55/element/ddc816fa-984e-4394-82cb-b63689daa35a/screenshot {}
2024-08-01 17:59:57,020 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:64717 "GET /session/fae085d5-9482-4a55-a6a3-8b0c4f300a55/element/ddc816fa-984e-4394-82cb-b63689daa35a/screenshot HTTP/1.1" 200 0
2024-08-01 17:59:57,021 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":""} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '858316', 'date': 'Thu, 01 Aug 2024 15:59:56 GMT'})
2024-08-01 17:59:57,034 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-08-01 17:59:57,035 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; DELETE http://localhost:64717/session/fae085d5-9482-4a55-a6a3-8b0c4f300a55 {}
2024-08-01 17:59:57,927 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:64717 "DELETE /session/fae085d5-9482-4a55-a6a3-8b0c4f300a55 HTTP/1.1" 200 0
2024-08-01 17:59:57,927 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '14', 'date': 'Thu, 01 Aug 2024 15:59:56 GMT'})
2024-08-01 17:59:57,927 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-08-01 18:00:04,073 ; PIL.PngImagePlugin                                           ; DEBUG   ; STREAM b'IHDR' 16 13
2024-08-01 18:00:04,073 ; PIL.PngImagePlugin                                           ; DEBUG   ; STREAM b'IDAT' 41 8192
2024-08-01 18:00:04,194 ; PIL.Image                                                    ; DEBUG   ; Importing BlpImagePlugin
2024-08-01 18:00:04,198 ; PIL.Image                                                    ; DEBUG   ; Importing BmpImagePlugin
2024-08-01 18:00:04,199 ; PIL.Image                                                    ; DEBUG   ; Importing BufrStubImagePlugin
2024-08-01 18:00:04,201 ; PIL.Image                                                    ; DEBUG   ; Importing CurImagePlugin
2024-08-01 18:00:04,201 ; PIL.Image                                                    ; DEBUG   ; Importing DcxImagePlugin
2024-08-01 18:00:04,201 ; PIL.Image                                                    ; DEBUG   ; Importing DdsImagePlugin
2024-08-01 18:00:04,212 ; PIL.Image                                                    ; DEBUG   ; Importing EpsImagePlugin
2024-08-01 18:00:04,216 ; PIL.Image                                                    ; DEBUG   ; Importing FitsImagePlugin
2024-08-01 18:00:04,216 ; PIL.Image                                                    ; DEBUG   ; Importing FliImagePlugin
2024-08-01 18:00:04,216 ; PIL.Image                                                    ; DEBUG   ; Importing FpxImagePlugin
2024-08-01 18:00:04,216 ; PIL.Image                                                    ; DEBUG   ; Image: failed to import FpxImagePlugin: No module named 'olefile'
2024-08-01 18:00:04,216 ; PIL.Image                                                    ; DEBUG   ; Importing FtexImagePlugin
2024-08-01 18:00:04,228 ; PIL.Image                                                    ; DEBUG   ; Importing GbrImagePlugin
2024-08-01 18:00:04,231 ; PIL.Image                                                    ; DEBUG   ; Importing GifImagePlugin
2024-08-01 18:00:04,231 ; PIL.Image                                                    ; DEBUG   ; Importing GribStubImagePlugin
2024-08-01 18:00:04,233 ; PIL.Image                                                    ; DEBUG   ; Importing Hdf5StubImagePlugin
2024-08-01 18:00:04,235 ; PIL.Image                                                    ; DEBUG   ; Importing IcnsImagePlugin
2024-08-01 18:00:04,244 ; PIL.Image                                                    ; DEBUG   ; Importing IcoImagePlugin
2024-08-01 18:00:04,246 ; PIL.Image                                                    ; DEBUG   ; Importing ImImagePlugin
2024-08-01 18:00:04,249 ; PIL.Image                                                    ; DEBUG   ; Importing ImtImagePlugin
2024-08-01 18:00:04,251 ; PIL.Image                                                    ; DEBUG   ; Importing IptcImagePlugin
2024-08-01 18:00:04,254 ; PIL.Image                                                    ; DEBUG   ; Importing JpegImagePlugin
2024-08-01 18:00:04,254 ; PIL.Image                                                    ; DEBUG   ; Importing Jpeg2KImagePlugin
2024-08-01 18:00:04,254 ; PIL.Image                                                    ; DEBUG   ; Importing McIdasImagePlugin
2024-08-01 18:00:04,255 ; PIL.Image                                                    ; DEBUG   ; Importing MicImagePlugin
2024-08-01 18:00:04,258 ; PIL.Image                                                    ; DEBUG   ; Image: failed to import MicImagePlugin: No module named 'olefile'
2024-08-01 18:00:04,258 ; PIL.Image                                                    ; DEBUG   ; Importing MpegImagePlugin
2024-08-01 18:00:04,260 ; PIL.Image                                                    ; DEBUG   ; Importing MpoImagePlugin
2024-08-01 18:00:04,262 ; PIL.Image                                                    ; DEBUG   ; Importing MspImagePlugin
2024-08-01 18:00:04,262 ; PIL.Image                                                    ; DEBUG   ; Importing PalmImagePlugin
2024-08-01 18:00:04,270 ; PIL.Image                                                    ; DEBUG   ; Importing PcdImagePlugin
2024-08-01 18:00:04,270 ; PIL.Image                                                    ; DEBUG   ; Importing PcxImagePlugin
2024-08-01 18:00:04,270 ; PIL.Image                                                    ; DEBUG   ; Importing PdfImagePlugin
2024-08-01 18:00:04,279 ; PIL.Image                                                    ; DEBUG   ; Importing PixarImagePlugin
2024-08-01 18:00:04,279 ; PIL.Image                                                    ; DEBUG   ; Importing PngImagePlugin
2024-08-01 18:00:04,279 ; PIL.Image                                                    ; DEBUG   ; Importing PpmImagePlugin
2024-08-01 18:00:04,279 ; PIL.Image                                                    ; DEBUG   ; Importing PsdImagePlugin
2024-08-01 18:00:04,279 ; PIL.Image                                                    ; DEBUG   ; Importing QoiImagePlugin
2024-08-01 18:00:04,279 ; PIL.Image                                                    ; DEBUG   ; Importing SgiImagePlugin
2024-08-01 18:00:04,279 ; PIL.Image                                                    ; DEBUG   ; Importing SpiderImagePlugin
2024-08-01 18:00:04,294 ; PIL.Image                                                    ; DEBUG   ; Importing SunImagePlugin
2024-08-01 18:00:04,294 ; PIL.Image                                                    ; DEBUG   ; Importing TgaImagePlugin
2024-08-01 18:00:04,294 ; PIL.Image                                                    ; DEBUG   ; Importing TiffImagePlugin
2024-08-01 18:00:04,294 ; PIL.Image                                                    ; DEBUG   ; Importing WebPImagePlugin
2024-08-01 18:00:04,294 ; PIL.Image                                                    ; DEBUG   ; Importing WmfImagePlugin
2024-08-01 18:00:04,294 ; PIL.Image                                                    ; DEBUG   ; Importing XbmImagePlugin
2024-08-01 18:00:04,312 ; PIL.Image                                                    ; DEBUG   ; Importing XpmImagePlugin
2024-08-01 18:00:04,315 ; PIL.Image                                                    ; DEBUG   ; Importing XVThumbImagePlugin
"} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '858316', 'date': 'Thu, 01 Aug 2024 15:59:56 GMT'})
Finished Request
DELETE http://localhost:64717/session/fae085d5-9482-4a55-a6a3-8b0c4f300a55 {}
http://localhost:64717 "DELETE /session/fae085d5-9482-4a55-a6a3-8b0c4f300a55 HTTP/1.1" 200 0
Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '14', 'date': 'Thu, 01 Aug 2024 15:59:56 GMT'})
Finished Request
STREAM b'IHDR' 16 13
STREAM b'IDAT' 41 8192
Importing BlpImagePlugin
Importing BmpImagePlugin
Importing BufrStubImagePlugin
Importing CurImagePlugin
Importing DcxImagePlugin
Importing DdsImagePlugin
Importing EpsImagePlugin
Importing FitsImagePlugin
Importing FliImagePlugin
Importing FpxImagePlugin
Image: failed to import FpxImagePlugin: No module named 'olefile'
Importing FtexImagePlugin
Importing GbrImagePlugin
Importing GifImagePlugin
Importing GribStubImagePlugin
Importing Hdf5StubImagePlugin
Importing IcnsImagePlugin
Importing IcoImagePlugin
Importing ImImagePlugin
Importing ImtImagePlugin
Importing IptcImagePlugin
Importing JpegImagePlugin
Importing Jpeg2KImagePlugin
Importing McIdasImagePlugin
Importing MicImagePlugin
Image: failed to import MicImagePlugin: No module named 'olefile'
Importing MpegImagePlugin
Importing MpoImagePlugin
Importing MspImagePlugin
Importing PalmImagePlugin
Importing PcdImagePlugin
Importing PcxImagePlugin
Importing PdfImagePlugin
Importing PixarImagePlugin
Importing PngImagePlugin
Importing PpmImagePlugin
Importing PsdImagePlugin
Importing QoiImagePlugin
Importing SgiImagePlugin
Importing SpiderImagePlugin
Importing SunImagePlugin
Importing TgaImagePlugin
Importing TiffImagePlugin
Importing WebPImagePlugin
Importing WmfImagePlugin
Importing XbmImagePlugin
Importing XpmImagePlugin
Importing XVThumbImagePlugin
