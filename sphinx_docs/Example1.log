2024-07-16 10:44:35,348 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: Start.
2024-07-16 10:44:35,350 ; PT3S                                                         ; INFO    ; dxAndMxHelperFcts.readDxAndMx: ..\Examples\Wärmenetz-Planungsbeispiel-dx.pkl exists and is deleted...
2024-07-16 10:44:35,356 ; PT3S                                                         ; DEBUG   ; Dx.__init__: Start.
2024-07-16 10:44:35,356 ; PT3S                                                         ; INFO    ; Dx.__init__: dbFile (abspath): c:\users\jablonski\3s\pt3s\Examples\Wärmenetz-Planungsbeispiel.db3 exists readable ...
2024-07-16 10:44:35,370 ; PT3S                                                         ; DEBUG   ; Dx.__init__: tableNames: ['AB_DEF', 'AGSN', 'ALLG', 'ALLG_BZ', 'ANTP', 'ANTP_ROWS', 'ARRW', 'ATMO', 'AVOS', 'AVOS_ROWS', 'BENUTZER', 'BEVE', 'BEVE_BZ', 'BEWI', 'BEWI_BZ', 'BREF', 'BZAG', 'BZAG_BZ', 'CIRC', 'CONT', 'CRGL', 'DATENEBENE', 'DPGR', 'DPGR_BZ', 'DPGR_DPKT', 'DPKT', 'DPKT_BZ', 'DPRG', 'DPRG_BZ', 'DRNP', 'DTRO', 'DTRO_ROWD', 'EBES', 'EBES_BZ', 'ELEMENTQUERY', 'ETAM', 'ETAM_ROWS', 'ETAR', 'ETAR_ROWS', 'ETAU', 'ETAU_ROWS', 'FKNL', 'FKNL_BZ', 'FQPS', 'FQPS_BZ', 'FSTF', 'FWBZ', 'FWEA', 'FWEA_BZ', 'FWES', 'FWES_BZ', 'FWVB', 'FWVB_BZ', 'FWWU', 'FWWU_BZ', 'GEOMETRY_COLUMNS', 'GKMP', 'GMIX', 'GRAV', 'GTXT', 'GVWK', 'GVWK_BZ', 'HAUS', 'HYDR', 'HYDR_BZ', 'KLAP', 'KLAP_BZ', 'KNOT', 'KNOT_BZ', 'KOMK', 'KOMK_ROWS', 'KOMP', 'KOMP_BZ', 'LAYR', 'LFAL', 'LFAL_BZ', 'LFKT', 'LFKT_ROWT', 'LTGR', 'MAPG', 'MAPG_ROWS', 'MODELL', 'MREG', 'MREG_BZ', 'NRCV', 'NSCH', 'NSCH_BZ', 'OBEH', 'OBEH_BZ', 'OVAL', 'PARI', 'PARI_BZ', 'PARV', 'PARZ', 'PARZ_BZ', 'PGPR', 'PGRP', 'PGRP_BZ', 'PGRP_PUMP', 'PGRP_PUMP_BZ', 'PHI1', 'PHI1_ROWT', 'PHI2', 'PHI2_ROWS', 'PHIV', 'PHIV_ROWS', 'PHTR', 'PHTR_BZ', 'PLYG', 'POLY', 'PREG', 'PREG_BZ', 'PROZESSE', 'PUMD', 'PUMD_ROWT', 'PUMK', 'PUMK_ROWS', 'PUMP', 'PUMP_BZ', 'PVAR', 'PVAR_ROWT', 'PZON', 'PZVR', 'PZVR_BZ', 'QVAR', 'QVAR_ROWT', 'RADD', 'RADD_BZ', 'RART', 'RART_BZ', 'RCON', 'RCPL', 'RCPL_ROWT', 'RDIV', 'RDIV_BZ', 'RECT', 'REGP', 'REGV', 'REGV_BZ', 'RFKT', 'RFKT_BZ', 'RHYS', 'RHYS_BZ', 'RINT', 'RINT_BZ', 'RLSR', 'RLSR_BZ', 'RLVG', 'RLVG_BZ', 'RMES', 'RMES_BZ', 'RMES_DPTS', 'RMES_DPTS_BZ', 'RMMA', 'RMMA_BZ', 'RMUL', 'RMUL_BZ', 'ROHR', 'ROHR_BZ', 'ROHR_VRTX', 'RPFL', 'RPID', 'RPID_BZ', 'RPLAN', 'RPLAN_ROWS', 'RPT1', 'RPT1_BZ', 'RRCT', 'RSLW', 'RSLW_BZ', 'RSTE', 'RSTE_BZ', 'RSTN', 'RSTN_BZ', 'RTOT', 'RTOT_BZ', 'RUES', 'RUES_BZ', 'SIRGRAF', 'SIVE', 'SIVE_BZ', 'SOKO', 'SPLZ', 'SRAT', 'SRAT_ROWS', 'STOF', 'STOF_ROWS', 'STRASSE', 'STRO', 'STRO_BZ', 'SWVT', 'SWVT_ROWT', 'SYSTEMKONFIG', 'TEVT', 'TEVT_ROWT', 'TFKT', 'TFKT_ROWS', 'TIMD', 'TRFT', 'TRFT_ROWS', 'TRVA', 'UTMP', 'VARA_ROWS', 'VENT', 'VENT_BZ', 'VERB', 'VKNO', 'VRCT', 'WBLZ', 'WEVT', 'WEVT_ROWT', 'WIND', 'WIND_BZ', 'WTTR', 'WTTR_ROWT', 'ZEP1', 'ZEP1_ROWS', 'ZEP2', 'ZEP2_ROWS', 'VARA']
2024-07-16 10:44:35,370 ; PT3S                                                         ; DEBUG   ; Dx.__init__: viewNames: ['VIEW_MODELLE', 'VCIRC', 'VFWES', 'VFWVB', 'VFWWU', 'VGTXT', 'VKLAP', 'VKNOT', 'VPLYG', 'VPUMP', 'VROHR', 'VVENT']
2024-07-16 10:44:35,381 ; PT3S                                                         ; DEBUG   ; Dx.__init__: pairType: _BZ: ####
2024-07-16 10:44:35,383 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,386 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: ALLG Quelle BZ: ALLG_BZ BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:35,388 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,389 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,390 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,391 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,391 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,391 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ALLG BVZ: ALLG_BZ V: V_BVZ_ALLG fertig mit 1 Zeilen und 44 Spalten.
2024-07-16 10:44:35,391 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,394 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: BEVE Quelle BZ: BEVE_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,396 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: BEVE BZ: BEVE_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,396 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,396 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,398 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,398 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,405 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,405 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,405 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,405 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: BEVE BVZ: BEVE_BZ V: V_BVZ_BEVE fertig mit 1 Zeilen und 76 Spalten.
2024-07-16 10:44:35,405 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,407 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: BEWI Quelle BZ: BEWI_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,409 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: BEWI BZ: BEWI_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,409 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,410 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,411 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,412 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,416 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: BEWI BVZ: BEWI_BZ V: V_BVZ_BEWI fertig mit 1 Zeilen und 75 Spalten.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: BZAG Quelle BZ: BZAG_BZ BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: BZAG BVZ: BZAG_BZ V: V_BVZ_BZAG fertig mit 1 Zeilen und 26 Spalten.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: DPGR Quelle BZ: DPGR_BZ BV Zeilen: 15 BZ Zeilen: 15
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: DPGR BZ: DPGR_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 15
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 14
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DPGR BVZ: DPGR_BZ V: V_BVZ_DPGR fertig mit 14 Zeilen und 32 Spalten.
2024-07-16 10:44:35,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,435 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: DPKT Quelle BZ: DPKT_BZ BV Zeilen: 636 BZ Zeilen: 636
2024-07-16 10:44:35,435 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: DPKT BZ: DPKT_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,435 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 636
2024-07-16 10:44:35,435 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,435 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,449 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 635
2024-07-16 10:44:35,449 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,449 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DPKT BVZ: DPKT_BZ V: V_BVZ_DPKT fertig mit 635 Zeilen und 49 Spalten.
2024-07-16 10:44:35,449 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,450 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: DPRG Quelle BZ: DPRG_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,450 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: DPRG BZ: DPRG_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,450 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,450 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,450 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,450 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,459 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,459 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,459 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,459 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DPRG BVZ: DPRG_BZ V: V_BVZ_DPRG fertig mit 1 Zeilen und 72 Spalten.
2024-07-16 10:44:35,459 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,459 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: EBES Quelle BZ: EBES_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,462 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: EBES BZ: EBES_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,462 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,465 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,466 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,466 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,468 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,468 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,468 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,469 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: EBES BVZ: EBES_BZ V: V_BVZ_EBES fertig mit 1 Zeilen und 43 Spalten.
2024-07-16 10:44:35,469 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,471 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: FKNL Quelle BZ: FKNL_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,473 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: FKNL BZ: FKNL_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,473 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,473 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,475 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,475 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,478 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,480 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,480 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,480 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FKNL BVZ: FKNL_BZ V: V_BVZ_FKNL fertig mit 1 Zeilen und 69 Spalten.
2024-07-16 10:44:35,480 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,483 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: FQPS Quelle BZ: FQPS_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: FQPS BZ: FQPS_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FQPS BVZ: FQPS_BZ V: V_BVZ_FQPS fertig mit 1 Zeilen und 71 Spalten.
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: FWEA Quelle BZ: FWEA_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: FWEA BZ: FWEA_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,485 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,503 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,506 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,506 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,506 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FWEA BVZ: FWEA_BZ V: V_BVZ_FWEA fertig mit 1 Zeilen und 134 Spalten.
2024-07-16 10:44:35,506 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,509 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: FWES Quelle BZ: FWES_BZ BV Zeilen: 3 BZ Zeilen: 3
2024-07-16 10:44:35,509 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: FWES BZ: FWES_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,509 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 3
2024-07-16 10:44:35,509 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,523 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,523 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 2
2024-07-16 10:44:35,523 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,523 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FWES BVZ: FWES_BZ V: V_BVZ_FWES fertig mit 2 Zeilen und 60 Spalten.
2024-07-16 10:44:35,523 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,534 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: FWVB Quelle BZ: FWVB_BZ BV Zeilen: 340 BZ Zeilen: 340
2024-07-16 10:44:35,534 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: FWVB BZ: FWVB_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,534 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 340
2024-07-16 10:44:35,534 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,557 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,558 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 339
2024-07-16 10:44:35,558 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,558 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FWVB BVZ: FWVB_BZ V: V_BVZ_FWVB fertig mit 339 Zeilen und 83 Spalten.
2024-07-16 10:44:35,558 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,561 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: FWWU Quelle BZ: FWWU_BZ BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:35,564 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: FWWU BZ: FWWU_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,564 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 2
2024-07-16 10:44:35,564 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,577 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,578 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,578 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,578 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: FWWU BVZ: FWWU_BZ V: V_BVZ_FWWU fertig mit 1 Zeilen und 80 Spalten.
2024-07-16 10:44:35,578 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,580 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: GVWK Quelle BZ: GVWK_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,583 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: GVWK BZ: GVWK_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,583 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,584 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,586 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,586 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,591 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,591 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,591 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,591 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: GVWK BVZ: GVWK_BZ V: V_BVZ_GVWK fertig mit 1 Zeilen und 67 Spalten.
2024-07-16 10:44:35,591 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,595 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: HYDR Quelle BZ: HYDR_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,597 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: HYDR BZ: HYDR_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,597 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,598 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,599 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,599 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,603 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,603 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,603 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,603 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: HYDR BVZ: HYDR_BZ V: V_BVZ_HYDR fertig mit 1 Zeilen und 58 Spalten.
2024-07-16 10:44:35,603 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,606 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: KLAP Quelle BZ: KLAP_BZ BV Zeilen: 4 BZ Zeilen: 4
2024-07-16 10:44:35,607 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: KLAP BZ: KLAP_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,607 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 4
2024-07-16 10:44:35,609 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,616 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,616 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 3
2024-07-16 10:44:35,616 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,616 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: KLAP BVZ: KLAP_BZ V: V_BVZ_KLAP fertig mit 3 Zeilen und 56 Spalten.
2024-07-16 10:44:35,616 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,621 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: KNOT Quelle BZ: KNOT_BZ BV Zeilen: 521 BZ Zeilen: 521
2024-07-16 10:44:35,621 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: KNOT BZ: KNOT_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,621 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 521
2024-07-16 10:44:35,633 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 520
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: KNOT BVZ: KNOT_BZ V: V_BVZ_KNOT fertig mit 520 Zeilen und 65 Spalten.
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: KOMP Quelle BZ: KOMP_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: KOMP BZ: KOMP_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,649 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,658 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,662 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,662 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,662 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: KOMP BVZ: KOMP_BZ V: V_BVZ_KOMP fertig mit 1 Zeilen und 80 Spalten.
2024-07-16 10:44:35,662 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,663 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: LFAL Quelle BZ: LFAL_BZ BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:35,664 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,664 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,664 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: LFAL BVZ: LFAL_BZ V: V_BVZ_LFAL fertig mit 1 Zeilen und 25 Spalten.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: MREG Quelle BZ: MREG_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: MREG BZ: MREG_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: MREG BVZ: MREG_BZ V: V_BVZ_MREG fertig mit 1 Zeilen und 73 Spalten.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,666 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: NSCH Quelle BZ: NSCH_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,679 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: NSCH BZ: NSCH_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,679 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,679 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,681 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,682 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,685 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,685 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,685 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,685 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: NSCH BVZ: NSCH_BZ V: V_BVZ_NSCH fertig mit 1 Zeilen und 46 Spalten.
2024-07-16 10:44:35,685 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,687 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: OBEH Quelle BZ: OBEH_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,690 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: OBEH BZ: OBEH_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,690 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,690 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,692 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,693 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,695 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,695 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,695 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,695 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: OBEH BVZ: OBEH_BZ V: V_BVZ_OBEH fertig mit 1 Zeilen und 75 Spalten.
2024-07-16 10:44:35,695 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,698 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PARI Quelle BZ: PARI_BZ BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:35,701 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,701 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,702 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,702 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,702 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,702 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PARI BVZ: PARI_BZ V: V_BVZ_PARI fertig mit 1 Zeilen und 31 Spalten.
2024-07-16 10:44:35,702 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,702 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PARZ Quelle BZ: PARZ_BZ BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:35,705 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,705 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,705 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,705 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,705 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,705 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PARZ BVZ: PARZ_BZ V: V_BVZ_PARZ fertig mit 1 Zeilen und 28 Spalten.
2024-07-16 10:44:35,705 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,711 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PGRP Quelle BZ: PGRP_BZ BV Zeilen: 3 BZ Zeilen: 3
2024-07-16 10:44:35,711 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: PGRP BZ: PGRP_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,711 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 3
2024-07-16 10:44:35,711 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,716 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,716 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 2
2024-07-16 10:44:35,716 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,716 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PGRP BVZ: PGRP_BZ V: V_BVZ_PGRP fertig mit 2 Zeilen und 61 Spalten.
2024-07-16 10:44:35,716 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,716 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PHTR Quelle BZ: PHTR_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,727 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: PHTR BZ: PHTR_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,727 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,729 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,729 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,729 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,735 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,735 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,735 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,735 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PHTR BVZ: PHTR_BZ V: V_BVZ_PHTR fertig mit 1 Zeilen und 65 Spalten.
2024-07-16 10:44:35,735 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,738 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PREG Quelle BZ: PREG_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,738 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: PREG BZ: PREG_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,738 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,738 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,741 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,741 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,744 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,744 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,744 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,744 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PREG BVZ: PREG_BZ V: V_BVZ_PREG fertig mit 1 Zeilen und 71 Spalten.
2024-07-16 10:44:35,744 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,753 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PUMP Quelle BZ: PUMP_BZ BV Zeilen: 3 BZ Zeilen: 3
2024-07-16 10:44:35,757 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: PUMP BZ: PUMP_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,757 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 3
2024-07-16 10:44:35,757 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,777 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,777 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 2
2024-07-16 10:44:35,777 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,777 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PUMP BVZ: PUMP_BZ V: V_BVZ_PUMP fertig mit 2 Zeilen und 142 Spalten.
2024-07-16 10:44:35,779 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,781 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PZVR Quelle BZ: PZVR_BZ BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:35,781 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,783 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,785 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,785 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,785 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,785 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PZVR BVZ: PZVR_BZ V: V_BVZ_PZVR fertig mit 1 Zeilen und 30 Spalten.
2024-07-16 10:44:35,786 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,788 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RADD Quelle BZ: RADD_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,791 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RADD BZ: RADD_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,791 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,792 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,793 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,793 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,798 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,798 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,798 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,798 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RADD BVZ: RADD_BZ V: V_BVZ_RADD fertig mit 1 Zeilen und 55 Spalten.
2024-07-16 10:44:35,798 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,801 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RART Quelle BZ: RART_BZ BV Zeilen: 4 BZ Zeilen: 4
2024-07-16 10:44:35,805 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RART BZ: RART_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,805 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 4
2024-07-16 10:44:35,806 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,807 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,807 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 3
2024-07-16 10:44:35,807 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,807 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RART BVZ: RART_BZ V: V_BVZ_RART fertig mit 3 Zeilen und 35 Spalten.
2024-07-16 10:44:35,807 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,809 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RDIV Quelle BZ: RDIV_BZ BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:35,811 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RDIV BZ: RDIV_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,811 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 2
2024-07-16 10:44:35,811 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,821 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,822 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,822 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,822 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RDIV BVZ: RDIV_BZ V: V_BVZ_RDIV fertig mit 1 Zeilen und 43 Spalten.
2024-07-16 10:44:35,822 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,824 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: REGV Quelle BZ: REGV_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,826 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: REGV BZ: REGV_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,827 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,827 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,828 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,829 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,833 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,834 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,834 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,834 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: REGV BVZ: REGV_BZ V: V_BVZ_REGV fertig mit 1 Zeilen und 68 Spalten.
2024-07-16 10:44:35,834 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,837 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RFKT Quelle BZ: RFKT_BZ BV Zeilen: 4 BZ Zeilen: 4
2024-07-16 10:44:35,840 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RFKT BZ: RFKT_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,840 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 4
2024-07-16 10:44:35,841 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,850 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,850 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 3
2024-07-16 10:44:35,850 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,851 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RFKT BVZ: RFKT_BZ V: V_BVZ_RFKT fertig mit 3 Zeilen und 44 Spalten.
2024-07-16 10:44:35,852 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,854 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RHYS Quelle BZ: RHYS_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,856 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RHYS BZ: RHYS_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,856 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,856 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,858 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,858 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,863 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,863 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,863 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,864 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RHYS BVZ: RHYS_BZ V: V_BVZ_RHYS fertig mit 1 Zeilen und 58 Spalten.
2024-07-16 10:44:35,864 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,865 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RINT Quelle BZ: RINT_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,868 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RINT BZ: RINT_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,868 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,869 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,869 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,869 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,877 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,877 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,877 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,878 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RINT BVZ: RINT_BZ V: V_BVZ_RINT fertig mit 1 Zeilen und 56 Spalten.
2024-07-16 10:44:35,878 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,879 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RLSR Quelle BZ: RLSR_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,880 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RLSR BZ: RLSR_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,880 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,880 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,883 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,883 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,888 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,888 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,888 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,888 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RLSR BVZ: RLSR_BZ V: V_BVZ_RLSR fertig mit 1 Zeilen und 54 Spalten.
2024-07-16 10:44:35,888 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,890 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RLVG Quelle BZ: RLVG_BZ BV Zeilen: 3 BZ Zeilen: 3
2024-07-16 10:44:35,892 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RLVG BZ: RLVG_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,892 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 3
2024-07-16 10:44:35,892 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,899 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,901 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 2
2024-07-16 10:44:35,901 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,901 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RLVG BVZ: RLVG_BZ V: V_BVZ_RLVG fertig mit 2 Zeilen und 42 Spalten.
2024-07-16 10:44:35,901 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,903 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RMES Quelle BZ: RMES_BZ BV Zeilen: 5 BZ Zeilen: 5
2024-07-16 10:44:35,906 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RMES BZ: RMES_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,906 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 5
2024-07-16 10:44:35,907 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,915 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,915 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 4
2024-07-16 10:44:35,915 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,915 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RMES BVZ: RMES_BZ V: V_BVZ_RMES fertig mit 4 Zeilen und 52 Spalten.
2024-07-16 10:44:35,915 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DPTS: Tabelle gibt es nicht. Falsche Paar-Ermittlung? Weiter. 
2024-07-16 10:44:35,915 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,918 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RMMA Quelle BZ: RMMA_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,919 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RMMA BZ: RMMA_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,919 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,921 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,923 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,924 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,928 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,928 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,929 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,929 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RMMA BVZ: RMMA_BZ V: V_BVZ_RMMA fertig mit 1 Zeilen und 55 Spalten.
2024-07-16 10:44:35,929 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,932 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RMUL Quelle BZ: RMUL_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,935 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RMUL BZ: RMUL_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,935 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,936 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,938 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:35,938 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:35,943 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,943 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:35,943 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,943 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RMUL BVZ: RMUL_BZ V: V_BVZ_RMUL fertig mit 1 Zeilen und 56 Spalten.
2024-07-16 10:44:35,943 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,963 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: ROHR Quelle BZ: ROHR_BZ BV Zeilen: 528 BZ Zeilen: 528
2024-07-16 10:44:35,966 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: ROHR BZ: ROHR_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,967 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 528
2024-07-16 10:44:35,968 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,992 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:35,993 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 527
2024-07-16 10:44:35,993 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:35,993 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ROHR BVZ: ROHR_BZ V: V_BVZ_ROHR fertig mit 527 Zeilen und 74 Spalten.
2024-07-16 10:44:35,993 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:35,995 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RPID Quelle BZ: RPID_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:35,997 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RPID BZ: RPID_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:35,997 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:35,999 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:35,999 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,000 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,006 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RPID BVZ: RPID_BZ V: V_BVZ_RPID fertig mit 1 Zeilen und 63 Spalten.
2024-07-16 10:44:36,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RPT1 Quelle BZ: RPT1_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RPT1 BZ: RPT1_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,011 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,011 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,011 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,017 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,017 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,019 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,019 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RPT1 BVZ: RPT1_BZ V: V_BVZ_RPT1 fertig mit 1 Zeilen und 56 Spalten.
2024-07-16 10:44:36,019 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,021 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RSLW Quelle BZ: RSLW_BZ BV Zeilen: 6 BZ Zeilen: 6
2024-07-16 10:44:36,023 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RSLW BZ: RSLW_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,023 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 6
2024-07-16 10:44:36,024 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,033 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,033 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 5
2024-07-16 10:44:36,033 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,033 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RSLW BVZ: RSLW_BZ V: V_BVZ_RSLW fertig mit 5 Zeilen und 50 Spalten.
2024-07-16 10:44:36,033 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,037 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RSTE Quelle BZ: RSTE_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,040 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RSTE BZ: RSTE_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,040 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,041 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,043 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,043 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,048 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,048 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,048 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,048 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RSTE BVZ: RSTE_BZ V: V_BVZ_RSTE fertig mit 1 Zeilen und 104 Spalten.
2024-07-16 10:44:36,049 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,051 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RSTN Quelle BZ: RSTN_BZ BV Zeilen: 9 BZ Zeilen: 9
2024-07-16 10:44:36,051 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RSTN BZ: RSTN_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,051 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 9
2024-07-16 10:44:36,051 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,068 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,068 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 8
2024-07-16 10:44:36,068 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,068 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RSTN BVZ: RSTN_BZ V: V_BVZ_RSTN fertig mit 8 Zeilen und 77 Spalten.
2024-07-16 10:44:36,068 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,069 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RTOT Quelle BZ: RTOT_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,071 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RTOT BZ: RTOT_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,071 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,072 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,073 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,073 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,078 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,078 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,078 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,078 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RTOT BVZ: RTOT_BZ V: V_BVZ_RTOT fertig mit 1 Zeilen und 55 Spalten.
2024-07-16 10:44:36,078 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,080 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RUES Quelle BZ: RUES_BZ BV Zeilen: 26 BZ Zeilen: 26
2024-07-16 10:44:36,083 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RUES BZ: RUES_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,084 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 26
2024-07-16 10:44:36,085 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,094 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,094 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 25
2024-07-16 10:44:36,094 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,094 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RUES BVZ: RUES_BZ V: V_BVZ_RUES fertig mit 25 Zeilen und 43 Spalten.
2024-07-16 10:44:36,094 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,098 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: SIVE Quelle BZ: SIVE_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,100 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: SIVE BZ: SIVE_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,100 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,101 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,103 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,103 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,109 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,109 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,109 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,109 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: SIVE BVZ: SIVE_BZ V: V_BVZ_SIVE fertig mit 1 Zeilen und 70 Spalten.
2024-07-16 10:44:36,110 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,113 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: STRO Quelle BZ: STRO_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,116 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: STRO BZ: STRO_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,116 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,117 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,119 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,119 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,125 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,126 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,126 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,126 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: STRO BVZ: STRO_BZ V: V_BVZ_STRO fertig mit 1 Zeilen und 72 Spalten.
2024-07-16 10:44:36,126 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,131 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: VENT Quelle BZ: VENT_BZ BV Zeilen: 13 BZ Zeilen: 13
2024-07-16 10:44:36,134 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: VENT BZ: VENT_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,134 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 13
2024-07-16 10:44:36,136 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,150 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,151 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 12
2024-07-16 10:44:36,152 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,152 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: VENT BVZ: VENT_BZ V: V_BVZ_VENT fertig mit 12 Zeilen und 69 Spalten.
2024-07-16 10:44:36,152 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,154 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: WIND Quelle BZ: WIND_BZ BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,159 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: WIND BZ: WIND_BZ: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,159 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,159 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,161 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,161 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,167 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,167 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,167 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,168 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: WIND BVZ: WIND_BZ V: V_BVZ_WIND fertig mit 1 Zeilen und 76 Spalten.
2024-07-16 10:44:36,168 ; PT3S                                                         ; DEBUG   ; Dx.__init__: pairType: _ROWS: ####
2024-07-16 10:44:36,168 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,171 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: ANTP Quelle BZ: ANTP_ROWS BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,175 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: ANTP BZ: ANTP_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,175 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,176 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,178 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,178 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,182 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,183 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,183 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,183 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ANTP BVZ: ANTP_ROWS V: V_BVZ_ANTP fertig mit 1 Zeilen und 43 Spalten.
2024-07-16 10:44:36,183 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,186 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: AVOS Quelle BZ: AVOS_ROWS BV Zeilen: 2 BZ Zeilen: 3
2024-07-16 10:44:36,190 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: AVOS BZ: AVOS_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,190 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 3
2024-07-16 10:44:36,191 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,191 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,191 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,198 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,198 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 3
2024-07-16 10:44:36,198 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,198 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: AVOS BVZ: AVOS_ROWS V: V_BVZ_AVOS fertig mit 3 Zeilen und 43 Spalten.
2024-07-16 10:44:36,199 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,202 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: ETAM Quelle BZ: ETAM_ROWS BV Zeilen: 2 BZ Zeilen: 7
2024-07-16 10:44:36,207 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: ETAM BZ: ETAM_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,207 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 7
2024-07-16 10:44:36,208 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,208 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,208 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,215 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,215 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 7
2024-07-16 10:44:36,215 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,215 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ETAM BVZ: ETAM_ROWS V: V_BVZ_ETAM fertig mit 7 Zeilen und 43 Spalten.
2024-07-16 10:44:36,215 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,218 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: ETAR Quelle BZ: ETAR_ROWS BV Zeilen: 2 BZ Zeilen: 7
2024-07-16 10:44:36,222 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: ETAR BZ: ETAR_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,222 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 7
2024-07-16 10:44:36,223 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,225 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,226 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,230 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,230 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 7
2024-07-16 10:44:36,230 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,230 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ETAR BVZ: ETAR_ROWS V: V_BVZ_ETAR fertig mit 7 Zeilen und 43 Spalten.
2024-07-16 10:44:36,230 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,234 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: ETAU Quelle BZ: ETAU_ROWS BV Zeilen: 2 BZ Zeilen: 7
2024-07-16 10:44:36,237 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: ETAU BZ: ETAU_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,238 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 7
2024-07-16 10:44:36,239 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,241 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,241 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,245 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,245 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 7
2024-07-16 10:44:36,245 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,245 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ETAU BVZ: ETAU_ROWS V: V_BVZ_ETAU fertig mit 7 Zeilen und 43 Spalten.
2024-07-16 10:44:36,246 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,249 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: KOMK Quelle BZ: KOMK_ROWS BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,253 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: KOMK BZ: KOMK_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,253 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,253 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,256 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,256 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,256 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,261 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,261 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,261 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: KOMK BVZ: KOMK_ROWS V: V_BVZ_KOMK fertig mit 1 Zeilen und 53 Spalten.
2024-07-16 10:44:36,261 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,263 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: MAPG Quelle BZ: MAPG_ROWS BV Zeilen: 3 BZ Zeilen: 3
2024-07-16 10:44:36,268 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: MAPG BZ: MAPG_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,268 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 3
2024-07-16 10:44:36,269 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,270 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,272 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,288 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: rowsXk: 3 rowsTk: 3 rowsPk: 2 - pk-Menge ist nicht leer; aber tk zieht alle.
2024-07-16 10:44:36,288 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,289 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 3
2024-07-16 10:44:36,289 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,289 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: MAPG BVZ: MAPG_ROWS V: V_BVZ_MAPG fertig mit 3 Zeilen und 60 Spalten.
2024-07-16 10:44:36,289 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,292 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PHI2 Quelle BZ: PHI2_ROWS BV Zeilen: 2 BZ Zeilen: 4
2024-07-16 10:44:36,294 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: PHI2 BZ: PHI2_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,294 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 4
2024-07-16 10:44:36,295 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,296 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,296 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,300 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,300 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 4
2024-07-16 10:44:36,300 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,300 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PHI2 BVZ: PHI2_ROWS V: V_BVZ_PHI2 fertig mit 4 Zeilen und 44 Spalten.
2024-07-16 10:44:36,300 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,303 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PHIV Quelle BZ: PHIV_ROWS BV Zeilen: 2 BZ Zeilen: 9
2024-07-16 10:44:36,304 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: PHIV BZ: PHIV_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,304 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 9
2024-07-16 10:44:36,307 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,309 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,309 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,312 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,312 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 9
2024-07-16 10:44:36,312 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,312 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PHIV BVZ: PHIV_ROWS V: V_BVZ_PHIV fertig mit 9 Zeilen und 43 Spalten.
2024-07-16 10:44:36,312 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,312 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PUMK Quelle BZ: PUMK_ROWS BV Zeilen: 2 BZ Zeilen: 8
2024-07-16 10:44:36,318 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: PUMK BZ: PUMK_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,318 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 8
2024-07-16 10:44:36,319 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,321 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,321 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,324 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,324 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 8
2024-07-16 10:44:36,324 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,324 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PUMK BVZ: PUMK_ROWS V: V_BVZ_PUMK fertig mit 8 Zeilen und 49 Spalten.
2024-07-16 10:44:36,324 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,326 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RPLAN Quelle BZ: RPLAN_ROWS BV Zeilen: 2 BZ Zeilen: 1
2024-07-16 10:44:36,328 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: RPLAN BZ: RPLAN_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,329 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,329 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,331 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,331 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,334 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,335 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,335 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,335 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RPLAN BVZ: RPLAN_ROWS V: V_BVZ_RPLAN fertig mit 1 Zeilen und 54 Spalten.
2024-07-16 10:44:36,335 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,337 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: SRAT Quelle BZ: SRAT_ROWS BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,340 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: SRAT BZ: SRAT_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,340 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,341 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,343 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,343 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,345 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,346 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,346 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,346 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: SRAT BVZ: SRAT_ROWS V: V_BVZ_SRAT fertig mit 1 Zeilen und 44 Spalten.
2024-07-16 10:44:36,346 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,350 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: STOF Quelle BZ: STOF_ROWS BV Zeilen: 2 BZ Zeilen: 201
2024-07-16 10:44:36,353 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: STOF BZ: STOF_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,354 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 201
2024-07-16 10:44:36,355 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,356 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,358 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,362 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,362 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 201
2024-07-16 10:44:36,362 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,362 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: STOF BVZ: STOF_ROWS V: V_BVZ_STOF fertig mit 201 Zeilen und 47 Spalten.
2024-07-16 10:44:36,362 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,368 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: TFKT Quelle BZ: TFKT_ROWS BV Zeilen: 4 BZ Zeilen: 423
2024-07-16 10:44:36,371 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: TFKT BZ: TFKT_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,371 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 423
2024-07-16 10:44:36,372 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,374 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,374 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,379 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,379 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 423
2024-07-16 10:44:36,381 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,381 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: TFKT BVZ: TFKT_ROWS V: V_BVZ_TFKT fertig mit 423 Zeilen und 43 Spalten.
2024-07-16 10:44:36,381 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,384 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: TRFT Quelle BZ: TRFT_ROWS BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:36,387 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: TRFT BZ: TRFT_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,388 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 2
2024-07-16 10:44:36,389 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,391 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,392 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,395 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,396 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 2
2024-07-16 10:44:36,396 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,396 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: TRFT BVZ: TRFT_ROWS V: V_BVZ_TRFT fertig mit 2 Zeilen und 43 Spalten.
2024-07-16 10:44:36,397 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,400 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: VARA Quelle BZ: VARA_ROWS BV Zeilen: 8 BZ Zeilen: 16
2024-07-16 10:44:36,404 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: VARA BZ: VARA_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,404 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 16
2024-07-16 10:44:36,405 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,407 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,408 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,411 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,412 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 16
2024-07-16 10:44:36,412 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,412 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: VARA BVZ: VARA_ROWS V: V_BVZ_VARA fertig mit 16 Zeilen und 63 Spalten.
2024-07-16 10:44:36,412 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,414 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: ZEP1 Quelle BZ: ZEP1_ROWS BV Zeilen: 3 BZ Zeilen: 21
2024-07-16 10:44:36,417 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: ZEP1 BZ: ZEP1_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 21
2024-07-16 10:44:36,418 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,419 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,420 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,423 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,423 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 21
2024-07-16 10:44:36,423 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,423 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ZEP1 BVZ: ZEP1_ROWS V: V_BVZ_ZEP1 fertig mit 21 Zeilen und 46 Spalten.
2024-07-16 10:44:36,423 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,427 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: ZEP2 Quelle BZ: ZEP2_ROWS BV Zeilen: 6 BZ Zeilen: 42
2024-07-16 10:44:36,429 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: ZEP2 BZ: ZEP2_ROWS: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,429 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 42
2024-07-16 10:44:36,430 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,433 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,433 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,437 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,437 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 42
2024-07-16 10:44:36,437 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,437 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: ZEP2 BVZ: ZEP2_ROWS V: V_BVZ_ZEP2 fertig mit 42 Zeilen und 48 Spalten.
2024-07-16 10:44:36,437 ; PT3S                                                         ; DEBUG   ; Dx.__init__: pairType: _ROWT: ####
2024-07-16 10:44:36,438 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,440 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: LFKT Quelle BZ: LFKT_ROWT BV Zeilen: 6 BZ Zeilen: 7
2024-07-16 10:44:36,441 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 6
2024-07-16 10:44:36,442 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,448 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,448 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 6
2024-07-16 10:44:36,448 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,448 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: LFKT BVZ: LFKT_ROWT V: V_BVZ_LFKT fertig mit 6 Zeilen und 38 Spalten.
2024-07-16 10:44:36,448 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,450 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PHI1 Quelle BZ: PHI1_ROWT BV Zeilen: 2 BZ Zeilen: 3
2024-07-16 10:44:36,452 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 2
2024-07-16 10:44:36,452 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,458 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,459 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 2
2024-07-16 10:44:36,459 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,459 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PHI1 BVZ: PHI1_ROWT V: V_BVZ_PHI1 fertig mit 2 Zeilen und 38 Spalten.
2024-07-16 10:44:36,459 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,461 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PUMD Quelle BZ: PUMD_ROWT BV Zeilen: 2 BZ Zeilen: 3
2024-07-16 10:44:36,461 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 2
2024-07-16 10:44:36,463 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,469 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,469 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 2
2024-07-16 10:44:36,469 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,469 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PUMD BVZ: PUMD_ROWT V: V_BVZ_PUMD fertig mit 2 Zeilen und 38 Spalten.
2024-07-16 10:44:36,469 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,471 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PVAR Quelle BZ: PVAR_ROWT BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:36,473 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,474 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,478 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,480 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,480 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,480 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PVAR BVZ: PVAR_ROWT V: V_BVZ_PVAR fertig mit 1 Zeilen und 38 Spalten.
2024-07-16 10:44:36,480 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,482 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: QVAR Quelle BZ: QVAR_ROWT BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:36,484 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,484 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,490 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,490 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,491 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,491 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: QVAR BVZ: QVAR_ROWT V: V_BVZ_QVAR fertig mit 1 Zeilen und 38 Spalten.
2024-07-16 10:44:36,491 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,493 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RCPL Quelle BZ: RCPL_ROWT BV Zeilen: 3 BZ Zeilen: 4
2024-07-16 10:44:36,494 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 3
2024-07-16 10:44:36,495 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,498 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: pairType ROWT: df hat keine Spalte ZEIT?!
2024-07-16 10:44:36,498 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,498 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 3
2024-07-16 10:44:36,498 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,499 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RCPL BVZ: RCPL_ROWT V: V_BVZ_RCPL fertig mit 3 Zeilen und 13 Spalten.
2024-07-16 10:44:36,499 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,639 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: SWVT Quelle BZ: SWVT_ROWT BV Zeilen: 8 BZ Zeilen: 17618
2024-07-16 10:44:36,650 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 17617
2024-07-16 10:44:36,651 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,709 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,729 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 17617
2024-07-16 10:44:36,729 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,729 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: SWVT BVZ: SWVT_ROWT V: V_BVZ_SWVT fertig mit 17617 Zeilen und 38 Spalten.
2024-07-16 10:44:36,729 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,729 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: TEVT Quelle BZ: TEVT_ROWT BV Zeilen: 3 BZ Zeilen: 4
2024-07-16 10:44:36,734 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 3
2024-07-16 10:44:36,736 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,743 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,744 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 3
2024-07-16 10:44:36,744 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,744 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: TEVT BVZ: TEVT_ROWT V: V_BVZ_TEVT fertig mit 3 Zeilen und 38 Spalten.
2024-07-16 10:44:36,744 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,747 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: WEVT Quelle BZ: WEVT_ROWT BV Zeilen: 2 BZ Zeilen: 2
2024-07-16 10:44:36,747 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 1
2024-07-16 10:44:36,750 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,760 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,762 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 1
2024-07-16 10:44:36,762 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,762 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: WEVT BVZ: WEVT_ROWT V: V_BVZ_WEVT fertig mit 1 Zeilen und 38 Spalten.
2024-07-16 10:44:36,762 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,768 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: WTTR Quelle BZ: WTTR_ROWT BV Zeilen: 1 BZ Zeilen: 1
2024-07-16 10:44:36,771 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: WTTR BZ: WTTR_ROWT: BVZ-Resultat LEER ?!
2024-07-16 10:44:36,771 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,778 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,778 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: WTTR BZ: WTTR_ROWT: BVZ-Resultat LEER nach CONT etc?!
2024-07-16 10:44:36,778 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,778 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: WTTR BVZ: WTTR_ROWT V: V_BVZ_WTTR fertig mit 0 Zeilen und 45 Spalten.
2024-07-16 10:44:36,778 ; PT3S                                                         ; DEBUG   ; Dx.__init__: pairType: _ROWD: ####
2024-07-16 10:44:36,778 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,786 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: DTRO Quelle BZ: DTRO_ROWD BV Zeilen: 5 BZ Zeilen: 73
2024-07-16 10:44:36,791 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BV: DTRO BZ: DTRO_ROWD: BVZ-Resultat mit tk > als mit pk. tk-Resultat wird verwendet.
2024-07-16 10:44:36,791 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 73
2024-07-16 10:44:36,793 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,795 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE_BZ ist vmtl. kein BZ-Schluessel, da es sich vmtl. um keine BZ-Eigenschaft handelt sondern um eine BV-Eigenschaft; Spalten werden umbenannt und es wird nach BV-DE gesucht ...
2024-07-16 10:44:36,795 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: fkDE ist auch in den Spalten ...
2024-07-16 10:44:36,801 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,802 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 73
2024-07-16 10:44:36,802 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,802 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: DTRO BVZ: DTRO_ROWD V: V_BVZ_DTRO fertig mit 73 Zeilen und 55 Spalten.
2024-07-16 10:44:36,802 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,805 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: PGRP_PUMP Quelle BZ: PGRP_PUMP_BZ BV Zeilen: 3 BZ Zeilen: 3
2024-07-16 10:44:36,808 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 2
2024-07-16 10:44:36,808 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,811 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,812 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 2
2024-07-16 10:44:36,812 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,812 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: PGRP_PUMP BVZ: PGRP_PUMP_BZ V: V_BVZ_PGRP_PUMP fertig mit 2 Zeilen und 26 Spalten.
2024-07-16 10:44:36,812 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Start.
2024-07-16 10:44:36,816 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: Quelle BV: RMES_DPTS Quelle BZ: RMES_DPTS_BZ BV Zeilen: 6 BZ Zeilen: 6
2024-07-16 10:44:36,816 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen: 5
2024-07-16 10:44:36,816 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,816 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,816 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: BVZ resultierende Zeilen nach CONT etc.: 5
2024-07-16 10:44:36,816 ; PT3S                                                         ; DEBUG   ; Dx.fHelper: _Done.
2024-07-16 10:44:36,816 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BV: RMES_DPTS BVZ: RMES_DPTS_BZ V: V_BVZ_RMES_DPTS fertig mit 5 Zeilen und 29 Spalten.
2024-07-16 10:44:36,824 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,826 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,826 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_AB_DEF
2024-07-16 10:44:36,826 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,834 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,834 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_AGSN
2024-07-16 10:44:36,835 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,839 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,839 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_ARRW
2024-07-16 10:44:36,839 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,851 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,851 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_ATMO
2024-07-16 10:44:36,854 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,854 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,854 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_BENUTZER
2024-07-16 10:44:36,854 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,863 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,863 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_BREF
2024-07-16 10:44:36,868 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,884 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: rowsXk: 4 rowsTk: 4 rowsPk: 3 - pk-Menge ist nicht leer; aber tk zieht alle.
2024-07-16 10:44:36,884 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,884 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_CIRC
2024-07-16 10:44:36,887 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,887 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,887 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_CONT
2024-07-16 10:44:36,894 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,911 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: rowsXk: 33 rowsTk: 33 rowsPk: 32 - pk-Menge ist nicht leer; aber tk zieht alle.
2024-07-16 10:44:36,911 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,911 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_CRGL
2024-07-16 10:44:36,914 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,914 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,914 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_DATENEBENE
2024-07-16 10:44:36,918 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,922 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,922 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_DPGR_DPKT
2024-07-16 10:44:36,922 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,928 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,928 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_DRNP
2024-07-16 10:44:36,928 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,936 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,936 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_ELEMENTQUERY
2024-07-16 10:44:36,939 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,942 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,942 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_FSTF
2024-07-16 10:44:36,944 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,947 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,947 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_FWBZ
2024-07-16 10:44:36,948 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,948 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,948 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_GEOMETRY_COLUMNS
2024-07-16 10:44:36,953 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,956 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,956 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_GKMP
2024-07-16 10:44:36,962 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,965 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,965 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_GMIX
2024-07-16 10:44:36,966 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,969 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,969 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_GRAV
2024-07-16 10:44:36,973 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,986 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: rowsXk: 2 rowsTk: 2 rowsPk: 1 - pk-Menge ist nicht leer; aber tk zieht alle.
2024-07-16 10:44:36,986 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,986 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_GTXT
2024-07-16 10:44:36,986 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,986 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,986 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_HAUS
2024-07-16 10:44:36,986 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:36,999 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:36,999 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_LAYR
2024-07-16 10:44:36,999 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,005 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,005 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_LTGR
2024-07-16 10:44:37,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,006 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,006 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_MODELL
2024-07-16 10:44:37,010 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,029 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: rowsXk: 27 rowsTk: 27 rowsPk: 26 - pk-Menge ist nicht leer; aber tk zieht alle.
2024-07-16 10:44:37,029 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,029 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_NRCV
2024-07-16 10:44:37,029 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,036 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,036 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_OVAL
2024-07-16 10:44:37,040 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,044 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,044 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_PARV
2024-07-16 10:44:37,044 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,050 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,050 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_PGPR
2024-07-16 10:44:37,053 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,086 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: rowsXk: 338 rowsTk: 338 rowsPk: 337 - pk-Menge ist nicht leer; aber tk zieht alle.
2024-07-16 10:44:37,086 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,086 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_PLYG
2024-07-16 10:44:37,087 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,089 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,089 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_POLY
2024-07-16 10:44:37,089 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,089 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,089 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_PROZESSE
2024-07-16 10:44:37,099 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,102 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,102 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_PZON
2024-07-16 10:44:37,105 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,108 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,108 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_RCON
2024-07-16 10:44:37,110 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,117 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,118 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_RECT
2024-07-16 10:44:37,119 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,123 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,123 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_REGP
2024-07-16 10:44:37,123 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,127 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,127 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_ROHR_VRTX
2024-07-16 10:44:37,129 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,145 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: rowsXk: 3 rowsTk: 3 rowsPk: 2 - pk-Menge ist nicht leer; aber tk zieht alle.
2024-07-16 10:44:37,145 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,145 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_RPFL
2024-07-16 10:44:37,146 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,153 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,153 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_RRCT
2024-07-16 10:44:37,159 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,163 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,163 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_SIRGRAF
2024-07-16 10:44:37,169 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,172 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,172 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_SOKO
2024-07-16 10:44:37,176 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,179 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,179 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_SPLZ
2024-07-16 10:44:37,182 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,184 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,184 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_STRASSE
2024-07-16 10:44:37,187 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,188 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,188 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_SYSTEMKONFIG
2024-07-16 10:44:37,189 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,193 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,193 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_TIMD
2024-07-16 10:44:37,196 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,199 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,199 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_TRVA
2024-07-16 10:44:37,202 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,205 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,205 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_UTMP
2024-07-16 10:44:37,208 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,212 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,212 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_VARA
2024-07-16 10:44:37,217 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,223 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,223 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_VERB
2024-07-16 10:44:37,225 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,243 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: rowsXk: 7 rowsTk: 7 rowsPk: 6 - pk-Menge ist nicht leer; aber tk zieht alle.
2024-07-16 10:44:37,243 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,243 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_VKNO
2024-07-16 10:44:37,244 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,249 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,249 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_VRCT
2024-07-16 10:44:37,251 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: Start.
2024-07-16 10:44:37,255 ; PT3S                                                         ; DEBUG   ; Dx.fHelperCONTetc: _Done.
2024-07-16 10:44:37,255 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V: V_WBLZ
2024-07-16 10:44:37,257 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V_BVZ_ROHR erweitern...
2024-07-16 10:44:37,279 ; PT3S                                                         ; DEBUG   ; Dx.__init__: weitere Erweiterung zu V3_ROHR ...
2024-07-16 10:44:37,285 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_SWVT ...
2024-07-16 10:44:37,333 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_ROWT ...
2024-07-16 10:44:37,370 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_TFKT ...
2024-07-16 10:44:37,372 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RSLW_SWVT ...
2024-07-16 10:44:37,418 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_KNOT ...
2024-07-16 10:44:37,450 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_FWVB ...
2024-07-16 10:44:37,466 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_:ROHR,KNOT,FWVB: filterTemplateObjects ...
2024-07-16 10:44:37,466 ; PT3S                                                         ; DEBUG   ; Dx._filterTemplateObjects: Start.
2024-07-16 10:44:37,466 ; PT3S                                                         ; DEBUG   ; Dx._filterTemplateObjects: _Done.
2024-07-16 10:44:37,466 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_VBEL ...
2024-07-16 10:44:37,481 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BEVE in VBEL-View mit fkKI (0,195) ...
2024-07-16 10:44:37,485 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BEVE in VBEL-View mit fkKI LEER! (0,195) ...
2024-07-16 10:44:37,485 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BEVE (Nebenschluss) in VBEL-View ...
2024-07-16 10:44:37,485 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BEWI in VBEL-View mit fkKI (0,194) ...
2024-07-16 10:44:37,485 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BEWI in VBEL-View mit fkKI LEER! (0,194) ...
2024-07-16 10:44:37,498 ; PT3S                                                         ; DEBUG   ; Dx.__init__: BEWI (Nebenschluss) in VBEL-View ...
2024-07-16 10:44:37,501 ; PT3S                                                         ; DEBUG   ; Dx.__init__: DPRG in VBEL-View mit fkKI (0,191) ...
2024-07-16 10:44:37,502 ; PT3S                                                         ; DEBUG   ; Dx.__init__: DPRG in VBEL-View mit fkKI LEER! (0,191) ...
2024-07-16 10:44:37,507 ; PT3S                                                         ; DEBUG   ; Dx.__init__: DPRG in VBEL-View mit fkKI und fkKK LEER! (0,191) ...
2024-07-16 10:44:37,507 ; PT3S                                                         ; DEBUG   ; Dx.__init__: DPRG final in VBEL-View mit fkKI und fkKK (0,192) ...
2024-07-16 10:44:37,512 ; PT3S                                                         ; DEBUG   ; Dx.__init__: FWES in VBEL-View mit fkKI (2,179) ...
2024-07-16 10:44:37,518 ; PT3S                                                         ; DEBUG   ; Dx.__init__: FWES final in VBEL-View mit fkKI und fkKK (2,299) ...
2024-07-16 10:44:37,518 ; PT3S                                                         ; DEBUG   ; Dx.__init__: FWVB in VBEL-View mit fkKI (338,202) ...
2024-07-16 10:44:37,528 ; PT3S                                                         ; DEBUG   ; Dx.__init__: FWVB final in VBEL-View mit fkKI und fkKK (338,322) ...
2024-07-16 10:44:37,533 ; PT3S                                                         ; DEBUG   ; Dx.__init__: GVWK in VBEL-View mit fkKI (0,186) ...
2024-07-16 10:44:37,533 ; PT3S                                                         ; DEBUG   ; Dx.__init__: GVWK in VBEL-View mit fkKI LEER! (0,186) ...
2024-07-16 10:44:37,533 ; PT3S                                                         ; DEBUG   ; Dx.__init__: GVWK in VBEL-View mit fkKI und fkKK LEER! (0,186) ...
2024-07-16 10:44:37,544 ; PT3S                                                         ; DEBUG   ; Dx.__init__: GVWK final in VBEL-View mit fkKI und fkKK (0,187) ...
2024-07-16 10:44:37,544 ; PT3S                                                         ; DEBUG   ; Dx.__init__: KLAP in VBEL-View mit fkKI (3,175) ...
2024-07-16 10:44:37,552 ; PT3S                                                         ; DEBUG   ; Dx.__init__: KLAP final in VBEL-View mit fkKI und fkKK (3,295) ...
2024-07-16 10:44:37,554 ; PT3S                                                         ; DEBUG   ; Dx.__init__: KOMP in VBEL-View mit fkKI (0,199) ...
2024-07-16 10:44:37,554 ; PT3S                                                         ; DEBUG   ; Dx.__init__: KOMP in VBEL-View mit fkKI LEER! (0,199) ...
2024-07-16 10:44:37,564 ; PT3S                                                         ; DEBUG   ; Dx.__init__: KOMP in VBEL-View mit fkKI und fkKK LEER! (0,199) ...
2024-07-16 10:44:37,564 ; PT3S                                                         ; DEBUG   ; Dx.__init__: KOMP final in VBEL-View mit fkKI und fkKK (0,200) ...
2024-07-16 10:44:37,566 ; PT3S                                                         ; DEBUG   ; Dx.__init__: MREG in VBEL-View mit fkKI (0,192) ...
2024-07-16 10:44:37,568 ; PT3S                                                         ; DEBUG   ; Dx.__init__: MREG in VBEL-View mit fkKI LEER! (0,192) ...
2024-07-16 10:44:37,568 ; PT3S                                                         ; DEBUG   ; Dx.__init__: MREG in VBEL-View mit fkKI und fkKK LEER! (0,192) ...
2024-07-16 10:44:37,568 ; PT3S                                                         ; DEBUG   ; Dx.__init__: MREG final in VBEL-View mit fkKI und fkKK (0,193) ...
2024-07-16 10:44:37,568 ; PT3S                                                         ; DEBUG   ; Dx.__init__: OBEH in VBEL-View mit fkKI (0,194) ...
2024-07-16 10:44:37,583 ; PT3S                                                         ; DEBUG   ; Dx.__init__: OBEH in VBEL-View mit fkKI LEER! (0,194) ...
2024-07-16 10:44:37,584 ; PT3S                                                         ; DEBUG   ; Dx.__init__: OBEH (Nebenschluss) in VBEL-View ...
2024-07-16 10:44:37,584 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PGRP in VBEL-View mit fkKI (2,180) ...
2024-07-16 10:44:37,584 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PGRP final in VBEL-View mit fkKI und fkKK (2,300) ...
2024-07-16 10:44:37,584 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PHTR in VBEL-View mit fkKI (0,184) ...
2024-07-16 10:44:37,601 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PHTR in VBEL-View mit fkKI LEER! (0,184) ...
2024-07-16 10:44:37,601 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PHTR in VBEL-View mit fkKI und fkKK LEER! (0,184) ...
2024-07-16 10:44:37,601 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PHTR final in VBEL-View mit fkKI und fkKK (0,185) ...
2024-07-16 10:44:37,608 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PREG in VBEL-View mit fkKI (0,190) ...
2024-07-16 10:44:37,608 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PREG in VBEL-View mit fkKI LEER! (0,190) ...
2024-07-16 10:44:37,617 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PREG in VBEL-View mit fkKI und fkKK LEER! (0,190) ...
2024-07-16 10:44:37,617 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PREG final in VBEL-View mit fkKI und fkKK (0,191) ...
2024-07-16 10:44:37,617 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PUMP in VBEL-View mit fkKI (2,261) ...
2024-07-16 10:44:37,617 ; PT3S                                                         ; DEBUG   ; Dx.__init__: PUMP final in VBEL-View mit fkKI und fkKK (2,381) ...
2024-07-16 10:44:37,617 ; PT3S                                                         ; DEBUG   ; Dx.__init__: REGV in VBEL-View mit fkKI (0,187) ...
2024-07-16 10:44:37,629 ; PT3S                                                         ; DEBUG   ; Dx.__init__: REGV in VBEL-View mit fkKI LEER! (0,187) ...
2024-07-16 10:44:37,635 ; PT3S                                                         ; DEBUG   ; Dx.__init__: REGV in VBEL-View mit fkKI und fkKK LEER! (0,187) ...
2024-07-16 10:44:37,635 ; PT3S                                                         ; DEBUG   ; Dx.__init__: REGV final in VBEL-View mit fkKI und fkKK (0,188) ...
2024-07-16 10:44:37,635 ; PT3S                                                         ; DEBUG   ; Dx.__init__: ROHR in VBEL-View mit fkKI (524,202) ...
2024-07-16 10:44:37,652 ; PT3S                                                         ; DEBUG   ; Dx.__init__: ROHR final in VBEL-View mit fkKI und fkKK (524,322) ...
2024-07-16 10:44:37,656 ; PT3S                                                         ; DEBUG   ; Dx.__init__: SIVE in VBEL-View mit fkKI (0,189) ...
2024-07-16 10:44:37,661 ; PT3S                                                         ; DEBUG   ; Dx.__init__: SIVE in VBEL-View mit fkKI LEER! (0,189) ...
2024-07-16 10:44:37,666 ; PT3S                                                         ; DEBUG   ; Dx.__init__: SIVE in VBEL-View mit fkKI und fkKK LEER! (0,189) ...
2024-07-16 10:44:37,668 ; PT3S                                                         ; DEBUG   ; Dx.__init__: SIVE final in VBEL-View mit fkKI und fkKK (0,190) ...
2024-07-16 10:44:37,668 ; PT3S                                                         ; DEBUG   ; Dx.__init__: STRO in VBEL-View mit fkKI (0,191) ...
2024-07-16 10:44:37,668 ; PT3S                                                         ; DEBUG   ; Dx.__init__: STRO in VBEL-View mit fkKI LEER! (0,191) ...
2024-07-16 10:44:37,668 ; PT3S                                                         ; DEBUG   ; Dx.__init__: STRO (Nebenschluss) in VBEL-View ...
2024-07-16 10:44:37,679 ; PT3S                                                         ; DEBUG   ; Dx.__init__: VENT in VBEL-View mit fkKI (12,188) ...
2024-07-16 10:44:37,684 ; PT3S                                                         ; DEBUG   ; Dx.__init__: VENT final in VBEL-View mit fkKI und fkKK (12,308) ...
2024-07-16 10:44:37,685 ; PT3S                                                         ; DEBUG   ; Dx.__init__: WIND in VBEL-View mit fkKI (0,195) ...
2024-07-16 10:44:37,685 ; PT3S                                                         ; DEBUG   ; Dx.__init__: WIND in VBEL-View mit fkKI LEER! (0,195) ...
2024-07-16 10:44:37,685 ; PT3S                                                         ; DEBUG   ; Dx.__init__: WIND (Nebenschluss) in VBEL-View ...
2024-07-16 10:44:37,895 ; PT3S                                                         ; DEBUG   ; Xm.constructNewMultiindexFromCols (classmethod): Start.
2024-07-16 10:44:38,023 ; PT3S                                                         ; DEBUG   ; Xm.constructNewMultiindexFromCols (classmethod): _Done.
2024-07-16 10:44:38,036 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_DPKT ...
2024-07-16 10:44:38,053 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RKNOT ...
2024-07-16 10:44:38,102 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RRUES ...
2024-07-16 10:44:38,136 ; PT3S                                                         ; DEBUG   ; Dx.__init__: vRUESDefs:                     pk                 fkDE                   rk                   tk BESCHREIBUNG  IOTYP          IDUE rkRUES               fkCONT DELETED SELECT1                pk_BZ              fkDE_BZ                   fk                                                                                                                                                                                                                       GRAF      MId MText Basis Variante   BZ            Geaendert             Erstellt              pk_VMBZ              fkBASIS           fkVARIANTE                 fkBZ  MZ  MT              pk_CONT            fkDE_CONT              rk_CONT              tk_CONT  ID_CONT      NAME_CONT  IDPARENT_CONT        rkPARENT_CONT  LFDNR_CONT                                                                                                                                               GRAF_CONT FONT_CONT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GEOM_CONT  DELETED_CONT  SELECT1_CONT IDREFERENZ_CONT              pk_Edge            fkDE_Edge              rk_Edge              tk_Edge          fkCONT_Edge                 fkKi                 fkKk  IdxKE                                                                                                                                                                             GRAF_Edge                                                                                                                                          GEOM DELETED_Edge SELECT1_Edge MId_Edge MText_Edge Basis_Edge Variante_Edge BZ_Edge       Geaendert_Edge        Erstellt_Edge           pk_VMBASIS         fkBASIS_Edge      fkVARIANTE_Edge            fkBZ_Edge  MZ_Edge  MT_Edge MId_VMVARIANTE MText_VMVARIANTE Basis_VMVARIANTE Variante_VMVARIANTE BZ_VMVARIANTE Geaendert_VMVARIANTE Erstellt_VMVARIANTE pk_VMVARIANTE fkBASIS_VMVARIANTE fkVARIANTE_VMVARIANTE fkBZ_VMVARIANTE  MZ_VMVARIANTE  MT_VMVARIANTE         pk_CONT_Edge       fkDE_CONT_Edge         rk_CONT_Edge         tk_CONT_Edge  ID_CONT_Edge NAME_CONT_Edge  IDPARENT_CONT_Edge   rkPARENT_CONT_Edge  LFDNR_CONT_Edge                                                                                                                                          GRAF_CONT_Edge FONT_CONT_Edgedge  DELETED_CONT_Edge  SELECT1_CONT_Edge IDREFERENZ_CONT_Edge
0  5652396753093639572  5306805303452857793  5652396753093639572  5652396753093639572         None    1.0            AT     -1  5152808213068069018    None    None  5611301811212421455  5303199883422352888  5652396753093639572     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x00\x80[@\x00\x00\x00(\x00\xc0l@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  5129392932965966935  5306805303452857793  5129392932965966935  5129392932965966935  5152808213068069018  4764083785981173370  5652396753093639572    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'        b'\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x10\xff\xffB@\x00\x00\x00(\x00\xc0l@\x00\x00\x00<\x00\x80V@\x00\x00\x00(\x00\xc0l@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018        1004.0  Laststeuerung              1001.0  5029128874972463118              3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
1  5017331996818877790  5306805303452857793  5017331996818877790  5017331996818877790         None    1.0           EIN     -1  5152808213068069018    None    None  5219045532064968569  5303199883422352888  5017331996818877790     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00j\xff\x7f[@\x00\x00\x00\x00\x00@p@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  4989130026898968917  5306805303452857793  4989130026898968917  4989130026898968917  5152808213068069018  4704658344940905235  5017331996818877790    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'           b'\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00l\xfd\xffB@\x00\x00\x00\x00\x00@p@\x00\x00\x00j\xff\x7fV@\x00\x00\x00\x00\x00@p@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018        1004.0  Laststeuerung              1001.0  5029128874972463118              3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
2  5154668592837439637  5306805303452857793  5154668592837439637  5154668592837439637         None    1.0           AUS     -1  5152808213068069018    None    None  5189034917573310517  5303199883422352888  5154668592837439637  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe7\xff\xffx@\x00\x00\x00\xf6\xff?p@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  5152085669602855101  5306805303452857793  5152085669602855101  5152085669602855101  5152808213068069018  5238909283782593579  5154668592837439637    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'        b'\x01\x02\x00\x00\x00\x02\x00\x00\x00\x9a\x99\x99]\x99\xb9s@\x00\x00\x00\xf6\xff?p@\x00\x00\x00\xe7\xff\xbfw@\x00\x00\x00\xf6\xff?p@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018        1004.0  Laststeuerung              1001.0  5029128874972463118              3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
3  5681282398891821623  5306805303452857793  5681282398891821623  5681282398891821623         None    1.0          Last     -1  5467315850619588583    None    None  4798769789152079893  5303199883422352888  5681282398891821623     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(\x00\xc0l@\x00\x00\x80*\x00\xe0p@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  5616632890700443366  5306805303452857793  5616632890700443366  5616632890700443366  5467315850619588583  4899351962406121892  5681282398891821623    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'           b'\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\xc0\xfe\xffG@\x00\x00\x80*\x00\xe0p@\x00\x00\x00(\x00@j@\x00\x00\x80*\x00\xe0p@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583        1005.0  Sekundärwerte              1001.0  5029128874972463118              4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
4  5454010556940119444  5306805303452857793  5454010556940119444  5454010556940119444         None    1.0     Erzeugung     -1  5467315850619588583    None    None  4902534816460845683  5303199883422352888  5454010556940119444     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(\x00\xc0l@\x00\x00\x00<\x00\x80k@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  5232979740873075215  5306805303452857793  5232979740873075215  5232979740873075215  5467315850619588583  5554547908379981123  5454010556940119444    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'           b'\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\xc0\xfe\xffG@\x00\x00\x00<\x00\x80k@\x00\x00\x00(\x00@j@\x00\x00\x00<\x00\x80k@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583        1005.0  Sekundärwerte              1001.0  5029128874972463118              4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
5  4773715700416343129  5306805303452857793  4773715700416343129  4773715700416343129         None    1.0           UWM     -1  5467315850619588583    None    None  5532934288504139447  5303199883422352888  4773715700416343129        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(\x00`}@\x00\x00\x00P\x00\x80k@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  4942865049964398556  5306805303452857793  4942865049964398556  4942865049964398556  5467315850619588583  5255082225302217802  4773715700416343129    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'           b'\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\xec\xff\xffq@\x00\x00\x00P\x00\x80k@\x00\x00\x00(\x00 |@\x00\x00\x00P\x00\x80k@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583        1005.0  Sekundärwerte              1001.0  5029128874972463118              4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
6  5495489035389124693  5306805303452857793  5495489035389124693  5495489035389124693         None    1.0          ADum     -1  5467315850619588583    None    None  4634891596196531628  5303199883422352888  5495489035389124693  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x00\x00i@\x00\x00\x00\xdc\x00\x80Q@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  5352497895710460274  5306805303452857793  5352497895710460274  5352497895710460274  5467315850619588583  5701283470764046067  5495489035389124693    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  b'\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\xc0\xfe\xffG@\x00\x00\x00\xdc\x00\x80Q@\x00\x00\x00d\x00\x80f@\x00\x00\x00\xdc\x00\x80Q@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583        1005.0  Sekundärwerte              1001.0  5029128874972463118              4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
7  5655043989892249739  5306805303452857793  5655043989892249739  5655043989892249739         None    1.0  NetzTrennEin     -1  5320319133990336755    None    None  5591461881737130487  5303199883422352888  5655043989892249739  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa6\xff?e@\x00\x00\x00\xec\xff\xdfp@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755   1006.0   Netztrennung         1001.0  5029128874972463118         5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  4687337340695597135  5306805303452857793  4687337340695597135  4687337340695597135  5320319133990336755  5347287125110176930  5655043989892249739    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  b'\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00p\xfe\xffL@\x00\x00\x00\xec\xff\xdfp@\x00\x00\x00\xa6\xff\xbfb@\x00\x00\x00\xec\xff\xdfp@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755        1006.0   Netztrennung              1001.0  5029128874972463118              5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
8  5023649973180598521  5306805303452857793  5023649973180598521  5023649973180598521         None    1.0  NetzTrennAus     -1  5320319133990336755    None    None  4749671527486960357  5303199883422352888  5023649973180598521  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00n@\x00\x00\x00(\x00\xc0l@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888   0   1  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755   1006.0   Netztrennung         1001.0  5029128874972463118         5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1  5396939191077469200  5306805303452857793  5396939191077469200  5396939191077469200  5320319133990336755  5482891284237998767  5023649973180598521    NaN  b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'                    b'\x01\x02\x00\x00\x00\x02\x00\x00\x00333\x1533b@\x00\x00\x00(\x00\xc0l@\x00\x00\x00\x14\x00\x80k@\x00\x00\x00(\x00\xc0l@'         None         None  M-1-0-1                    B1            V0     BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888      0.0      1.0            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755        1006.0   Netztrennung              1001.0  5029128874972463118              5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'           None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'                NaN                NaN                   -1
2024-07-16 10:44:38,207 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RKNOT:                      pk                 fkDE                   rk                   tk BESCHREIBUNG            Kn  WMIN  WMAX INDWBG INDWNO               fkCONT DELETED SELECT1 IDREFERENZ                pk_BZ              fkDE_BZ                   fk  INDSLW  SLWKON               fkSWVT               fkLFKT                                                                                                                                                                                                                          GRAF      MId MText Basis Variante   BZ            Geaendert             Erstellt              pk_VMBZ              fkBASIS           fkVARIANTE                 fkBZ   MZ   MT              pk_CONT            fkDE_CONT              rk_CONT              tk_CONT  ID_CONT      NAME_CONT  IDPARENT_CONT        rkPARENT_CONT  LFDNR_CONT                                                                                                                                               GRAF_CONT FONT_CONT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GEOM_CONT  DELETED_CONT  SELECT1_CONT IDREFERENZ_CONT OBJTYPE MESDT0  INDAGGREG  XUMM  XUMB INDXUM          XMIN          XMAX INDXBG INDXNO   X0    XU    XO XSTART INDHYS pk_BV fkDE_BV pk_VMBASIS MId_VMVARIANTE MText_VMVARIANTE Basis_VMVARIANTE Variante_VMVARIANTE BZ_VMVARIANTE Geaendert_VMVARIANTE Erstellt_VMVARIANTE pk_VMVARIANTE fkBASIS_VMVARIANTE fkVARIANTE_VMVARIANTE fkBZ_VMVARIANTE  MZ_VMVARIANTE  MT_VMVARIANTE  INDTYP INDMMA INDADD KONST INDMUL        MINDIV  INDDIV  TTOT    KP    T1   UGR   OGR    KI    KD    TD XDZUL INDEIN INDINT INDDIF  WIRK INDFKT               fkTFKT    ITYP   TYP  YMin  YMax   YS1   YS2  INDYNO          DSDT fkVENT fkPREG fkDPRG fkMREG fkFWES fkRART fkPGRP fkREGV fkKNOT               fkROHR fkPUMP fkOBEH fkKOMP fkGVWK fkPUMPPG fkRARTPG fkPHI1 fkPUMD               fkTEVT fkWEVT fkPVAR fkQVAR fkRCPL fkRCPL_ROWT  IAKTIV
0   4764083785981173370  5306805303452857793  4764083785981173370  4764083785981173370         None            AT  None  None   None   None  5152808213068069018    None    None         -1  5398277262476024391  5303199883422352888  4764083785981173370     1.0     NaN  5355550039103568011                   -1        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \xfe\xff=@\x00\x00\x00(\x00\xc0l@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSLW    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
1   4704658344940905235  5306805303452857793  4704658344940905235  4704658344940905235         None           EIN  None  None   None   None  5152808213068069018    None    None         -1  5111736983855779643  5303199883422352888  4704658344940905235     0.0     1.0  4646902528678270129                   -1     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd8\xfa\xff=@\x00\x00\x00\x00\x00@p@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSLW    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
2   5361452811584248834  5306805303452857793  5361452811584248834  5361452811584248834         None       KA-0013  None  None   None   None  5152808213068069018    None    None         -1  4796851792577773021  5303199883422352888  5361452811584248834     1.0     NaN  5451719815872423356                   -1        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00#\x00@u@\x00\x00\x00\xba\xff\xffc@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSLW    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
3   5347287125110176930  5306805303452857793  5347287125110176930  5347287125110176930         None  NetzTrennEin  None  None   None   None  5320319133990336755    None    None         -1  5263901793926175173  5303199883422352888  5347287125110176930     NaN     0.0                   -1                   -1     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\xfe\xffH@\x00\x00\x00\xec\xff\xdfp@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755   1006.0   Netztrennung         1001.0  5029128874972463118         5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSLW    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
4   5701283470764046067  5306805303452857793  5701283470764046067  5701283470764046067         None          ADum  None  None   None   None  5467315850619588583    None    None         -1  5548118174547153720  5303199883422352888  5701283470764046067     NaN   666.0                   -1                   -1  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xfe\xffC@\x00\x00\x00\xdc\x00\x80Q@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSLW    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
5   4899351962406121892  5306805303452857793  4899351962406121892  4899351962406121892         None          Last   NaN   NaN    NaN    NaN  5467315850619588583    None    None         -1  5581568638130175854  5303199883422352888  4899351962406121892     NaN     NaN                  NaN                  NaN     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xfe\xffC@\x00\x00\x80*\x00\xe0p@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RMES   None        1.0   1.0  None   None -1.000000e+20  1.000000e+20   None   None  0.0   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
6   5554547908379981123  5306805303452857793  5554547908379981123  5554547908379981123         None     Erzeugung   NaN   NaN    NaN    NaN  5467315850619588583    None    None         -1  5376498240805203193  5303199883422352888  5554547908379981123     NaN     NaN                  NaN                  NaN     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xfe\xffC@\x00\x00\x00<\x00\x80k@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RMES   None        NaN   1.0  None   None -1.000000e+20  1.000000e+20   None   None  0.0   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
7   5160818540285121568  5306805303452857793  5160818540285121568  5160818540285121568         None         WVerl   NaN   NaN    NaN    NaN  5467315850619588583    None    None         -1  5177759467566970295  5303199883422352888  5160818540285121568     NaN     NaN                  NaN                  NaN     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xfe\xffC@\x00\x00\x00\xf6\xff?`@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RMES   None        NaN   1.0  None   None -1.000000e+20  1.000000e+20   None   None  0.0   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
8   5255082225302217802  5306805303452857793  5255082225302217802  5255082225302217802         None           UWM   NaN   NaN    NaN    NaN  5467315850619588583    None    None         -1  5653007751140151643  5303199883422352888  5255082225302217802     NaN     NaN                  NaN                  NaN     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\xff\x7fq@\x00\x00\x00P\x00\x80k@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RMES   None        NaN   1.0  None   None -1.000000e+20  1.000000e+20   None   None  0.0   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
9                    -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RHYS    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN  None  None   None   None    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
10  5482891284237998767  5306805303452857793  5482891284237998767  5482891284237998767         None       KA-0008   NaN   NaN    NaN    NaN  5320319133990336755    None    None        NaN  4882937510908801481  5303199883422352888  5482891284237998767     NaN     NaN                  NaN                  NaN     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe2\xff\x7fa@\x00\x00\x00(\x00\xc0l@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755   1006.0   Netztrennung         1001.0  5029128874972463118         5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RLVG    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     1.0    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
11  5238909283782593579  5306805303452857793  5238909283782593579  5238909283782593579         None       KA-0011   NaN   NaN    NaN    NaN  5152808213068069018    None    None        NaN  5721944142295494628  5303199883422352888  5238909283782593579     NaN     NaN                  NaN                  NaN        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc4\xff_s@\x00\x00\x00\xf6\xff?p@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RLVG    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     1.0    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
12                   -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RLSR    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
13                   -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RMMA    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN   None    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
14                   -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RADD    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN   None   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
15                   -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RMUL    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN  None   None           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
16  5105729699655079411  5306805303452857793  5105729699655079411  5105729699655079411         None     WVerlProz   NaN   NaN    NaN    NaN  5467315850619588583    None    None        NaN  5243161993938561150  5303199883422352888  5105729699655079411     NaN     NaN                  NaN                  NaN           b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x00@j@\x00\x00\x00\xf6\xff?`@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5467315850619588583  5306805303452857793  5467315850619588583  5467315850619588583   1005.0  Sekundärwerte         1001.0  5029128874972463118         4.0        b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xba=a\x99\xc3%A\xec\xd1\xee!xGUA\xe1J\xf1q\x0e\xc4%A\xec\xd1/\xe3\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RDIV    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN  1.000000e-20     1.0   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
17                   -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RTOT    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN  None   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
18                   -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RPT1    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN  None  None   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
19                   -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RINT    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN  None  None   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
20                   -1                 None                 None                 None         None          None   NaN   NaN    NaN    NaN                 None    None    None        NaN                  NaN                  NaN                 None     NaN     NaN                  NaN                  NaN                                                                                                                                                                                                                          None      NaN   NaN   NaN      NaN  NaN                  NaN                  NaN                  NaN                  NaN                  NaN                  NaN  NaN  NaN                   -1                 None                 None                 None      NaN           None            NaN                 None         NaN                                                                                                                                                    None      Noneone           NaN           NaN            None    RPID    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN    -1    None        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN  None   NaN   NaN   NaN  None  None  None  None   None   None   None  None    NaN                  NaN     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
21  4836221118111466566  5306805303452857793  4836221118111466566  4836221118111466566         None           TVL   NaN   NaN    NaN    NaN  5152808213068069018    None    None        NaN  5389680198995907198  5303199883422352888  4836221118111466566     NaN     NaN                  NaN                   -1  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00^@\x00\x00\x00\xba\xff\xffS@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RFKT    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN   None  4721658077821222848     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
22  5737169626127702346  5306805303452857793  5737169626127702346  5737169626127702346         None          TRSP   NaN   NaN    NaN    NaN  5152808213068069018    None    None        NaN  5615503654930740688  5303199883422352888  5737169626127702346     NaN     NaN                  NaN                   -1  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00^@\x00\x00\x00\xe8\xfe\xff3@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RFKT    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN   None  5009806991860651050     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
23  4749235746818978528  5306805303452857793  4749235746818978528  4749235746818978528         None            LF   NaN   NaN    NaN    NaN  5152808213068069018    None    None        NaN  5412507797466890600  5303199883422352888  4749235746818978528     NaN     NaN                  NaN                   -1     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x02\x00^@\x00\x00\x00\xe7\xff\xbfb@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RFKT    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN   None  4918040286074072217     NaN   NaN   NaN   NaN   NaN   NaN     NaN           NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN      NaN      NaN    NaN    NaN                  NaN    NaN    NaN    NaN    NaN         NaN     NaN
24  5003482158126479748  5306805303452857793  5003482158126479748  5003482158126479748         None       KA-0001   NaN   NaN    NaN    NaN  5152808213068069018    None    None         -1  5359379337846528699  5303199883422352888  5003482158126479748     NaN     NaN                   -1                   -1  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\xff\xbfg@\x00\x00\x00\xba\xff\xffS@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSTN    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN   901.0  TEVT  None  None  None  None     1.0  1.000000e+10     -1     -1     -1     -1     -1     -1     -1     -1     -1                   -1     -1     -1     -1     -1       -1       -1     -1     -1  5420151349188164622     -1     -1     -1     -1        None     1.0
25  5105312764349169697  5306805303452857793  5105312764349169697  5105312764349169697         None       KA-0003   NaN   NaN    NaN    NaN  5152808213068069018    None    None         -1  5114715472646439147  5303199883422352888  5105312764349169697     NaN     NaN                   -1                   -1  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\xff\xbfg@\x00\x00\x00\xe8\xfe\xff3@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSTN    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN   901.0  TEVT  None  None  None  None     1.0  1.000000e+10     -1     -1     -1     -1     -1     -1     -1     -1     -1                   -1     -1     -1     -1     -1       -1       -1     -1     -1  5395645951786400348     -1     -1     -1     -1        None     1.0
26  5544227354996537476  5306805303452857793  5544227354996537476  5544227354996537476         None       KA-0005   NaN   NaN    NaN    NaN  5152808213068069018    None    None         -1  4878048229853928796  5303199883422352888  5544227354996537476     NaN     NaN                   -1  4835417738045943522    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x01\xc0g@\x00\x00\x00\xe7\xff\xbfb@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSTN    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN   901.0  LFKT  None  None  None  None     1.0  1.000000e+10     -1     -1     -1     -1     -1     -1     -1     -1     -1                   -1     -1     -1     -1     -1       -1       -1     -1     -1  5395645951786400348     -1     -1     -1     -1        None     1.0
27  5484778231675052218  5306805303452857793  5484778231675052218  5484778231675052218         None       KA-0012   NaN   NaN    NaN    NaN  5152808213068069018    None    None         -1  5355199053191802018  5303199883422352888  5484778231675052218     NaN     NaN                   -1  4835417738045943522        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80%\x00@z@\x00\x00\x00\xe7\xff\xffc@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5152808213068069018  5306805303452857793  5152808213068069018  5152808213068069018   1004.0  Laststeuerung         1001.0  5029128874972463118         3.0  b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1:\xe1\xd1r\xc2%A\xecqm\x99xGUA\xe1\xba\x96\xce\xdf\xc2%A\xec\xa1\xb0\xad\x81GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None                                               b'\x00\x00\x80?\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x01\x00\x00\x00\xcd\xcc\xcc4\xce\xcc0@\x80\x14\xaeGY{\xb4\xbffffaf\xa6j@fff f\xa6f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00 \x8a\x0eA\x01\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSTN    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN   901.0  LFKT  None  None  None  None     1.0  1.000000e+10     -1     -1     -1     -1     -1     -1     -1     -1     -1                   -1     -1     -1     -1     -1       -1       -1     -1     -1  5395645951786400348     -1     -1     -1     -1          -1     1.0
28  5742334289958884145  5306805303452857793  5742334289958884145  5742334289958884145         None       KA-0006   NaN   NaN    NaN    NaN  5320319133990336755    None    None         -1  4923877300759462124  5303199883422352888  5742334289958884145     NaN     NaN                   -1                   -1  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xba\xff\xffc@\x00\x00\x00\xce\xff\xbfb@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755   1006.0   Netztrennung         1001.0  5029128874972463118         5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSTN    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN  1003.0  ROHR  None  None  None  None     1.0  1.000000e+10     -1     -1     -1     -1     -1     -1     -1     -1     -1  5119633900217288954     -1     -1     -1     -1       -1       -1     -1     -1                   -1     -1     -1     -1     -1          -1     1.0
29  5362971211365129752  5306805303452857793  5362971211365129752  5362971211365129752         None       KA-0007   NaN   NaN    NaN    NaN  5320319133990336755    None    None         -1  4643853039079273435  5303199883422352888  5362971211365129752     NaN     NaN                   -1                   -1        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~\xff_x@\x00\x00\x00\xe2\xff\xbfb@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755   1006.0   Netztrennung         1001.0  5029128874972463118         5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSTN    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN  1003.0  ROHR  None  None  None  None     1.0  1.000000e+10     -1     -1     -1     -1     -1     -1     -1     -1     -1  5737735714239704290     -1     -1     -1     -1       -1       -1     -1     -1                   -1     -1     -1     -1     -1          -1     1.0
30  5741368318336706383  5306805303452857793  5741368318336706383  5741368318336706383         None       KA-0009   NaN   NaN    NaN    NaN  5320319133990336755    None    None         -1  5398285437155662684  5303199883422352888  5741368318336706383     NaN     NaN                   -1                   -1  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xce\xff\xffc@\x00\x00\x00\xe8\xfe\xffS@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755   1006.0   Netztrennung         1001.0  5029128874972463118         5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSTN    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN  1002.0  ROHR  None  None  None  None     1.0  1.000000e+10     -1     -1     -1     -1     -1     -1     -1     -1     -1  5119633900217288954     -1     -1     -1     -1       -1       -1     -1     -1                   -1     -1     -1     -1     -1          -1     1.0
31  5398168757340619997  5306805303452857793  5398168757340619997  5398168757340619997         None       KA-0010   NaN   NaN    NaN    NaN  5320319133990336755    None    None         -1  5737604235339027947  5303199883422352888  5398168757340619997     NaN     NaN                   -1                   -1     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\xff_x@\x00\x00\x00\x10\xff\xffS@\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  M-1-0-1          B1       V0  BZ1  2024-04-03 12:25:36  2022-10-12 11:52:19  4848839598324457800  5306805303452857793  5525309167386767014  5303199883422352888  0.0  1.0  5320319133990336755  5306805303452857793  5320319133990336755  5320319133990336755   1006.0   Netztrennung         1001.0  5029128874972463118         5.0              b'\x00\x00\x00\x00\x00\x00\x00\x00\xe1*\xb2\x18\x8d\xc4%A\xec=\x08ixGUA\xe1Zs\x7f\xef\xc4%A\xec]z3\x82GUA\x05\x00\x00\x00\x00\x00\x00\x00'      None  b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00\x00@\x8f@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x7f@\x00\x00\x00\x00\x00\xc0r@\x00\x00\x00\x00\x00@o@\x00\x00\x00\x00\x00\x80f@\x00\x00\x00\x00f\x00\x00\x00-C\x1c\xeb\xe26*?\x00\x00\x00\x00\x00\x00\xf0?\xfc\xa9\xf1\xd2MbP?\x00\x00\x00\x00\x00\x00\xf0?'           NaN           NaN              -1    RSTN    NaN        NaN   NaN   NaN    NaN           NaN           NaN    NaN    NaN  NaN   NaN   NaN    NaN    NaN   NaN     NaN        NaN            NaN              NaN              NaN                 NaN           NaN                  NaN                 NaN           NaN                NaN                   NaN             NaN            NaN            NaN     NaN    NaN    NaN   NaN    NaN           NaN     NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN    NaN    NaN    NaN   NaN    NaN                  NaN  1002.0  ROHR  None  None  None  None     1.0  1.000000e+10     -1     -1     -1     -1     -1     -1     -1     -1     -1  5737735714239704290     -1     -1     -1     -1       -1       -1     -1     -1                   -1     -1     -1     -1     -1          -1     1.0
2024-07-16 10:44:38,226 ; PT3S                                                         ; DEBUG   ; Dx.__init__: vRUESDefsSRCs:                 pk_DEF               tk_DEF      IDUE_DEF OBJTYPE_SRC            OBJID_SRC        Kn_SRC  NAME_CONT_SRC
6  5495489035389124693  5495489035389124693          ADum        RSLW  5701283470764046067          ADum  Sekundärwerte
0  5652396753093639572  5652396753093639572            AT        RSLW  4764083785981173370            AT  Laststeuerung
2  5154668592837439637  5154668592837439637           AUS        RLVG  5238909283782593579       KA-0011  Laststeuerung
1  5017331996818877790  5017331996818877790           EIN        RSLW  4704658344940905235           EIN  Laststeuerung
4  5454010556940119444  5454010556940119444     Erzeugung        RMES  5554547908379981123     Erzeugung  Sekundärwerte
3  5681282398891821623  5681282398891821623          Last        RMES  4899351962406121892          Last  Sekundärwerte
8  5023649973180598521  5023649973180598521  NetzTrennAus        RLVG  5482891284237998767       KA-0008   Netztrennung
7  5655043989892249739  5655043989892249739  NetzTrennEin        RSLW  5347287125110176930  NetzTrennEin   Netztrennung
5  4773715700416343129  4773715700416343129           UWM        RMES  5255082225302217802           UWM  Sekundärwerte
2024-07-16 10:44:38,226 ; PT3S                                                         ; DEBUG   ; Dx.__init__: IDUE_DEF: AUS != Kn_SRC: KA-0011 - ggf. ungewollt? ...
2024-07-16 10:44:38,226 ; PT3S                                                         ; DEBUG   ; Dx.__init__: IDUE_DEF: NetzTrennAus != Kn_SRC: KA-0008 - ggf. ungewollt? ...
2024-07-16 10:44:38,234 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RUES Schritt 1:         NAME_CONT          IDUE      IDUE_DEF        Kn_SRC               rkRUES
13  Sekundärwerte          ADum          ADum          ADum                   -1
0   Laststeuerung            AT            AT            AT                   -1
7   Laststeuerung           AUS           AUS       KA-0011                   -1
1   Laststeuerung           EIN           EIN           EIN                   -1
10  Sekundärwerte     Erzeugung     Erzeugung     Erzeugung                   -1
9   Sekundärwerte          Last          Last          Last                   -1
20   Netztrennung  NetzTrennAus  NetzTrennAus       KA-0008                   -1
14   Netztrennung  NetzTrennEin  NetzTrennEin  NetzTrennEin                   -1
12  Sekundärwerte           UWM           UWM           UWM                   -1
2   Laststeuerung          None           NaN           NaN  5017331996818877790
3   Laststeuerung          None           NaN           NaN  5017331996818877790
4   Laststeuerung          None           NaN           NaN  5652396753093639572
5   Laststeuerung          None           NaN           NaN  5154668592837439637
6   Laststeuerung          None           NaN           NaN  5017331996818877790
8   Laststeuerung          None           NaN           NaN  5017331996818877790
11  Sekundärwerte          None           NaN           NaN  5454010556940119444
15   Netztrennung          None           NaN           NaN  5495489035389124693
16   Netztrennung          None           NaN           NaN  5655043989892249739
17   Netztrennung          None           NaN           NaN  5495489035389124693
18   Netztrennung          None           NaN           NaN  5655043989892249739
19   Netztrennung          None           NaN           NaN  5655043989892249739
21   Netztrennung          None           NaN           NaN  5495489035389124693
22   Netztrennung          None           NaN           NaN  5023649973180598521
23   Netztrennung          None           NaN           NaN  5495489035389124693
24   Netztrennung          None           NaN           NaN  5023649973180598521
2024-07-16 10:44:38,259 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RUES Final:         NAME_CONT  NAME_CONT_SRC OBJTYPE_SRC          IDUE      IDUE_DEF        Kn_SRC               rkRUES               pk_DEF
17   Netztrennung  Sekundärwerte        RSLW          None          ADum          ADum  5495489035389124693  5495489035389124693
23   Netztrennung  Sekundärwerte        RSLW          None          ADum          ADum  5495489035389124693  5495489035389124693
13  Sekundärwerte  Sekundärwerte        RSLW          ADum          ADum          ADum                   -1  5495489035389124693
21   Netztrennung  Sekundärwerte        RSLW          None          ADum          ADum  5495489035389124693  5495489035389124693
15   Netztrennung  Sekundärwerte        RSLW          None          ADum          ADum  5495489035389124693  5495489035389124693
0   Laststeuerung  Laststeuerung        RSLW            AT            AT            AT                   -1  5652396753093639572
4   Laststeuerung  Laststeuerung        RSLW          None            AT            AT  5652396753093639572  5652396753093639572
5   Laststeuerung  Laststeuerung        RLVG          None           AUS       KA-0011  5154668592837439637  5154668592837439637
7   Laststeuerung  Laststeuerung        RLVG           AUS           AUS       KA-0011                   -1  5154668592837439637
1   Laststeuerung  Laststeuerung        RSLW           EIN           EIN           EIN                   -1  5017331996818877790
2   Laststeuerung  Laststeuerung        RSLW          None           EIN           EIN  5017331996818877790  5017331996818877790
3   Laststeuerung  Laststeuerung        RSLW          None           EIN           EIN  5017331996818877790  5017331996818877790
6   Laststeuerung  Laststeuerung        RSLW          None           EIN           EIN  5017331996818877790  5017331996818877790
8   Laststeuerung  Laststeuerung        RSLW          None           EIN           EIN  5017331996818877790  5017331996818877790
10  Sekundärwerte  Sekundärwerte        RMES     Erzeugung     Erzeugung     Erzeugung                   -1  5454010556940119444
11  Sekundärwerte  Sekundärwerte        RMES          None     Erzeugung     Erzeugung  5454010556940119444  5454010556940119444
9   Sekundärwerte  Sekundärwerte        RMES          Last          Last          Last                   -1  5681282398891821623
22   Netztrennung   Netztrennung        RLVG          None  NetzTrennAus       KA-0008  5023649973180598521  5023649973180598521
20   Netztrennung   Netztrennung        RLVG  NetzTrennAus  NetzTrennAus       KA-0008                   -1  5023649973180598521
24   Netztrennung   Netztrennung        RLVG          None  NetzTrennAus       KA-0008  5023649973180598521  5023649973180598521
18   Netztrennung   Netztrennung        RSLW          None  NetzTrennEin  NetzTrennEin  5655043989892249739  5655043989892249739
16   Netztrennung   Netztrennung        RSLW          None  NetzTrennEin  NetzTrennEin  5655043989892249739  5655043989892249739
14   Netztrennung   Netztrennung        RSLW  NetzTrennEin  NetzTrennEin  NetzTrennEin                   -1  5655043989892249739
19   Netztrennung   Netztrennung        RSLW          None  NetzTrennEin  NetzTrennEin  5655043989892249739  5655043989892249739
12  Sekundärwerte  Sekundärwerte        RMES           UWM           UWM           UWM                   -1  4773715700416343129
2024-07-16 10:44:38,264 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_KNOT erweitern um RRUES ...
2024-07-16 10:44:38,268 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RVBEL ...
2024-07-16 10:44:38,284 ; PT3S                                                         ; DEBUG   ; Xm.constructNewMultiindexFromCols (classmethod): Start.
2024-07-16 10:44:38,285 ; PT3S                                                         ; DEBUG   ; Xm.constructNewMultiindexFromCols (classmethod): _Done.
2024-07-16 10:44:38,285 ; PT3S                                                         ; DEBUG   ; Dx.__init__: V3_RVBEL RUES-Verbindungen zur Quelle hin aufloesen ...
2024-07-16 10:44:38,301 ; PT3S                                                         ; DEBUG   ; Xm.constructNewMultiindexFromCols (classmethod): Start.
2024-07-16 10:44:38,309 ; PT3S                                                         ; DEBUG   ; Xm.constructNewMultiindexFromCols (classmethod): _Done.
2024-07-16 10:44:38,309 ; PT3S                                                         ; DEBUG   ; Dx.__init__: _Done.
2024-07-16 10:44:38,318 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: dx.dbFile literally: c:\users\jablonski\3s\pt3s/Examples/Wärmenetz-Planungsbeispiel.db3
2024-07-16 10:44:38,318 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: abspath of dx.dbFile: c:\users\jablonski\3s\pt3s\Examples\Wärmenetz-Planungsbeispiel.db3
2024-07-16 10:44:38,319 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx:  wDir from dbFile: .\WDWärmenetz-Planungsbeispiel
2024-07-16 10:44:38,320 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx:  abspath of wDir from dbFile: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel
2024-07-16 10:44:38,320 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: wDirMx from abspath of wDir from dbFile: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1
2024-07-16 10:44:38,320 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: mx1File: ..\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MX1
2024-07-16 10:44:38,320 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: zugeh. dbFileMxPkl-File: ..\Examples\Wärmenetz-Planungsbeispiel-mx-_Examples_WDWärmenetz_Planungsbeispiel_B1_V0_BZ1_M_1_0_1_1_MX1.pkl
2024-07-16 10:44:38,320 ; PT3S                                                         ; INFO    ; dxAndMxHelperFcts.readDxAndMx: ..\Examples\Wärmenetz-Planungsbeispiel-mx-_Examples_WDWärmenetz_Planungsbeispiel_B1_V0_BZ1_M_1_0_1_1_MX1.pkl exists and is deleted...
2024-07-16 10:44:38,320 ; PT3S                                                         ; INFO    ; dxAndMxHelperFcts.readDxAndMx: ..\Examples\Wärmenetz-Planungsbeispiel.db3 is newer than ..\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MX1: SIR 3S' dbFile is newer than SIR 3S' mxFile; in this case the results are maybe dated or (worse) incompatible to the model
2024-07-16 10:44:38,320 ; PT3S                                                         ; INFO    ; dxAndMxHelperFcts.readDxAndMx: ..\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.XML is newer than ..\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MX1: SirCalc's xmlFile is newer than SIR 3S' mxFile; in this case the results are dated or (worse) incompatible to the model
2024-07-16 10:44:38,320 ; PT3S                                                         ; DEBUG   ; Mx.__init__: Start.
2024-07-16 10:44:38,320 ; PT3S                                                         ; DEBUG   ; Mx._initWithMx1: Start.
2024-07-16 10:44:38,320 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: Start.
2024-07-16 10:44:38,330 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: mx1File: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MX1 reading ...
2024-07-16 10:44:38,335 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: mx1File: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MX1 parsing ...
2024-07-16 10:44:38,335 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: mx1File: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MX1 mx1Df read. Shape: (494, 22).
2024-07-16 10:44:38,351 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: mx1Df after some generated Columns: Shape: (494, 27).
2024-07-16 10:44:38,435 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: 
    ADDEND      ATTRTYPE CLIENT_FLAGS CLIENT_ID  DATALENGTH  DATAOFFSET DATATYPE  DATATYPELENGTH DEVIATION FACTOR  FLAGS LINKED_CHANNEL LOWER_LIMIT         NAME1        NAME2 NAME3    OBJTYPE           OBJTYPE_PK OPCITEM_ID                                     TITLE       UNIT UPPER_LIMIT                                               Sir3sID  NOfItems  isVectorChannel  isVectorChannelMx2  isVectorChannelMx2Rvec
0        0     TIMESTAMP            0                    32           0     CHAR              32         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669                            Zeitstempel nach ISO 8601     [text]       1E+20                  ALLG~~~5597593673700177669~TIMESTAMP         1            False               False                   False
1        0  SNAPSHOTTYPE            0                     4          32     CHAR               4         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669               Typ des Zeitpunktes/Ausgabedatensatzes     [text]       1E+20               ALLG~~~5597593673700177669~SNAPSHOTTYPE         1            False               False                   False
2        0        CVERSO            0                    80          36     CHAR              80         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669                                      Versionskennung     [text]       1E+20                     ALLG~~~5597593673700177669~CVERSO         1            False               False                   False
3        0        EXSTAT            0                     4         116     INT4               4         0      1   1265             -1      -1E+20                                        ALLG  5597593673700177669                           Exit-Status der Berechnung         []       1E+20                     ALLG~~~5597593673700177669~EXSTAT         1            False               False                   False
4        0         NFEHL            0                     4         120     INT4               4         0      1   1265             -1           0                                        ALLG  5597593673700177669                Anzahl Fehler im Berechnungsabschnitt         []           1                      ALLG~~~5597593673700177669~NFEHL         1            False               False                   False
5        0         NWARN            0                     4         124     INT4               4         0      1   1265             -1           0                                        ALLG  5597593673700177669             Anzahl Warnungen im Berechnungsabschnitt         []           5                      ALLG~~~5597593673700177669~NWARN         1            False               False                   False
6        0         NMELD            0                     4         128     INT4               4         0      1    241             -1           0                                        ALLG  5597593673700177669             Anzahl Meldungen im Berechnungsabschnitt         []          25                      ALLG~~~5597593673700177669~NMELD         1            False               False                   False
7        0       CPUTIME            0                     4         132     REAL               4         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669                                  CPU-Zeit seit Start        [s]       1E+20                    ALLG~~~5597593673700177669~CPUTIME         1            False               False                   False
8        0       USRTIME            0                     4         136     REAL               4         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669                                  USR-Zeit seit Start        [s]       1E+20                    ALLG~~~5597593673700177669~USRTIME         1            False               False                   False
9        0       NPGREST            0                     4         140     INT4               4         0      1     49             -1           0                                        ALLG  5597593673700177669                   Anzahl aktiver PGRP in Restriktion         []        0.99                    ALLG~~~5597593673700177669~NPGREST         1            False               False                   False
10       0       NETZABN            0                     4         144     REAL               4         0      1   1265             -1      -1E+20                                        ALLG  5597593673700177669                                          Netzabnahme      [t/h]       1E+20                    ALLG~~~5597593673700177669~NETZABN         1            False               False                   False
11       0       NFVHYUV            0                     4         148     INT4               4         0      1   1057             -1           0                                        ALLG  5597593673700177669                Anzahl FWVB mit hydr. Unterversorgung         []           0                    ALLG~~~5597593673700177669~NFVHYUV         1            False               False                   False
12       0       NFVTHUV            0                     4         152     INT4               4         0      1   1057             -1           0                                        ALLG  5597593673700177669                Anzahl FWVB mit ther. Unterversorgung         []           0                    ALLG~~~5597593673700177669~NFVTHUV         1            False               False                   False
13       0       MFVHYUV            0                     4         156     REAL               4         0      1   1057             -1      -1E+20                                        ALLG  5597593673700177669             Fehlmenge FWVB aus hydr. Unterversorgung      [t/h]       1E+20                    ALLG~~~5597593673700177669~MFVHYUV         1            False               False                   False
14       0       MFVTHUV            0                     4         160     REAL               4         0      1   1057             -1      -1E+20                                        ALLG  5597593673700177669             Fehlmenge FWVB aus ther. Unterversorgung      [t/h]       1E+20                    ALLG~~~5597593673700177669~MFVTHUV         1            False               False                   False
15       0      TVMINMAX            0                     4         164     REAL               4         0      1   1057             -1        -150                                        ALLG  5597593673700177669                  Maximum der erf. min. VL-Temperatur       [°C]         550                   ALLG~~~5597593673700177669~TVMINMAX         1            False               False                   False
16       0        ITERHY            0                     4         168     INT4               4         0      1   1265             -1      -1E+20                                        ALLG  5597593673700177669                Anzahl benötigter (hydr.) Iterationen         []       1E+20                     ALLG~~~5597593673700177669~ITERHY         1            False               False                   False
17       0         JWARN            0                     4         172     INT4               4         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669                                            Warnstufe         []       1E+20                      ALLG~~~5597593673700177669~JWARN         1            False               False                   False
18       0  NETZABNEXITS            0                     4         176     REAL               4         0      1   1265             -1      -1E+20                                        ALLG  5597593673700177669                         Netzabnahme ohne Druckränder      [t/h]       1E+20               ALLG~~~5597593673700177669~NETZABNEXITS         1            False               False                   False
19       0  LINEPACKRATE            0                     4         180     REAL               4         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669                                 Gesamt-Linepack-Rate  [(N)m3/h]       1E+20               ALLG~~~5597593673700177669~LINEPACKRATE         1            False               False                   False
20       0   LINEPACKGES            0                     4         184     REAL               4         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669                                      Gesamt-Linepack    [(N)m3]       1E+20                ALLG~~~5597593673700177669~LINEPACKGES         1            False               False                   False
21       0  LINEPACKGEOM            0                     4         188     REAL               4         0      1    241             -1      -1E+20                                        ALLG  5597593673700177669                           Gesamt-Linepack Rohrinhalt    [(N)m3]       1E+20               ALLG~~~5597593673700177669~LINEPACKGEOM         1            False               False                   False
22       0         RHOAV            0                     4         192     REAL               4         0      1   1265             -1       0.001                                        ALLG  5597593673700177669                                      Mittlere Dichte    [kg/m3]       12000                      ALLG~~~5597593673700177669~RHOAV         1            False               False                   False
23       0           TAV            0                     4         196     REAL               4         0      1   1265             -1        -150                                        ALLG  5597593673700177669                                  Mittlere Temperatur       [°C]         550                        ALLG~~~5597593673700177669~TAV         1            False               False                   False
24       0           PAV            0                     4         200     REAL               4         0      1   1265             -1           0                                        ALLG  5597593673700177669                                      Mittlerer Druck    [bar,a]       1E+20                        ALLG~~~5597593673700177669~PAV         1            False               False                   False
25       0   FWVB_DPHMIN            0                     4         204     REAL               4         0      1   1057             -1           1                                        ALLG  5597593673700177669                Min. Differenzdruck aller Verbraucher      [bar]       1E+20                ALLG~~~5597593673700177669~FWVB_DPHMIN         1            False               False                   False
26       0    KNOT_PHMAX            0                     4         208     REAL               4         0      1   1265             -1           0                                        ALLG  5597593673700177669                             Max. Knotendruck im Netz      [bar]       1E+20                 ALLG~~~5597593673700177669~KNOT_PHMAX         1            False               False                   False
27       0    KNOT_PHMIN            0                     4         212     REAL               4         0      1   1265             -1           0                                        ALLG  5597593673700177669                             Min. Knotendruck im Netz      [bar]       1E+20                 ALLG~~~5597593673700177669~KNOT_PHMIN         1            False               False                   False
28       0   FWVB_TVLMIN            0                     4         216     REAL               4         0      1   1057             -1        -150                                        ALLG  5597593673700177669                 Min. VL-Temperatur aller Verbraucher       [°C]         550                ALLG~~~5597593673700177669~FWVB_TVLMIN         1            False               False                   False
29       0       NETZBEZ            0                     4         220     REAL               4         0      1   1265             -1      -1E+20                                        ALLG  5597593673700177669                                            Netzbezug      [t/h]       1E+20                    ALLG~~~5597593673700177669~NETZBEZ         1            False               False                   False
30       0  KNOT_PHMAX_V            0                     4         224     REAL               4         0      1   1057             -1           0                                        ALLG  5597593673700177669                          Max. Knotendruck im Netz VL      [bar]       1E+20               ALLG~~~5597593673700177669~KNOT_PHMAX_V         1            False               False                   False
31       0  KNOT_PHMAX_R            0                     4         228     REAL               4         0      1   1057             -1           0                                        ALLG  5597593673700177669                          Max. Knotendruck im Netz RL      [bar]       1E+20               ALLG~~~5597593673700177669~KNOT_PHMAX_R         1            False               False                   False
32       0  KNOT_PHMAX_U            0                     4         232     REAL               4         0      1   1057             -1           0                                        ALLG  5597593673700177669                      Max. Knotendruck im Netz undef.      [bar]       1E+20               ALLG~~~5597593673700177669~KNOT_PHMAX_U         1            False               False                   False
33       0  KNOT_PHMIN_V            0                     4         236     REAL               4         0      1   1057             -1           0                                        ALLG  5597593673700177669                          Min. Knotendruck im Netz VL      [bar]       1E+20               ALLG~~~5597593673700177669~KNOT_PHMIN_V         1            False               False                   False
34       0  KNOT_PHMIN_R            0                     4         240     REAL               4         0      1   1057             -1           0                                        ALLG  5597593673700177669                          Min. Knotendruck im Netz RL      [bar]       1E+20               ALLG~~~5597593673700177669~KNOT_PHMIN_R         1            False               False                   False
35       0  KNOT_PHMIN_U            0                     4         244     REAL               4         0      1   1057             -1           0                                        ALLG  5597593673700177669                      Min. Knotendruck im Netz undef.      [bar]       1E+20               ALLG~~~5597593673700177669~KNOT_PHMIN_U         1            False               False                   False
36       0           DPH            0                     8         248     REAL               4         0      1   1061             -1      -1E+20             *            *             FWES                    *               Reibungsdruckverlust/-druckverlusthöhe      [bar]       1E+20                                        FWES~*~*~*~DPH         2             True                True                   False
37       0        IAKTIV            0                     8         256     INT4               4         0      1   1061             -1      -1E+20             *            *             FWES                    *                                      Netztrennstatus         []       1E+20                                     FWES~*~*~*~IAKTIV         2             True                True                   False
38       0        IHYTYP            0                     8         264     INT4               4         0      1   1061             -1      -1E+20             *            *             FWES                    *                               Hydraulische Fahrweise         []       1E+20                                     FWES~*~*~*~IHYTYP         2             True                True                   False
39       0        ITHTYP            0                     8         272     INT4               4         0      1   1061             -1      -1E+20             *            *             FWES                    *                                 Thermische Fahrweise         []       1E+20                                     FWES~*~*~*~ITHTYP         2             True                True                   False
40       0            QM            0                     8         280     REAL               4         0      1   1061             -1      -1E+20             *            *             FWES                    *                                           Durchfluss      [t/h]       1E+20                                         FWES~*~*~*~QM         2             True                True                   False
41       0            TI            0                     8         288     REAL               4         0      1   1061             -1        -150             *            *             FWES                    *                                     Zulauftemperatur       [°C]         550                                         FWES~*~*~*~TI         2             True                True                   False
42       0            TK            0                     8         296     REAL               4         0      1   1061             -1        -150             *            *             FWES                    *                                     Speisetemperatur       [°C]         550                                         FWES~*~*~*~TK         2             True                True                   False
43       0             W            0                     8         304     REAL               4         0      1   1061             -1      -1E+20             *            *             FWES                    *                                        Wärmeleistung       [kW]       1E+20                                          FWES~*~*~*~W         2             True                True                   False
44       0         WSOLL            0                     8         312     REAL               4         0      1   1061             -1      -1E+20             *            *             FWES                    *                               Sollwert Wärmeleistung       [kW]       1E+20                                      FWES~*~*~*~WSOLL         2             True                True                   False
45       0             Q            0                     4         320     REAL               4         0      1   1061             -1      -1E+20             *            *             FWWU                    *                                 Übertragungsleistung       [kW]       1E+20                                          FWWU~*~*~*~Q         1             True                True                   False
46       0         T1EIN            0                     4         324     REAL               4         0      1   1061             -1        -150             *            *             FWWU                    *                           Eintrittstemperatur primär       [°C]         550                                      FWWU~*~*~*~T1EIN         1             True                True                   False
47       0         T1AUS            0                     4         328     REAL               4         0      1   1061             -1        -150             *            *             FWWU                    *                           Austrittstemperatur primär       [°C]         550                                      FWWU~*~*~*~T1AUS         1             True                True                   False
48       0         T2EIN            0                     4         332     REAL               4         0      1   1061             -1        -150             *            *             FWWU                    *                         Eintrittstemperatur sekundär       [°C]         550                                      FWWU~*~*~*~T2EIN         1             True                True                   False
49       0         T2AUS            0                     4         336     REAL               4         0      1   1061             -1        -150             *            *             FWWU                    *                         Austrittstemperatur sekundär       [°C]         550                                      FWWU~*~*~*~T2AUS         1             True                True                   False
50       0           RE1            0                     4         340     REAL               4         0      1   1061             -1      -1E+20             *            *             FWWU                    *                                 Reynolds-Zahl primär         []       1E+20                                        FWWU~*~*~*~RE1         1             True                True                   False
51       0           RE2            0                     4         344     REAL               4         0      1   1061             -1      -1E+20             *            *             FWWU                    *                               Reynolds-Zahl sekundär         []       1E+20                                        FWWU~*~*~*~RE2         1             True                True                   False
52       0         INDUV            0                     4         348     INT4               4         0      1   1061             -1      -1E+20             *            *             FWWU                    *                            Indikator Unterversorgung         []       1E+20                                      FWWU~*~*~*~INDUV         1             True                True                   False
53       0        IAKTIV            0                     4         352     INT4               4         0      1   1061             -1      -1E+20             *            *             FWWU                    *                                      Netztrennstatus         []       1E+20                                     FWWU~*~*~*~IAKTIV         1             True                True                   False
54       0        IAKTIV            0                    12         356     INT4               4         0      1   1077             -1      -1E+20             *            *             KLAP                    *                                      Netztrennstatus         []       1E+20                                     KLAP~*~*~*~IAKTIV         3             True                True                   False
55       0           PHI            0                    12         368     REAL               4         0      1   1077             -1      -1E+20             *            *             KLAP                    *                                             Stellung        [%]       1E+20                                        KLAP~*~*~*~PHI         3             True                True                   False
56       0           PHR            0                    12         380     REAL               4         0      1   1077             -1      -1E+20             *            *             KLAP                    *               Reibungsdruckverlust/-druckverlusthöhe      [bar]       1E+20                                        KLAP~*~*~*~PHR         3             True                True                   False
57       0            QM            0                    12         392     REAL               4         0      1   1077             -1      -1E+20             *            *             KLAP                    *                                           Durchfluss      [t/h]       1E+20                                         KLAP~*~*~*~QM         3             True                True                   False
58       0             V            0                    12         404     REAL               4         0      1   1077             -1      -1E+20             *            *             KLAP                    *                             Strömungsgeschwindigkeit      [m/s]       1E+20                                          KLAP~*~*~*~V         3             True                True                   False
59       0          ZETA            0                    12         416     REAL               4         0      1   1077             -1      -1E+20             *            *             KLAP                    *                                       Verlustbeiwert         []       1E+20                                       KLAP~*~*~*~ZETA         3             True                True                   False
60       0   FWVB_DPHMIN            0                    20         428     REAL               4         0      1   1061             -1      -1E+20             *            *             LFKT                    *                Min. Differenzdruck Verbrauchergruppe      [bar]       1E+20                                LFKT~*~*~*~FWVB_DPHMIN         5             True                True                   False
61       0   FWVB_TVLMIN            0                    20         448     REAL               4         0      1   1061             -1        -150             *            *             LFKT                    *                 Min. VL-Temperatur Verbrauchergruppe       [°C]         550                                LFKT~*~*~*~FWVB_TVLMIN         5             True                True                   False
62       0            BK            0                     8         468     REAL               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                                       Betriebskosten    [EUR/h]       1E+20                                         PGRP~*~*~*~BK         2             True                True                   False
63       0           DPH            0                     8         476     REAL               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                             Druckerhöhung/Förderhöhe      [bar]       1E+20                                        PGRP~*~*~*~DPH         2             True                True                   False
64       0           ETA            0                     8         484     REAL               4         0      1   1077             -1        0.05             *            *             PGRP                    *                                         Wirkungsgrad         []        0.95                                        PGRP~*~*~*~ETA         2             True                True                   False
65       0        IAKTIV            0                     8         492     INT4               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                                            Aktivität         []       1E+20                                     PGRP~*~*~*~IAKTIV         2             True                True                   False
66       0        INDSTD            0                     8         500     INT4               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                               Indikator Regelungsart         []       1E+20                                     PGRP~*~*~*~INDSTD         2             True                True                   False
67       0        IZSTPG            0                     8         508     INT4               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                                  Zustand Restriktion         []       1E+20                                     PGRP~*~*~*~IZSTPG         2             True                True                   False
68       0      NPUMPIST            0                     8         516     INT4               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                           Anzahl eingesetzter Pumpen         []       1E+20                                   PGRP~*~*~*~NPUMPIST         2             True                True                   False
69       0            PE            0                     8         524     REAL               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                                  Gesamtklemmleistung       [kW]       1E+20                                         PGRP~*~*~*~PE         2             True                True                   False
70       0            QM            0                     8         532     REAL               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                                     Gesamtdurchfluss      [t/h]       1E+20                                         PGRP~*~*~*~QM         2             True                True                   False
71       0          RART            0                    24         540     CHAR              12         0      1   1079             -1      -1E+20             *            *             PGRP                    *                                    Name Regelungsart   [3Sname]       1E+20                                       PGRP~*~*~*~RART         2             True                True                   False
72       0             W            0                     8         564     REAL               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                            Sollwert zur Regelungsart    [unitX]       1E+20                                          PGRP~*~*~*~W         2             True                True                   False
73       0             X            0                     8         572     REAL               4         0      1   1077             -1      -1E+20             *            *             PGRP                    *                             Istwert zur Regelungsart    [unitX]       1E+20                                          PGRP~*~*~*~X         2             True                True                   False
74       0        IAKTIV            0                     8         580     INT4               4         0      1   1077             -1      -1E+20             *            *        PGRP_PUMP                    *                                            Aktivität         []       1E+20                                PGRP_PUMP~*~*~*~IAKTIV         2             True                True                   False
75       0           DPH            0                     8         588     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                             Druckerhöhung/Förderhöhe      [bar]       1E+20                                        PUMP~*~*~*~DPH         2             True                True                   False
76       0        EINAUS            0                     8         596     INT4               4         0      1   1079             -1      -1E+20             *            *             PUMP                    *                                        Pumpe ein/aus         []       1E+20                                     PUMP~*~*~*~EINAUS         2             True                True                   False
77       0           ETA            0                     8         604     REAL               4         0      1   1077             -1        0.05             *            *             PUMP                    *                                         Wirkungsgrad         []        0.95                                        PUMP~*~*~*~ETA         2             True                True                   False
78       0        IAKTIV            0                     8         612     INT4               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                      Netztrennstatus         []       1E+20                                     PUMP~*~*~*~IAKTIV         2             True                True                   False
79       0           IND            0                     8         620     INT4               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                       Betriebsstatus         []       1E+20                                        PUMP~*~*~*~IND         2             True                True                   False
80       0             N            0                     8         628     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                             Drehzahl    [1/min]       1E+20                                          PUMP~*~*~*~N         2             True                True                   False
81       0            PE            0                     8         636     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                        Klemmleistung       [kW]       1E+20                                         PUMP~*~*~*~PE         2             True                True                   False
82       0            QM            0                     8         644     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                           Durchfluss      [t/h]       1E+20                                         PUMP~*~*~*~QM         2             True                True                   False
83       0           RHO            0                     8         652     REAL               4         0      1   1077             -1       0.001             *            *             PUMP                    *                                               Dichte    [kg/m3]       12000                                        PUMP~*~*~*~RHO         2             True                True                   False
84       0      STOERUNG            0                     8         660     INT4               4         0      1   1079             -1      -1E+20             *            *             PUMP                    *                                        Pumpenstörung         []       1E+20                                   PUMP~*~*~*~STOERUNG         2             True                True                   False
85       0        RCPU_W            0                     8         668     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                Sollwert aus Regelung    [unitX]       1E+20                                     PUMP~*~*~*~RCPU_W         2             True                True                   False
86       0        RCPU_X            0                     8         676     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                 Istwert aus Regelung    [unitX]       1E+20                                     PUMP~*~*~*~RCPU_X         2             True                True                   False
87       0          NPSH            0                     8         684     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                         NPSH aktuell        [m]       1E+20                                       PUMP~*~*~*~NPSH         2             True                True                   False
88       0       NPSHMIN            0                     8         692     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                                    NPSH erforderlich        [m]       1E+20                                    PUMP~*~*~*~NPSHMIN         2             True                True                   False
89       0    NMINMAXDIF            0                     8         700     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                Drehzahlabweichung zum Arbeitsbereich    [1/min]       1E+20                                 PUMP~*~*~*~NMINMAXDIF         2             True                True                   False
90       0           QN0            0                     8         708     REAL               4         0      1   1077             -1      -1E+20             *            *             PUMP                    *                          Durchfluss bei Nenndrehzahl      [t/h]       1E+20                                        PUMP~*~*~*~QN0         2             True                True                   False
91       0   FWVB_DPHMIN            0                     4         716     REAL               4         0      1   1061             -1      -1E+20             *            *             QVAR                    *                Min. Differenzdruck Verbrauchergruppe      [bar]       1E+20                                QVAR~*~*~*~FWVB_DPHMIN         1             True                True                   False
92       0   FWVB_TVLMIN            0                     4         720     REAL               4         0      1   1061             -1        -150             *            *             QVAR                    *                 Min. VL-Temperatur Verbrauchergruppe       [°C]         550                                QVAR~*~*~*~FWVB_TVLMIN         1             True                True                   False
93       0          RCPL            0                    36         724     CHAR              12         0      1   1141             -1      -1E+20             *            *             RART                    *                                 Name Regelpunktliste   [3Sname]       1E+20                                       RART~*~*~*~RCPL         3             True                True                   False
94       0             W            0                    12         760     REAL               4         0      1   1143             -1      -1E+20             *            *             RART                    *                            Sollwert zur Regelungsart    [unitX]       1E+20                                          RART~*~*~*~W         3             True                True                   False
95       0          KNOT            0                    48         772     CHAR              24         0      1   1141             -1      -1E+20             *            *             RCPL                    *                                   Name Schlechtpunkt   [3Sname]       1E+20                                       RCPL~*~*~*~KNOT         2             True                True                   False
96       0             W            0                     8         820     REAL               4         0      1   1141             -1      -1E+20             *            *             RCPL                    *               Sollwert Druck/Druckhöhe Schlechtpunkt      [bar]       1E+20                                          RCPL~*~*~*~W         2             True                True                   False
97       0             X            0                     8         828     REAL               4         0      1   1141             -1      -1E+20             *            *             RCPL                    *                Istwert Druck/Druckhöhe Schlechtpunkt      [bar]       1E+20                                          RCPL~*~*~*~X         2             True                True                   False
98       0             W            0                    12         836     REAL               4         0      1   1141             -1      -1E+20             *            *        RCPL_ROWT                    *                                             Sollwert      [bar]       1E+20                                     RCPL_ROWT~*~*~*~W         3             True                True                   False
99       0             X            0                    12         848     REAL               4         0      1   1141             -1      -1E+20             *            *        RCPL_ROWT                    *                                              Istwert      [bar]       1E+20                                     RCPL_ROWT~*~*~*~X         3             True                True                   False
100      0            XA            0                     4         860     REAL               4         0      1   1269             -1      -1E+20             *            *             RDIV                    *                                Signalwert am Ausgang   [signal]       1E+20                                         RDIV~*~*~*~XA         1             True                True                   False
101      0           XE1            0                     4         864     REAL               4         0      1   1269             -1      -1E+20             *            *             RDIV                    *                              Signalwert am Eingang 1   [signal]       1E+20                                        RDIV~*~*~*~XE1         1             True                True                   False
102      0           XE2            0                     4         868     REAL               4         0      1   1269             -1      -1E+20             *            *             RDIV                    *                              Signalwert am Eingang 2   [signal]       1E+20                                        RDIV~*~*~*~XE2         1             True                True                   False
103      0            XA            0                    12         872     REAL               4         0      1   1269             -1      -1E+20             *            *             RFKT                    *                                Signalwert am Ausgang   [signal]       1E+20                                         RFKT~*~*~*~XA         3             True                True                   False
104      0            XE            0                    12         884     REAL               4         0      1   1269             -1      -1E+20             *            *             RFKT                    *                                Signalwert am Eingang   [signal]       1E+20                                         RFKT~*~*~*~XE         3             True                True                   False
105      0            XA            0                     8         896     REAL               4         0      1   1269             -1      -1E+20             *            *             RLVG                    *                                Signalwert am Ausgang   [signal]       1E+20                                         RLVG~*~*~*~XA         2             True                True                   False
106      0           XE1            0                     8         904     REAL               4         0      1   1269             -1      -1E+20             *            *             RLVG                    *                              Signalwert am Eingang 1   [signal]       1E+20                                        RLVG~*~*~*~XE1         2             True                True                   False
107      0           XE2            0                     8         912     REAL               4         0      1   1269             -1      -1E+20             *            *             RLVG                    *                              Signalwert am Eingang 2   [signal]       1E+20                                        RLVG~*~*~*~XE2         2             True                True                   False
108      0            XA            0                    16         920     REAL               4         0      1   1269             -1      -1E+20             *            *             RMES                    *                                Signalwert am Ausgang   [signal]       1E+20                                         RMES~*~*~*~XA         4             True                True                   False
109      0            XM            0                    16         936     REAL               4         0      1   1269             -1      -1E+20             *            *             RMES                    *                              Physikalischer Messwert    [unitX]       1E+20                                         RMES~*~*~*~XM         4             True                True                   False
110      0            XU            0                    16         952     REAL               4         0      1   1269             -1      -1E+20             *            *             RMES                    *                         Messwert nach Funktionsgeber   [signal]       1E+20                                         RMES~*~*~*~XU         4             True                True                   False
111      0          SWVT            0                    60         968     CHAR              12         0      1   1269             -1      -1E+20             *            *             RSLW                    *                                 Name Sollwerttabelle   [3Sname]       1E+20                                       RSLW~*~*~*~SWVT         5             True                True                   False
112      0          WAKT            0                    20        1028     REAL               4         0      1   1269             -1      -1E+20             *            *             RSLW                    *                                   Aktueller Sollwert    [unitX]       1E+20                                       RSLW~*~*~*~WAKT         5             True                True                   False
113      0            XA            0                    20        1048     REAL               4         0      1   1269             -1      -1E+20             *            *             RSLW                    *                                Signalwert am Ausgang   [signal]       1E+20                                         RSLW~*~*~*~XA         5             True                True                   False
114      0           XE1            0                    32        1068     REAL               4         0      1   1269             -1      -1E+20             *            *             RSTN                    *                              Signalwert am Eingang 1   [signal]       1E+20                                        RSTN~*~*~*~XE1         8             True                True                   False
115      0         AUFZU            0                    48        1100     INT4               4         0      1   1271             -1      -1E+20             *            *             VENT                    *                                        Ventil auf/zu         []       1E+20                                      VENT~*~*~*~AUFZU        12             True                True                   False
116      0           PHI            0                    48        1148     REAL               4         0      1   1269             -1      -1E+20             *            *             VENT                    *                                             Stellung        [%]       1E+20                                        VENT~*~*~*~PHI        12             True                True                   False
117      0           PHR            0                    48        1196     REAL               4         0      1   1269             -1      -1E+20             *            *             VENT                    *               Reibungsdruckverlust/-druckverlusthöhe      [bar]       1E+20                                        VENT~*~*~*~PHR        12             True                True                   False
118      0            QM            0                    48        1244     REAL               4         0      1   1269             -1      -1E+20             *            *             VENT                    *                                           Durchfluss      [t/h]       1E+20                                         VENT~*~*~*~QM        12             True                True                   False
119      0             V            0                    48        1292     REAL               4         0      1   1141             -1      -1E+20             *            *             VENT                    *                             Strömungsgeschwindigkeit      [m/s]       1E+20                                          VENT~*~*~*~V        12             True                True                   False
120      0          ZETA            0                    48        1340     REAL               4         0      1   1141             -1      -1E+20             *            *             VENT                    *                                       Verlustbeiwert         []       1E+20                                       VENT~*~*~*~ZETA        12             True                True                   False
121      0           WES            0                     4        1388     REAL               4         0      1   1077             -1      -1E+20             *            *             WBLZ                    *                  Wärmeeinspeiseleistung Bilanzgebiet    [KW|MW]       1E+20                                        WBLZ~*~*~*~WES         1             True                True                   False
122      0         WRAND            0                     4        1392     REAL               4         0      1   1077             -1      -1E+20             *            *             WBLZ                    *                         Wärmestrom Bilanzgebietsrand    [KW|MW]       1E+20                                      WBLZ~*~*~*~WRAND         1             True                True                   False
123      0         WSPEI            0                     4        1396     REAL               4         0      1   1077             -1      -1E+20             *            *             WBLZ                    *                   Wärmespeicherleistung Bilanzgebiet    [KW|MW]       1E+20                                      WBLZ~*~*~*~WSPEI         1             True                True                   False
124      0           WVB            0                     4        1400     REAL               4         0      1   1077             -1      -1E+20             *            *             WBLZ                    *                 Wärmeverbrauchsleistung Bilanzgebiet    [KW|MW]       1E+20                                        WBLZ~*~*~*~WVB         1             True                True                   False
125      0         WVERL            0                     4        1404     REAL               4         0      1   1077             -1      -1E+20             *            *             WBLZ                    *                    Wärmeverlustleistung Bilanzgebiet    [KW|MW]       1E+20                                      WBLZ~*~*~*~WVERL         1             True                True                   False
126      0             V            0                     8        1408     REAL               4         0      1     37             -1      -1E+20             *            *             FWES                    *                             Strömungsgeschwindigkeit      [m/s]       1E+20                                          FWES~*~*~*~V         2             True                True                   False
127      0           DPH            0                  1352        1416     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *               Reibungsdruckverlust/-druckverlusthöhe      [bar]       1E+20                                        FWVB~*~*~*~DPH       338             True                True                   False
128      0        IAKTIV            0                  1352        2768     INT4               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                                      Netztrennstatus         []       1E+20                                     FWVB~*~*~*~IAKTIV       338             True                True                   False
129      0         INDUV            0                  1352        4120     INT4               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                            Indikator Unterversorgung         []       1E+20                                      FWVB~*~*~*~INDUV       338             True                True                   False
130      0           LFH            0                  1352        5472     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                             Hydraulischer Lastfaktor         []       1E+20                                        FWVB~*~*~*~LFH       338             True                True                   False
131      0           LFT            0                  1352        6824     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                               Thermischer Lastfaktor         []       1E+20                                        FWVB~*~*~*~LFT       338             True                True                   False
132      0             M            0                  1352        8176     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                                          Massenstrom     [kg/s]       1E+20                                          FWVB~*~*~*~M       338             True                True                   False
133      0         PHIRL            0                  1352        9528     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                                  Stellung RL Armatur        [%]       1E+20                                      FWVB~*~*~*~PHIRL       338             True                True                   False
134      0         PHIVL            0                  1352       10880     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                                  Stellung VL Armatur        [%]       1E+20                                      FWVB~*~*~*~PHIVL       338             True                True                   False
135      0            QM            0                  1352       12232     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                                           Durchfluss      [t/h]       1E+20                                         FWVB~*~*~*~QM       338             True                True                   False
136      0            TI            0                  1352       13584     REAL               4         0      1   1061             -1        -150             *            *             FWVB                    *                                    Vorlauftemperatur       [°C]         550                                         FWVB~*~*~*~TI       338             True                True                   False
137      0            TK            0                  1352       14936     REAL               4         0      1   1061             -1        -150             *            *             FWVB                    *                                 Rückspeisetemperatur       [°C]         550                                         FWVB~*~*~*~TK       338             True                True                   False
138      0         TVMIN            0                  1352       16288     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                           Minimale Vorlauftemperatur         []       1E+20                                      FWVB~*~*~*~TVMIN       338             True                True                   False
139      0             W            0                  1352       17640     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                                        Wärmeleistung       [kW]       1E+20                                          FWVB~*~*~*~W       338             True                True                   False
140      0         WSOLL            0                  1352       18992     REAL               4         0      1   1061             -1      -1E+20             *            *             FWVB                    *                               Sollwert Wärmeleistung       [kW]       1E+20                                      FWVB~*~*~*~WSOLL       338             True                True                   False
141      0            DP            0                  2068       20344     REAL               4         0      1   1061             -1      -1E+20             *            *             KNOT                    *                    Differenzdruck zwischen VL und RL      [bar]       1E+20                                         KNOT~*~*~*~DP       517             True                True                   False
142      0           DPH            0                  2068       22412     REAL               4         0      1   1061             -1      -1E+20             *            *             KNOT                    *                    Differenzdruck zwischen VL und RL      [bar]       1E+20                                        KNOT~*~*~*~DPH       517             True                True                   False
143      0             H            0                  2068       24480     REAL               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                                            Druckhöhe    [bar,B]       1E+20                                          KNOT~*~*~*~H       517             True                True                   False
144      0        IAKTIV            0                  2068       26548     INT4               4         0      1  17525             -1      -1E+20             *            *             KNOT                    *                                      Netztrennstatus         []       1E+20                                     KNOT~*~*~*~IAKTIV       517             True                True                   False
145      0      LFAKTAKT            0                  2068       28616     REAL               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                                 Aktueller Lastfaktor         []       1E+20                                   KNOT~*~*~*~LFAKTAKT       517             True                True                   False
146      0             P            0                  2068       30684     REAL               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                                                Druck    [bar,a]       1E+20                                          KNOT~*~*~*~P       517             True                True                   False
147      0        PDAMPF            0                  2068       32752     REAL               4         0      1   1077             -1      -1E+20             *            *             KNOT                    *                                           Dampfdruck    [bar,a]       1E+20                                     KNOT~*~*~*~PDAMPF       517             True                True                   False
148      0            PH            0                  2068       34820     REAL               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                                                Druck      [bar]       1E+20                                         KNOT~*~*~*~PH       517             True                True                   False
149      0        PH_EIN            0                  2068       36888     REAL               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                            Druck in Eingabeeinheiten      [bar]       1E+20                                     KNOT~*~*~*~PH_EIN       517             True                True                   False
150      0        PH_MIN            0                  2068       38956     REAL               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                      Mindestknotendruck bei Entnahme      [bar]       1E+20                                     KNOT~*~*~*~PH_MIN       517             True                True                   False
151      0            QM            0                  2068       41024     REAL               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                                  Externer Durchfluss      [t/h]       1E+20                                         KNOT~*~*~*~QM       517             True                True                   False
152      0           RHO            0                  2068       43092     REAL               4         0      1   1269             -1       0.001             *            *             KNOT                    *                                               Dichte    [kg/m3]       12000                                        KNOT~*~*~*~RHO       517             True                True                   False
153      0             T            0                  2068       45160     REAL               4         0      1   1269             -1        -150             *            *             KNOT                    *                                           Temperatur       [°C]         550                                          KNOT~*~*~*~T       517             True                True                   False
154      0          VOLD            0                  2068       47228     REAL               4         0      1   1077             -1      -1E+20             *            *             KNOT                    *                                         Dampfvolumen       [m3]       1E+20                                       KNOT~*~*~*~VOLD       517             True                True                   False
155      0         BCIND            0                  2068       49296     INT4               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                          Indikator Rand (Summencode)         []       1E+20                                      KNOT~*~*~*~BCIND       517             True                True                   False
156      0   PHMINMAXDIF            0                  2068       51364     REAL               4         0      1   1141             -1      -1E+20             *            *             KNOT                    *                     Druckabweichung zum Mindestdruck      [bar]       1E+20                                KNOT~*~*~*~PHMINMAXDIF       517             True                True                   False
157      0           TTR            0                  2068       53432     REAL               4         0      1   1269             -1      -1E+20             *            *             KNOT                    *                                           Fluidalter        [h]       1E+20                                        KNOT~*~*~*~TTR       517             True                True                   False
158      0             A            0                  2096       55500     REAL               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                      Schallgeschwindigkeit verwendet      [m/s]       1E+20                                          ROHR~*~*~*~A       524             True                True                   False
159      0        DWVERL            0                  2096       57596     REAL               4         0      1   1077             -1      -1E+20             *            *             ROHR                    *                            Spezifischer Wärmeverlust      [W/m]       1E+20                                     ROHR~*~*~*~DWVERL       524             True                True                   False
160      0        IAKTIV            0                  2096       59692     INT4               4         0      1   1141             -1      -1E+20             *            *             ROHR                    *                                      Netztrennstatus         []       1E+20                                     ROHR~*~*~*~IAKTIV       524             True                True                   False
161      0       IRTRENN            0                  2096       61788     INT4               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                                         Rohrtrennung         []       1E+20                                    ROHR~*~*~*~IRTRENN       524             True                True                   False
162      0           PHR            0                  2096       63884     REAL               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *               Reibungsdruckverlust/-druckverlusthöhe      [bar]       1E+20                                        ROHR~*~*~*~PHR       524             True                True                   False
163      0         VOLDA            0                  2096       65980     REAL               4         0      1   1077             -1      -1E+20             *            *             ROHR                    *                                         Dampfvolumen       [m3]       1E+20                                      ROHR~*~*~*~VOLDA       524             True                True                   False
164      0           VAV            0                  2096       68076     REAL               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                    Mittlere Strömungsgeschwindigkeit      [m/s]       1E+20                                        ROHR~*~*~*~VAV       524             True                True                   False
165      0          QMAV            0                  2096       70172     REAL               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                               Mittlerer Volumenstrom      [t/h]       1E+20                                       ROHR~*~*~*~QMAV       524             True                True                   False
166      0            JV            0                  2096       72268     REAL               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                    Spezifischer Reibungsdruckverlust   [bar/km]       1E+20                                         ROHR~*~*~*~JV       524             True                True                   False
167      0     DWVERLABS            0                  2096       74364     REAL               4         0      1   1061             -1      -1E+20             *            *             ROHR                    *                                         Wärmeverlust       [kW]       1E+20                                  ROHR~*~*~*~DWVERLABS       524             True                True                   False
168      0          PMIN            0                  2096       76460     REAL               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                                      Kleinster Druck    [bar,a]       1E+20                                       ROHR~*~*~*~PMIN       524             True                True                   False
169      0        PDAMPF            0                  2096       78556     REAL               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                           Mittleres Dampfdruckniveau    [bar,a]       1E+20                                     ROHR~*~*~*~PDAMPF       524             True                True                   False
170      0        TTRVEC            0                  4280       80652     RVEC               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                                Fluidalter Rohrgitter        [h]       1E+20                                     ROHR~*~*~*~TTRVEC      1070             True                True                    True
171      0          DTTR            0                  2096       84932     REAL               4         0      1   1269             -1      -1E+20             *            *             ROHR                    *                            Fließdauer durch das Rohr        [h]       1E+20                                       ROHR~*~*~*~DTTR       524             True                True                   False
172      0           WVL            0                  2096       87028     REAL               4         0      1   1061             -1      -1E+20             *            *             ROHR                    *                                   Wärmestrom Vorlauf       [kW]       1E+20                                        ROHR~*~*~*~WVL       524             True                True                   False
173      0     HMAX_INST            0                  2068       89124     REAL               4         0      1   2165             -1      -1E+20             *            *             KNOT                    *                        Druckhöhenmaximum instationär    [bar,B]       1E+20                                  KNOT~*~*~*~HMAX_INST       517             True                True                   False
174      0     HMIN_INST            0                  2068       91192     REAL               4         0      1   2165             -1      -1E+20             *            *             KNOT                    *                        Druckhöhenminimum instationär    [bar,B]       1E+20                                  KNOT~*~*~*~HMIN_INST       517             True                True                   False
175      0     PMAX_INST            0                  2068       93260     REAL               4         0      1   2165             -1      -1E+20             *            *             KNOT                    *                             Druckmaximum instationär    [bar,a]       1E+20                                  KNOT~*~*~*~PMAX_INST       517             True                True                   False
176      0     PMIN_INST            0                  2068       95328     REAL               4         0      1   2165             -1      -1E+20             *            *             KNOT                    *                             Druckminimum instationär    [bar,a]       1E+20                                  KNOT~*~*~*~PMIN_INST       517             True                True                   False
177      0            VI            0                  2096       97396     REAL               4         0      1   4341             -1      -1E+20             *            *             ROHR                    *                    Strömungsgeschwindigkeit Knoten I      [m/s]       1E+20                                         ROHR~*~*~*~VI       524             True                True                   False
178      0            VK            0                  2096       99492     REAL               4         0      1   4341             -1      -1E+20             *            *             ROHR                    *                    Strömungsgeschwindigkeit Knoten K      [m/s]       1E+20                                         ROHR~*~*~*~VK       524             True                True                   False
179      0           QMI            0                  2096      101588     REAL               4         0      1   4341             -1      -1E+20             *            *             ROHR                    *                                  Durchfluss Knoten I      [t/h]       1E+20                                        ROHR~*~*~*~QMI       524             True                True                   False
180      0           QMK            0                  2096      103684     REAL               4         0      1   4341             -1      -1E+20             *            *             ROHR                    *                                  Durchfluss Knoten K      [t/h]       1E+20                                        ROHR~*~*~*~QMK       524             True                True                   False
181      0          SVEC            0                  4280      105780     RVEC               4         0      1    245             -1      -1E+20             *            *             ROHR                    *                                 Weglängen Rohrgitter        [m]       1E+20                                       ROHR~*~*~*~SVEC      1070             True                True                    True
182      0          ZVEC            0                  4280      110060     RVEC               4         0      1    245             -1      -1E+20             *            *             ROHR                    *                         Geodätische Höhen Rohrgitter        [m]       1E+20                                       ROHR~*~*~*~ZVEC      1070             True                True                    True
183      0          PVEC            0                  4280      114340     RVEC               4         0      1    245             -1      -1E+20             *            *             ROHR                    *                                    Drücke Rohrgitter    [bar,a]       1E+20                                       ROHR~*~*~*~PVEC      1070             True                True                    True
184      0          MVEC            0                  4280      118620     RVEC               4         0      1    245             -1      -1E+20             *            *             ROHR                    *                              Massenströme Rohrgitter     [kg/s]       1E+20                                       ROHR~*~*~*~MVEC      1070             True                True                    True
185      0          TVEC            0                  4280      122900     RVEC               4         0      1    245             -1        -150             *            *             ROHR                    *                              Temperaturen Rohrgitter       [°C]         550                                       ROHR~*~*~*~TVEC      1070             True                True                    True
186      0        RHOVEC            0                  4280      127180     RVEC               4         0      1    245             -1       0.001             *            *             ROHR                    *                                   Dichten Rohrgitter    [kg/m3]       12000                                     ROHR~*~*~*~RHOVEC      1070             True                True                    True
187      0  PVECMAX_INST            0                  4280      131460     RVEC               4         0      1    117             -1      -1E+20             *            *             ROHR                    *                   Druckmaxima Rohrgitter instationär    [bar,a]       1E+20                               ROHR~*~*~*~PVECMAX_INST      1070             True                True                    True
188      0  PVECMIN_INST            0                  4280      135740     RVEC               4         0      1    117             -1      -1E+20             *            *             ROHR                    *                   Druckminima Rohrgitter instationär    [bar,a]       1E+20                               ROHR~*~*~*~PVECMIN_INST      1070             True                True                    True
189      0            PH            0                     4      140020     REAL               4         0      1   1265             -1      -1E+20           R-E                          KNOT  4945502875946918021                                                Druck      [bar]       1E+20                      KNOT~R-E~~4945502875946918021~PH         1            False               False                   False
190      0            PH            0                     4      140024     REAL               4         0      1   1265             -1      -1E+20           V-E                          KNOT  5364585352767333609                                                Druck      [bar]       1E+20                      KNOT~V-E~~5364585352767333609~PH         1            False               False                   False
191      0             T            0                     4      140028     REAL               4         0      1   1265             -1      -1E+20           V-E                          KNOT  5364585352767333609                                           Temperatur       [°C]       1E+20                       KNOT~V-E~~5364585352767333609~T         1            False               False                   False
192      0            QM            0                     4      140032     REAL               4         0      1   1265             -1      -1E+20          R-E0          R-E             VENT  5078909058477631059                                           Durchfluss      [t/h]       1E+20                  VENT~R-E0~R-E~5078909058477631059~QM         1            False               False                   False
193      0             T            0                     4      140036     REAL               4         0      1   1265             -1      -1E+20           R-E                          KNOT  4945502875946918021                                           Temperatur       [°C]       1E+20                       KNOT~R-E~~4945502875946918021~T         1            False               False                   False
194      0        IAKTIV            0                    48      140040     INT4               4         0      1    245             -1      -1E+20             *            *             VENT                    *                                      Netztrennstatus         []       1E+20                                     VENT~*~*~*~IAKTIV        12             True                True                   False
195      0           WVB            0                     4      140088     REAL               4         0      1   1073             -1      -1E+20  WärmeblnzGes                          WBLZ  5747928298316755683                 Wärmeverbrauchsleistung Bilanzgebiet       [MW]       1E+20            WBLZ~WärmeblnzGes~~5747928298316755683~WVB         1            False               False                   False
196      0         WVERL            0                     4      140092     REAL               4         0      1   1073             -1      -1E+20  WärmeblnzGes                          WBLZ  5747928298316755683                    Wärmeverlustleistung Bilanzgebiet       [MW]       1E+20          WBLZ~WärmeblnzGes~~5747928298316755683~WVERL         1            False               False                   False
197      0           LFT            0                     4      140096     REAL               4         0      1   1057             -1      -1E+20      V-K2153S     R-K4633S             FWVB  4695691920575201490                               Thermischer Lastfaktor         []       1E+20        FWVB~V-K2153S~R-K4633S~4695691920575201490~LFT         1            False               False                   False
198      0            TI            0                  2096      140100     REAL               4         0      1    245             -1        -150             *            *             ROHR                    *                                Temperatur Rohranfang       [°C]         550                                         ROHR~*~*~*~TI       524             True                True                   False
199      0            TK            0                  2096      142196     REAL               4         0      1    245             -1        -150             *            *             ROHR                    *                                  Temperatur Rohrende       [°C]         550                                         ROHR~*~*~*~TK       524             True                True                   False
200      0          RHOI            0                  2096      144292     REAL               4         0      1    245             -1       0.001             *            *             ROHR                    *                                    Dichte Rohranfang    [kg/m3]       12000                                       ROHR~*~*~*~RHOI       524             True                True                   False
201      0          RHOK            0                  2096      146388     REAL               4         0      1    245             -1       0.001             *            *             ROHR                    *                                      Dichte Rohrende    [kg/m3]       12000                                       ROHR~*~*~*~RHOK       524             True                True                   False
202      0          RHOI            0                  1352      148484     REAL               4         0      1     37             -1       0.001             *            *             FWVB                    *                                       Dichte Vorlauf    [kg/m3]       12000                                       FWVB~*~*~*~RHOI       338             True                True                   False
203      0          RHOK            0                  1352      149836     REAL               4         0      1     37             -1       0.001             *            *             FWVB                    *                                      Dichte Rücklauf    [kg/m3]       12000                                       FWVB~*~*~*~RHOK       338             True                True                   False
204      0           RHO            0                    48      151188     REAL               4         0      1    245             -1       0.001             *            *             VENT                    *                                               Dichte    [kg/m3]       12000                                        VENT~*~*~*~RHO        12             True                True                   False
205      0            DH            0                    48      151236     REAL               4         0      1    245             -1      -1E+20             *            *             VENT                    *                                   Differenzdruckhöhe        [m]       1E+20                                         VENT~*~*~*~DH        12             True                True                   False
206      0            DP            0                     4      151284     REAL               4         0      1     33             -1      -1E+20      V-K2243S     R-K4723S             FWVB  4612643650175000934                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2243S~R-K4723S~4612643650175000934~DP         1            False               False                   False
207      0            DP            0                     4      151288     REAL               4         0      1     33             -1      -1E+20       V-K333S     R-K2813S             FWVB  5298892186072792581                                       Differenzdruck      [bar]       1E+20          FWVB~V-K333S~R-K2813S~5298892186072792581~DP         1            False               False                   False
208      0            DP            0                     4      151292     REAL               4         0      1     33             -1      -1E+20      V-K1393S     R-K3873S             FWVB  5641820391023802273                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1393S~R-K3873S~5641820391023802273~DP         1            False               False                   False
209      0            DP            0                     4      151296     REAL               4         0      1     33             -1      -1E+20      V-K1393S     R-K3873S             FWVB  5714834959169623562                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1393S~R-K3873S~5714834959169623562~DP         1            False               False                   False
210      0            DP            0                     4      151300     REAL               4         0      1     33             -1      -1E+20       V-K593S     R-K3073S             FWVB  5539308064883517142                                       Differenzdruck      [bar]       1E+20          FWVB~V-K593S~R-K3073S~5539308064883517142~DP         1            False               False                   False
211      0            DP            0                     4      151304     REAL               4         0      1     33             -1      -1E+20       V-K153S     R-K2633S             FWVB  4851778549814053310                                       Differenzdruck      [bar]       1E+20          FWVB~V-K153S~R-K2633S~4851778549814053310~DP         1            False               False                   False
212      0            DP            0                     4      151308     REAL               4         0      1     33             -1      -1E+20      V-K2263S     R-K4743S             FWVB  5095755403689234488                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2263S~R-K4743S~5095755403689234488~DP         1            False               False                   False
213      0            DP            0                     4      151312     REAL               4         0      1     33             -1      -1E+20      V-K2263S     R-K4743S             FWVB  4754662858150981800                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2263S~R-K4743S~4754662858150981800~DP         1            False               False                   False
214      0            DP            0                     4      151316     REAL               4         0      1     33             -1      -1E+20       V-K133S     R-K2613S             FWVB  4831899581981959889                                       Differenzdruck      [bar]       1E+20          FWVB~V-K133S~R-K2613S~4831899581981959889~DP         1            False               False                   False
215      0            DP            0                     4      151320     REAL               4         0      1     33             -1      -1E+20        V-SP01       R-SP01             FWVB  5373061288922912729                                       Differenzdruck      [bar]       1E+20             FWVB~V-SP01~R-SP01~5373061288922912729~DP         1            False               False                   False
216      0            DP            0                     4      151324     REAL               4         0      1     33             -1      -1E+20        V-SP01       R-SP01             FWVB  5338005695177201668                                       Differenzdruck      [bar]       1E+20             FWVB~V-SP01~R-SP01~5338005695177201668~DP         1            False               False                   False
217      0            DP            0                     4      151328     REAL               4         0      1     33             -1      -1E+20        V-SP01       R-SP01             FWVB  5103671514823328293                                       Differenzdruck      [bar]       1E+20             FWVB~V-SP01~R-SP01~5103671514823328293~DP         1            False               False                   False
218      0            DP            0                     4      151332     REAL               4         0      1     33             -1      -1E+20       V-K123S     R-K2603S             FWVB  5568194212677879165                                       Differenzdruck      [bar]       1E+20          FWVB~V-K123S~R-K2603S~5568194212677879165~DP         1            False               False                   False
219      0            DP            0                     4      151336     REAL               4         0      1     33             -1      -1E+20      V-K1363S     R-K3843S             FWVB  5534236886775923535                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1363S~R-K3843S~5534236886775923535~DP         1            False               False                   False
220      0            DP            0                     4      151340     REAL               4         0      1     33             -1      -1E+20      V-K1373S     R-K3853S             FWVB  5054661805697996469                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1373S~R-K3853S~5054661805697996469~DP         1            False               False                   False
221      0            DP            0                     4      151344     REAL               4         0      1     33             -1      -1E+20      V-K1363S     R-K3843S             FWVB  4677484876769683069                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1363S~R-K3843S~4677484876769683069~DP         1            False               False                   False
222      0            DP            0                     4      151348     REAL               4         0      1     33             -1      -1E+20      V-K1343S     R-K3823S             FWVB  5331382729720004878                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1343S~R-K3823S~5331382729720004878~DP         1            False               False                   False
223      0            DP            0                     4      151352     REAL               4         0      1     33             -1      -1E+20      V-K1323S     R-K3803S             FWVB  5320145816789148184                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1323S~R-K3803S~5320145816789148184~DP         1            False               False                   False
224      0            DP            0                     4      151356     REAL               4         0      1     33             -1      -1E+20        V-K73S     R-K2553S             FWVB  4660745360789977502                                       Differenzdruck      [bar]       1E+20           FWVB~V-K73S~R-K2553S~4660745360789977502~DP         1            False               False                   False
225      0            DP            0                     4      151360     REAL               4         0      1     33             -1      -1E+20        V-K73S     R-K2553S             FWVB  5475433067817926464                                       Differenzdruck      [bar]       1E+20           FWVB~V-K73S~R-K2553S~5475433067817926464~DP         1            False               False                   False
226      0            DP            0                     4      151364     REAL               4         0      1     33             -1      -1E+20        V-K63S     R-K2543S             FWVB  5088507410302060583                                       Differenzdruck      [bar]       1E+20           FWVB~V-K63S~R-K2543S~5088507410302060583~DP         1            False               False                   False
227      0            DP            0                     4      151368     REAL               4         0      1     33             -1      -1E+20        V-K23S     R-K2503S             FWVB  4799202816710088269                                       Differenzdruck      [bar]       1E+20           FWVB~V-K23S~R-K2503S~4799202816710088269~DP         1            False               False                   False
228      0            DP            0                     4      151372     REAL               4         0      1     33             -1      -1E+20        V-K73S     R-K2553S             FWVB  5567370826017196953                                       Differenzdruck      [bar]       1E+20           FWVB~V-K73S~R-K2553S~5567370826017196953~DP         1            False               False                   False
229      0            DP            0                     4      151376     REAL               4         0      1     33             -1      -1E+20      V-K1313S     R-K3793S             FWVB  4721603020200203929                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1313S~R-K3793S~4721603020200203929~DP         1            False               False                   False
230      0            DP            0                     4      151380     REAL               4         0      1     33             -1      -1E+20      V-K1243S     R-K3723S             FWVB  5539118071732060322                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1243S~R-K3723S~5539118071732060322~DP         1            False               False                   False
231      0            DP            0                     4      151384     REAL               4         0      1     33             -1      -1E+20      V-K1283S     R-K3763S             FWVB  5433812588779537970                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1283S~R-K3763S~5433812588779537970~DP         1            False               False                   False
232      0            DP            0                     4      151388     REAL               4         0      1     33             -1      -1E+20      V-K1303S     R-K3783S             FWVB  4982647601065704474                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1303S~R-K3783S~4982647601065704474~DP         1            False               False                   False
233      0            DP            0                     4      151392     REAL               4         0      1     33             -1      -1E+20      V-K1303S     R-K3783S             FWVB  4758534110963451621                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1303S~R-K3783S~4758534110963451621~DP         1            False               False                   False
234      0            DP            0                     4      151396     REAL               4         0      1     33             -1      -1E+20        V-K13S     R-K2493S             FWVB  5157987375362402948                                       Differenzdruck      [bar]       1E+20           FWVB~V-K13S~R-K2493S~5157987375362402948~DP         1            False               False                   False
235      0            DP            0                     4      151400     REAL               4         0      1     33             -1      -1E+20        V-K13S     R-K2493S             FWVB  5572700189436507358                                       Differenzdruck      [bar]       1E+20           FWVB~V-K13S~R-K2493S~5572700189436507358~DP         1            False               False                   False
236      0            DP            0                     4      151404     REAL               4         0      1     33             -1      -1E+20       V-K133S     R-K2623S             FWVB  5042957248574195254                                       Differenzdruck      [bar]       1E+20          FWVB~V-K133S~R-K2623S~5042957248574195254~DP         1            False               False                   False
237      0            DP            0                     4      151408     REAL               4         0      1     33             -1      -1E+20       V-K123S     R-K2603S             FWVB  5620374956890186419                                       Differenzdruck      [bar]       1E+20          FWVB~V-K123S~R-K2603S~5620374956890186419~DP         1            False               False                   False
238      0            DP            0                     4      151412     REAL               4         0      1     33             -1      -1E+20       V-K123S     R-K2603S             FWVB  5642186467419772313                                       Differenzdruck      [bar]       1E+20          FWVB~V-K123S~R-K2603S~5642186467419772313~DP         1            False               False                   False
239      0            DP            0                     4      151416     REAL               4         0      1     33             -1      -1E+20       V-K113S     R-K2593S             FWVB  4952675334963811549                                       Differenzdruck      [bar]       1E+20          FWVB~V-K113S~R-K2593S~4952675334963811549~DP         1            False               False                   False
240      0            DP            0                     4      151420     REAL               4         0      1     33             -1      -1E+20        V-K63S     R-K2543S             FWVB  5289349232690798866                                       Differenzdruck      [bar]       1E+20           FWVB~V-K63S~R-K2543S~5289349232690798866~DP         1            False               False                   False
241      0            DP            0                     4      151424     REAL               4         0      1     33             -1      -1E+20        V-K23S     R-K2503S             FWVB  5263894803742270480                                       Differenzdruck      [bar]       1E+20           FWVB~V-K23S~R-K2503S~5263894803742270480~DP         1            False               False                   False
242      0            DP            0                     4      151428     REAL               4         0      1     33             -1      -1E+20        V-K23S     R-K2503S             FWVB  5258191418983486434                                       Differenzdruck      [bar]       1E+20           FWVB~V-K23S~R-K2503S~5258191418983486434~DP         1            False               False                   False
243      0            DP            0                     4      151432     REAL               4         0      1     33             -1      -1E+20        V-K13S     R-K2493S             FWVB  5219695668506679887                                       Differenzdruck      [bar]       1E+20           FWVB~V-K13S~R-K2493S~5219695668506679887~DP         1            False               False                   False
244      0            DP            0                     4      151436     REAL               4         0      1     33             -1      -1E+20        V-K23S     R-K2503S             FWVB  5089681968228574805                                       Differenzdruck      [bar]       1E+20           FWVB~V-K23S~R-K2503S~5089681968228574805~DP         1            False               False                   False
245      0            DP            0                     4      151440     REAL               4         0      1     33             -1      -1E+20        V-K23S     R-K2503S             FWVB  4723552478525716099                                       Differenzdruck      [bar]       1E+20           FWVB~V-K23S~R-K2503S~4723552478525716099~DP         1            False               False                   False
246      0            DP            0                     4      151444     REAL               4         0      1     33             -1      -1E+20      V-K1243S     R-K3723S             FWVB  4717900447084130786                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1243S~R-K3723S~4717900447084130786~DP         1            False               False                   False
247      0            DP            0                     4      151448     REAL               4         0      1     33             -1      -1E+20      V-K1243S     R-K3723S             FWVB  4680566654399387170                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1243S~R-K3723S~4680566654399387170~DP         1            False               False                   False
248      0            DP            0                     4      151452     REAL               4         0      1     33             -1      -1E+20      V-K1273S     R-K3753S             FWVB  4774089356071680115                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1273S~R-K3753S~4774089356071680115~DP         1            False               False                   False
249      0            DP            0                     4      151456     REAL               4         0      1     33             -1      -1E+20      V-K1303S     R-K3783S             FWVB  5483836906626806693                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1303S~R-K3783S~5483836906626806693~DP         1            False               False                   False
250      0            DP            0                     4      151460     REAL               4         0      1     33             -1      -1E+20        V-K13S     R-K2493S             FWVB  5723652079410431099                                       Differenzdruck      [bar]       1E+20           FWVB~V-K13S~R-K2493S~5723652079410431099~DP         1            False               False                   False
251      0            DP            0                     4      151464     REAL               4         0      1     33             -1      -1E+20        V-K13S     R-K2493S             FWVB  5152070634362289135                                       Differenzdruck      [bar]       1E+20           FWVB~V-K13S~R-K2493S~5152070634362289135~DP         1            False               False                   False
252      0            DP            0                     4      151468     REAL               4         0      1     33             -1      -1E+20       V-K463S     R-K2943S             FWVB  4715437119287917203                                       Differenzdruck      [bar]       1E+20          FWVB~V-K463S~R-K2943S~4715437119287917203~DP         1            False               False                   False
253      0            DP            0                     4      151472     REAL               4         0      1     33             -1      -1E+20      V-K2023S     R-K4503S             FWVB  5429690733112787259                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2023S~R-K4503S~5429690733112787259~DP         1            False               False                   False
254      0            DP            0                     4      151476     REAL               4         0      1     33             -1      -1E+20      V-K2023S     R-K4503S             FWVB  5470212073687668936                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2023S~R-K4503S~5470212073687668936~DP         1            False               False                   False
255      0            DP            0                     4      151480     REAL               4         0      1     33             -1      -1E+20      V-K2023S     R-K4503S             FWVB  4690848713916516887                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2023S~R-K4503S~4690848713916516887~DP         1            False               False                   False
256      0            DP            0                     4      151484     REAL               4         0      1     33             -1      -1E+20       V-K583S     R-K3063S             FWVB  5210301978863275664                                       Differenzdruck      [bar]       1E+20          FWVB~V-K583S~R-K3063S~5210301978863275664~DP         1            False               False                   False
257      0            DP            0                     4      151488     REAL               4         0      1     33             -1      -1E+20       V-K583S     R-K3063S             FWVB  4769972484103895237                                       Differenzdruck      [bar]       1E+20          FWVB~V-K583S~R-K3063S~4769972484103895237~DP         1            False               False                   False
258      0            DP            0                     4      151492     REAL               4         0      1     33             -1      -1E+20       V-K583S     R-K3063S             FWVB  4839284960010591311                                       Differenzdruck      [bar]       1E+20          FWVB~V-K583S~R-K3063S~4839284960010591311~DP         1            False               False                   False
259      0            DP            0                     4      151496     REAL               4         0      1     33             -1      -1E+20      V-K2173S     R-K4653S             FWVB  5238469959575677978                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2173S~R-K4653S~5238469959575677978~DP         1            False               False                   False
260      0            DP            0                     4      151500     REAL               4         0      1     33             -1      -1E+20       V-K573S     R-K3053S             FWVB  5378395521233234009                                       Differenzdruck      [bar]       1E+20          FWVB~V-K573S~R-K3053S~5378395521233234009~DP         1            False               False                   False
261      0            DP            0                     4      151504     REAL               4         0      1     33             -1      -1E+20      V-K2153S     R-K4633S             FWVB  5272427879633450297                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2153S~R-K4633S~5272427879633450297~DP         1            False               False                   False
262      0            DP            0                     4      151508     REAL               4         0      1     33             -1      -1E+20      V-K1163S     R-K3643S             FWVB  5563426535048622787                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1163S~R-K3643S~5563426535048622787~DP         1            False               False                   False
263      0            DP            0                     4      151512     REAL               4         0      1     33             -1      -1E+20       V-K583S     R-K3063S             FWVB  5708564737898353551                                       Differenzdruck      [bar]       1E+20          FWVB~V-K583S~R-K3063S~5708564737898353551~DP         1            False               False                   False
264      0            DP            0                     4      151516     REAL               4         0      1     33             -1      -1E+20       V-K583S     R-K3063S             FWVB  5646104354697048422                                       Differenzdruck      [bar]       1E+20          FWVB~V-K583S~R-K3063S~5646104354697048422~DP         1            False               False                   False
265      0            DP            0                     4      151520     REAL               4         0      1     33             -1      -1E+20      V-K1163S     R-K3643S             FWVB  4998245026021181527                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1163S~R-K3643S~4998245026021181527~DP         1            False               False                   False
266      0            DP            0                     4      151524     REAL               4         0      1     33             -1      -1E+20      V-K2063S     R-K3063S             FWVB  5030808405918905856                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2063S~R-K3063S~5030808405918905856~DP         1            False               False                   False
267      0            DP            0                     4      151528     REAL               4         0      1     33             -1      -1E+20      V-K2063S     R-K4543S             FWVB  5589819464555437381                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2063S~R-K4543S~5589819464555437381~DP         1            False               False                   False
268      0            DP            0                     4      151532     REAL               4         0      1     33             -1      -1E+20       V-K933S     R-K3413S             FWVB  5021149544911429814                                       Differenzdruck      [bar]       1E+20          FWVB~V-K933S~R-K3413S~5021149544911429814~DP         1            False               False                   False
269      0            DP            0                     4      151536     REAL               4         0      1     33             -1      -1E+20      V-K2073S     R-K4553S             FWVB  5483428144944113828                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2073S~R-K4553S~5483428144944113828~DP         1            False               False                   False
270      0            DP            0                     4      151540     REAL               4         0      1     33             -1      -1E+20      V-K2073S     R-K4553S             FWVB  5608524552763679614                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2073S~R-K4553S~5608524552763679614~DP         1            False               False                   False
271      0            DP            0                     4      151544     REAL               4         0      1     33             -1      -1E+20      V-K2023S     R-K4503S             FWVB  5626371875066735675                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2023S~R-K4503S~5626371875066735675~DP         1            False               False                   False
272      0            DP            0                     4      151548     REAL               4         0      1     33             -1      -1E+20       V-K403S     R-K2883S             FWVB  5421154557729864641                                       Differenzdruck      [bar]       1E+20          FWVB~V-K403S~R-K2883S~5421154557729864641~DP         1            False               False                   False
273      0            DP            0                     4      151552     REAL               4         0      1     33             -1      -1E+20      V-K2003S     R-K4483S             FWVB  4808379698586732872                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2003S~R-K4483S~4808379698586732872~DP         1            False               False                   False
274      0            DP            0                     4      151556     REAL               4         0      1     33             -1      -1E+20       V-K253S     R-K2733S             FWVB  4754045271859275254                                       Differenzdruck      [bar]       1E+20          FWVB~V-K253S~R-K2733S~4754045271859275254~DP         1            False               False                   False
275      0            DP            0                     4      151560     REAL               4         0      1     33             -1      -1E+20      V-K1643S     R-K4123S             FWVB  4804522946718449543                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1643S~R-K4123S~4804522946718449543~DP         1            False               False                   False
276      0            DP            0                     4      151564     REAL               4         0      1     33             -1      -1E+20      V-K1643S     R-K4123S             FWVB  5397095414062959706                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1643S~R-K4123S~5397095414062959706~DP         1            False               False                   False
277      0            DP            0                     4      151568     REAL               4         0      1     33             -1      -1E+20      V-K1653S     R-K4133S             FWVB  4972542528251576003                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1653S~R-K4133S~4972542528251576003~DP         1            False               False                   False
278      0            DP            0                     4      151572     REAL               4         0      1     33             -1      -1E+20      V-K1663S     R-K4143S             FWVB  4841968208579971744                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1663S~R-K4143S~4841968208579971744~DP         1            False               False                   False
279      0            DP            0                     4      151576     REAL               4         0      1     33             -1      -1E+20      V-K1663S     R-K4143S             FWVB  4790880210700946505                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1663S~R-K4143S~4790880210700946505~DP         1            False               False                   False
280      0            DP            0                     4      151580     REAL               4         0      1     33             -1      -1E+20       V-K273S     R-K2753S             FWVB  5134226995532837471                                       Differenzdruck      [bar]       1E+20          FWVB~V-K273S~R-K2753S~5134226995532837471~DP         1            False               False                   False
281      0            DP            0                     4      151584     REAL               4         0      1     33             -1      -1E+20       V-K273S     R-K2753S             FWVB  5199665792777686632                                       Differenzdruck      [bar]       1E+20          FWVB~V-K273S~R-K2753S~5199665792777686632~DP         1            False               False                   False
282      0            DP            0                     4      151588     REAL               4         0      1     33             -1      -1E+20       V-K263S     R-K2743S             FWVB  4829820734742795813                                       Differenzdruck      [bar]       1E+20          FWVB~V-K263S~R-K2743S~4829820734742795813~DP         1            False               False                   False
283      0            DP            0                     4      151592     REAL               4         0      1     33             -1      -1E+20      V-K1643S     R-K4123S             FWVB  5473902379470916704                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1643S~R-K4123S~5473902379470916704~DP         1            False               False                   False
284      0            DP            0                     4      151596     REAL               4         0      1     33             -1      -1E+20       V-K273S     R-K2753S             FWVB  5095071279723776262                                       Differenzdruck      [bar]       1E+20          FWVB~V-K273S~R-K2753S~5095071279723776262~DP         1            False               False                   False
285      0            DP            0                     4      151600     REAL               4         0      1     33             -1      -1E+20       V-K263S     R-K2743S             FWVB  4969795535504580282                                       Differenzdruck      [bar]       1E+20          FWVB~V-K263S~R-K2743S~4969795535504580282~DP         1            False               False                   False
286      0            DP            0                     4      151604     REAL               4         0      1     33             -1      -1E+20       V-K263S     R-K2743S             FWVB  5389503305937461852                                       Differenzdruck      [bar]       1E+20          FWVB~V-K263S~R-K2743S~5389503305937461852~DP         1            False               False                   False
287      0            DP            0                     4      151608     REAL               4         0      1     33             -1      -1E+20       V-K263S     R-K2743S             FWVB  5491075003903254860                                       Differenzdruck      [bar]       1E+20          FWVB~V-K263S~R-K2743S~5491075003903254860~DP         1            False               False                   False
288      0            DP            0                     4      151612     REAL               4         0      1     33             -1      -1E+20       V-K233S     R-K2713S             FWVB  5333950106019937551                                       Differenzdruck      [bar]       1E+20          FWVB~V-K233S~R-K2713S~5333950106019937551~DP         1            False               False                   False
289      0            DP            0                     4      151616     REAL               4         0      1     33             -1      -1E+20       V-K243S     R-K2723S             FWVB  5078322764546640049                                       Differenzdruck      [bar]       1E+20          FWVB~V-K243S~R-K2723S~5078322764546640049~DP         1            False               False                   False
290      0            DP            0                     4      151620     REAL               4         0      1     33             -1      -1E+20       V-K573S     R-K3053S             FWVB  5074136990830026951                                       Differenzdruck      [bar]       1E+20          FWVB~V-K573S~R-K3053S~5074136990830026951~DP         1            False               False                   False
291      0            DP            0                     4      151624     REAL               4         0      1     33             -1      -1E+20      V-K1083S     R-K3563S             FWVB  5721943751421394086                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1083S~R-K3563S~5721943751421394086~DP         1            False               False                   False
292      0            DP            0                     4      151628     REAL               4         0      1     33             -1      -1E+20      V-K1083S     R-K3563S             FWVB  4617599012360428982                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1083S~R-K3563S~4617599012360428982~DP         1            False               False                   False
293      0            DP            0                     4      151632     REAL               4         0      1     33             -1      -1E+20      V-K1073S     R-K3553S             FWVB  5143587653110554807                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1073S~R-K3553S~5143587653110554807~DP         1            False               False                   False
294      0            DP            0                     4      151636     REAL               4         0      1     33             -1      -1E+20      V-K1073S     R-K3553S             FWVB  5155974252610494227                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1073S~R-K3553S~5155974252610494227~DP         1            False               False                   False
295      0            DP            0                     4      151640     REAL               4         0      1     33             -1      -1E+20      V-K1073S     R-K3553S             FWVB  5507469098629391620                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1073S~R-K3553S~5507469098629391620~DP         1            False               False                   False
296      0            DP            0                     4      151644     REAL               4         0      1     33             -1      -1E+20      V-K1083S     R-K3563S             FWVB  4644294207793899393                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1083S~R-K3563S~4644294207793899393~DP         1            False               False                   False
297      0            DP            0                     4      151648     REAL               4         0      1     33             -1      -1E+20      V-K1083S     R-K3563S             FWVB  4729135819215267446                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1083S~R-K3563S~4729135819215267446~DP         1            False               False                   False
298      0            DP            0                     4      151652     REAL               4         0      1     33             -1      -1E+20       V-K313S     R-K2793S             FWVB  5397363169018116905                                       Differenzdruck      [bar]       1E+20          FWVB~V-K313S~R-K2793S~5397363169018116905~DP         1            False               False                   False
299      0            DP            0                     4      151656     REAL               4         0      1     33             -1      -1E+20       V-K323S     R-K2803S             FWVB  5293083471824257348                                       Differenzdruck      [bar]       1E+20          FWVB~V-K323S~R-K2803S~5293083471824257348~DP         1            False               False                   False
300      0            DP            0                     4      151660     REAL               4         0      1     33             -1      -1E+20       V-K573S     R-K3053S             FWVB  4692947232485098213                                       Differenzdruck      [bar]       1E+20          FWVB~V-K573S~R-K3053S~4692947232485098213~DP         1            False               False                   False
301      0            DP            0                     4      151664     REAL               4         0      1     33             -1      -1E+20      V-K1083S     R-K3563S             FWVB  4840514655814345420                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1083S~R-K3563S~4840514655814345420~DP         1            False               False                   False
302      0            DP            0                     4      151668     REAL               4         0      1     33             -1      -1E+20      V-K1083S     R-K3563S             FWVB  4984259280617000809                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1083S~R-K3563S~4984259280617000809~DP         1            False               False                   False
303      0            DP            0                     4      151672     REAL               4         0      1     33             -1      -1E+20      V-K2153S     R-K4633S             FWVB  5450848705169565418                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2153S~R-K4633S~5450848705169565418~DP         1            False               False                   False
304      0            DP            0                     4      151676     REAL               4         0      1     33             -1      -1E+20      V-K1083S     R-K3563S             FWVB  5013175068886361021                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1083S~R-K3563S~5013175068886361021~DP         1            False               False                   False
305      0            DP            0                     4      151680     REAL               4         0      1     33             -1      -1E+20      V-K1083S     R-K3563S             FWVB  5129945735358846816                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1083S~R-K3563S~5129945735358846816~DP         1            False               False                   False
306      0            DP            0                     4      151684     REAL               4         0      1     33             -1      -1E+20      V-K1123S     R-K3603S             FWVB  5641063690842961168                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1123S~R-K3603S~5641063690842961168~DP         1            False               False                   False
307      0            DP            0                     4      151688     REAL               4         0      1     33             -1      -1E+20      V-K1073S     R-K3553S             FWVB  5166680757495237751                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1073S~R-K3553S~5166680757495237751~DP         1            False               False                   False
308      0            DP            0                     4      151692     REAL               4         0      1     33             -1      -1E+20      V-K1063S     R-K3543S             FWVB  4614551030187170583                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1063S~R-K3543S~4614551030187170583~DP         1            False               False                   False
309      0            DP            0                     4      151696     REAL               4         0      1     33             -1      -1E+20      V-K1063S     R-K3543S             FWVB  5049615340607119167                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1063S~R-K3543S~5049615340607119167~DP         1            False               False                   False
310      0            DP            0                     4      151700     REAL               4         0      1     33             -1      -1E+20      V-K1063S     R-K3543S             FWVB  5182171757783007257                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1063S~R-K3543S~5182171757783007257~DP         1            False               False                   False
311      0            DP            0                     4      151704     REAL               4         0      1     33             -1      -1E+20       V-K293S     R-K2773S             FWVB  4699379554487286912                                       Differenzdruck      [bar]       1E+20          FWVB~V-K293S~R-K2773S~4699379554487286912~DP         1            False               False                   False
312      0            DP            0                     4      151708     REAL               4         0      1     33             -1      -1E+20       V-K333S     R-K2813S             FWVB  5493473140425149473                                       Differenzdruck      [bar]       1E+20          FWVB~V-K333S~R-K2813S~5493473140425149473~DP         1            False               False                   False
313      0            DP            0                     4      151712     REAL               4         0      1     33             -1      -1E+20       V-K333S     R-K2813S             FWVB  5229547090188049969                                       Differenzdruck      [bar]       1E+20          FWVB~V-K333S~R-K2813S~5229547090188049969~DP         1            False               False                   False
314      0            DP            0                     4      151716     REAL               4         0      1     33             -1      -1E+20        V-K03S     R-K2483S             FWVB  5078971821722268135                                       Differenzdruck      [bar]       1E+20           FWVB~V-K03S~R-K2483S~5078971821722268135~DP         1            False               False                   False
315      0            DP            0                     4      151720     REAL               4         0      1     33             -1      -1E+20      V-K1613S     R-K4093S             FWVB  4838424991008300464                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1613S~R-K4093S~4838424991008300464~DP         1            False               False                   False
316      0            DP            0                     4      151724     REAL               4         0      1     33             -1      -1E+20      V-K1603S     R-K4083S             FWVB  5119436336432835935                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1603S~R-K4083S~5119436336432835935~DP         1            False               False                   False
317      0            DP            0                     4      151728     REAL               4         0      1     33             -1      -1E+20       V-K243S     R-K2723S             FWVB  5069875460823955334                                       Differenzdruck      [bar]       1E+20          FWVB~V-K243S~R-K2723S~5069875460823955334~DP         1            False               False                   False
318      0            DP            0                     4      151732     REAL               4         0      1     33             -1      -1E+20      V-K1623S     R-K4103S             FWVB  4612562908060328263                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1623S~R-K4103S~4612562908060328263~DP         1            False               False                   False
319      0            DP            0                     4      151736     REAL               4         0      1     33             -1      -1E+20      V-K1613S     R-K4093S             FWVB  4968006119183593408                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1613S~R-K4093S~4968006119183593408~DP         1            False               False                   False
320      0            DP            0                     4      151740     REAL               4         0      1     33             -1      -1E+20      V-K1603S     R-K4113S             FWVB  4780867592274315225                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1603S~R-K4113S~4780867592274315225~DP         1            False               False                   False
321      0            DP            0                     4      151744     REAL               4         0      1     33             -1      -1E+20      V-K1633S     R-K4113S             FWVB  4689962447077782592                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1633S~R-K4113S~4689962447077782592~DP         1            False               False                   False
322      0            DP            0                     4      151748     REAL               4         0      1     33             -1      -1E+20      V-K1633S     R-K4113S             FWVB  4907629360497270624                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1633S~R-K4113S~4907629360497270624~DP         1            False               False                   False
323      0            DP            0                     4      151752     REAL               4         0      1     33             -1      -1E+20      V-K1103S     R-K3583S             FWVB  5114532772926850507                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1103S~R-K3583S~5114532772926850507~DP         1            False               False                   False
324      0            DP            0                     4      151756     REAL               4         0      1     33             -1      -1E+20      V-K1143S     R-K3623S             FWVB  4957429172484513667                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1143S~R-K3623S~4957429172484513667~DP         1            False               False                   False
325      0            DP            0                     4      151760     REAL               4         0      1     33             -1      -1E+20      V-K1153S     R-K3633S             FWVB  5683164004528603492                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1153S~R-K3633S~5683164004528603492~DP         1            False               False                   False
326      0            DP            0                     4      151764     REAL               4         0      1     33             -1      -1E+20      V-K1153S     R-K3633S             FWVB  4753737713576765068                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1153S~R-K3633S~4753737713576765068~DP         1            False               False                   False
327      0            DP            0                     4      151768     REAL               4         0      1     33             -1      -1E+20      V-K1033S     R-K3513S             FWVB  5511883908108493205                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1033S~R-K3513S~5511883908108493205~DP         1            False               False                   False
328      0            DP            0                     4      151772     REAL               4         0      1     33             -1      -1E+20      V-K1033S     R-K3513S             FWVB  4985463247915540404                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1033S~R-K3513S~4985463247915540404~DP         1            False               False                   False
329      0            DP            0                     4      151776     REAL               4         0      1     33             -1      -1E+20      V-K1213S     R-K3663S             FWVB  5696463829656272308                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1213S~R-K3663S~5696463829656272308~DP         1            False               False                   False
330      0            DP            0                     4      151780     REAL               4         0      1     33             -1      -1E+20      V-K1223S     R-K3703S             FWVB  4879060213783619417                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1223S~R-K3703S~4879060213783619417~DP         1            False               False                   False
331      0            DP            0                     4      151784     REAL               4         0      1     33             -1      -1E+20      V-K1233S     R-K3713S             FWVB  5328839321384231626                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1233S~R-K3713S~5328839321384231626~DP         1            False               False                   False
332      0            DP            0                     4      151788     REAL               4         0      1     33             -1      -1E+20      V-K1233S     R-K3713S             FWVB  4908302009467601605                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1233S~R-K3713S~4908302009467601605~DP         1            False               False                   False
333      0            DP            0                     4      151792     REAL               4         0      1     33             -1      -1E+20      V-K1233S     R-K3713S             FWVB  5081759066536254041                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1233S~R-K3713S~5081759066536254041~DP         1            False               False                   False
334      0            DP            0                     4      151796     REAL               4         0      1     33             -1      -1E+20      V-K1223S     R-K3703S             FWVB  4920414355371836818                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1223S~R-K3703S~4920414355371836818~DP         1            False               False                   False
335      0            DP            0                     4      151800     REAL               4         0      1     33             -1      -1E+20        V-K03S     R-K2483S             FWVB  4953528746012203881                                       Differenzdruck      [bar]       1E+20           FWVB~V-K03S~R-K2483S~4953528746012203881~DP         1            False               False                   False
336      0            DP            0                     4      151804     REAL               4         0      1     33             -1      -1E+20      V-K1133S     R-K3613S             FWVB  5514426350058393064                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1133S~R-K3613S~5514426350058393064~DP         1            False               False                   False
337      0            DP            0                     4      151808     REAL               4         0      1     33             -1      -1E+20      V-K2153S     R-K4633S             FWVB  4695691920575201490                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2153S~R-K4633S~4695691920575201490~DP         1            False               False                   False
338      0            DP            0                     4      151812     REAL               4         0      1     33             -1      -1E+20      V-K1173S     R-K3653S             FWVB  5686938269985987108                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1173S~R-K3653S~5686938269985987108~DP         1            False               False                   False
339      0            DP            0                     4      151816     REAL               4         0      1     33             -1      -1E+20      V-K1173S     R-K3653S             FWVB  5608013454113942505                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1173S~R-K3653S~5608013454113942505~DP         1            False               False                   False
340      0            DP            0                     4      151820     REAL               4         0      1     33             -1      -1E+20      V-K1173S     R-K3653S             FWVB  5554180086935671036                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1173S~R-K3653S~5554180086935671036~DP         1            False               False                   False
341      0            DP            0                     4      151824     REAL               4         0      1     33             -1      -1E+20      V-K1173S     R-K3653S             FWVB  4715343979099977320                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1173S~R-K3653S~4715343979099977320~DP         1            False               False                   False
342      0            DP            0                     4      151828     REAL               4         0      1     33             -1      -1E+20      V-K1153S     R-K3633S             FWVB  5276185429031066619                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1153S~R-K3633S~5276185429031066619~DP         1            False               False                   False
343      0            DP            0                     4      151832     REAL               4         0      1     33             -1      -1E+20      V-K1153S     R-K3633S             FWVB  5752171491358190657                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1153S~R-K3633S~5752171491358190657~DP         1            False               False                   False
344      0            DP            0                     4      151836     REAL               4         0      1     33             -1      -1E+20      V-K1153S     R-K3633S             FWVB  5044737621363717731                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1153S~R-K3633S~5044737621363717731~DP         1            False               False                   False
345      0            DP            0                     4      151840     REAL               4         0      1     33             -1      -1E+20      V-K1153S     R-K3633S             FWVB  4959178524702114605                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1153S~R-K3633S~4959178524702114605~DP         1            False               False                   False
346      0            DP            0                     4      151844     REAL               4         0      1     33             -1      -1E+20       V-K963S     R-K3443S             FWVB  5184692294783766508                                       Differenzdruck      [bar]       1E+20          FWVB~V-K963S~R-K3443S~5184692294783766508~DP         1            False               False                   False
347      0            DP            0                     4      151848     REAL               4         0      1     33             -1      -1E+20      V-K1023S     R-K3503S             FWVB  5015574389658457843                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1023S~R-K3503S~5015574389658457843~DP         1            False               False                   False
348      0            DP            0                     4      151852     REAL               4         0      1     33             -1      -1E+20      V-K1023S     R-K3503S             FWVB  5340682804823281975                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1023S~R-K3503S~5340682804823281975~DP         1            False               False                   False
349      0            DP            0                     4      151856     REAL               4         0      1     33             -1      -1E+20      V-K1183S     R-K3663S             FWVB  4773718045303625562                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1183S~R-K3663S~4773718045303625562~DP         1            False               False                   False
350      0            DP            0                     4      151860     REAL               4         0      1     33             -1      -1E+20      V-K1203S     R-K3683S             FWVB  4611752310942477664                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1203S~R-K3683S~4611752310942477664~DP         1            False               False                   False
351      0            DP            0                     4      151864     REAL               4         0      1     33             -1      -1E+20      V-K1213S     R-K3693S             FWVB  5649394575722244706                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1213S~R-K3693S~5649394575722244706~DP         1            False               False                   False
352      0            DP            0                     4      151868     REAL               4         0      1     33             -1      -1E+20      V-K1223S     R-K3703S             FWVB  5683145831265886679                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1223S~R-K3703S~5683145831265886679~DP         1            False               False                   False
353      0            DP            0                     4      151872     REAL               4         0      1     33             -1      -1E+20      V-K1223S     R-K3703S             FWVB  5347934852716104645                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1223S~R-K3703S~5347934852716104645~DP         1            False               False                   False
354      0            DP            0                     4      151876     REAL               4         0      1     33             -1      -1E+20        V-K03S     R-K2483S             FWVB  5338581593552364614                                       Differenzdruck      [bar]       1E+20           FWVB~V-K03S~R-K2483S~5338581593552364614~DP         1            False               False                   False
355      0            DP            0                     4      151880     REAL               4         0      1     33             -1      -1E+20       V-K403S     R-K2883S             FWVB  4747253770471595859                                       Differenzdruck      [bar]       1E+20          FWVB~V-K403S~R-K2883S~4747253770471595859~DP         1            False               False                   False
356      0            DP            0                     4      151884     REAL               4         0      1     33             -1      -1E+20       V-K403S     R-K2883S             FWVB  5005156965723780226                                       Differenzdruck      [bar]       1E+20          FWVB~V-K403S~R-K2883S~5005156965723780226~DP         1            False               False                   False
357      0            DP            0                     4      151888     REAL               4         0      1     33             -1      -1E+20       V-K413S     R-K2893S             FWVB  4737813668193434747                                       Differenzdruck      [bar]       1E+20          FWVB~V-K413S~R-K2893S~4737813668193434747~DP         1            False               False                   False
358      0            DP            0                     4      151892     REAL               4         0      1     33             -1      -1E+20       V-K403S     R-K2883S             FWVB  4824230293599010462                                       Differenzdruck      [bar]       1E+20          FWVB~V-K403S~R-K2883S~4824230293599010462~DP         1            False               False                   False
359      0            DP            0                     4      151896     REAL               4         0      1     33             -1      -1E+20       V-K413S     R-K2893S             FWVB  4961446825744614653                                       Differenzdruck      [bar]       1E+20          FWVB~V-K413S~R-K2893S~4961446825744614653~DP         1            False               False                   False
360      0            DP            0                     4      151900     REAL               4         0      1     33             -1      -1E+20       V-K423S     R-K2903S             FWVB  4794000986315043981                                       Differenzdruck      [bar]       1E+20          FWVB~V-K423S~R-K2903S~4794000986315043981~DP         1            False               False                   False
361      0            DP            0                     4      151904     REAL               4         0      1     33             -1      -1E+20       V-K433S     R-K2913S             FWVB  5663966403597611254                                       Differenzdruck      [bar]       1E+20          FWVB~V-K433S~R-K2913S~5663966403597611254~DP         1            False               False                   False
362      0            DP            0                     4      151908     REAL               4         0      1     33             -1      -1E+20       V-K443S     R-K2923S             FWVB  5285271495094652658                                       Differenzdruck      [bar]       1E+20          FWVB~V-K443S~R-K2923S~5285271495094652658~DP         1            False               False                   False
363      0            DP            0                     4      151912     REAL               4         0      1     33             -1      -1E+20       V-K443S     R-K2923S             FWVB  5010483887057780845                                       Differenzdruck      [bar]       1E+20          FWVB~V-K443S~R-K2923S~5010483887057780845~DP         1            False               False                   False
364      0            DP            0                     4      151916     REAL               4         0      1     33             -1      -1E+20       V-K453S     R-K2933S             FWVB  5153454494023353435                                       Differenzdruck      [bar]       1E+20          FWVB~V-K453S~R-K2933S~5153454494023353435~DP         1            False               False                   False
365      0            DP            0                     4      151920     REAL               4         0      1     33             -1      -1E+20       V-K463S     R-K2943S             FWVB  5577210775620233409                                       Differenzdruck      [bar]       1E+20          FWVB~V-K463S~R-K2943S~5577210775620233409~DP         1            False               False                   False
366      0            DP            0                     4      151924     REAL               4         0      1     33             -1      -1E+20       V-K463S     R-K2943S             FWVB  4884816399211992951                                       Differenzdruck      [bar]       1E+20          FWVB~V-K463S~R-K2943S~4884816399211992951~DP         1            False               False                   False
367      0            DP            0                     4      151928     REAL               4         0      1     33             -1      -1E+20       V-K473S     R-K2953S             FWVB  5368434258234128749                                       Differenzdruck      [bar]       1E+20          FWVB~V-K473S~R-K2953S~5368434258234128749~DP         1            False               False                   False
368      0            DP            0                     4      151932     REAL               4         0      1     33             -1      -1E+20       V-K473S     R-K2953S             FWVB  4934825369837329981                                       Differenzdruck      [bar]       1E+20          FWVB~V-K473S~R-K2953S~4934825369837329981~DP         1            False               False                   False
369      0            DP            0                     4      151936     REAL               4         0      1     33             -1      -1E+20       V-K473S     R-K2953S             FWVB  4716889123169234975                                       Differenzdruck      [bar]       1E+20          FWVB~V-K473S~R-K2953S~4716889123169234975~DP         1            False               False                   False
370      0            DP            0                     4      151940     REAL               4         0      1     33             -1      -1E+20      V-K2383S     R-K4863S             FWVB  4804005204522723919                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2383S~R-K4863S~4804005204522723919~DP         1            False               False                   False
371      0            DP            0                     4      151944     REAL               4         0      1     33             -1      -1E+20      V-K2383S     R-K4863S             FWVB  5204002376528007016                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2383S~R-K4863S~5204002376528007016~DP         1            False               False                   False
372      0            DP            0                     4      151948     REAL               4         0      1     33             -1      -1E+20       V-K163S     R-K2643S             FWVB  5118203249310421888                                       Differenzdruck      [bar]       1E+20          FWVB~V-K163S~R-K2643S~5118203249310421888~DP         1            False               False                   False
373      0            DP            0                     4      151952     REAL               4         0      1     33             -1      -1E+20       V-K163S     R-K2643S             FWVB  4869838397682489649                                       Differenzdruck      [bar]       1E+20          FWVB~V-K163S~R-K2643S~4869838397682489649~DP         1            False               False                   False
374      0            DP            0                     4      151956     REAL               4         0      1     33             -1      -1E+20       V-K163S     R-K2643S             FWVB  5055469814130651373                                       Differenzdruck      [bar]       1E+20          FWVB~V-K163S~R-K2643S~5055469814130651373~DP         1            False               False                   False
375      0            DP            0                     4      151960     REAL               4         0      1     33             -1      -1E+20       V-K163S     R-K2643S             FWVB  4889571787974482626                                       Differenzdruck      [bar]       1E+20          FWVB~V-K163S~R-K2643S~4889571787974482626~DP         1            False               False                   False
376      0            DP            0                     4      151964     REAL               4         0      1     33             -1      -1E+20       V-K163S     R-K2643S             FWVB  4615450207162449682                                       Differenzdruck      [bar]       1E+20          FWVB~V-K163S~R-K2643S~4615450207162449682~DP         1            False               False                   False
377      0            DP            0                     4      151968     REAL               4         0      1     33             -1      -1E+20      V-K1663S     R-K4143S             FWVB  4988773153864880048                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1663S~R-K4143S~4988773153864880048~DP         1            False               False                   False
378      0            DP            0                     4      151972     REAL               4         0      1     33             -1      -1E+20       V-K163S     R-K2643S             FWVB  5563311426525208573                                       Differenzdruck      [bar]       1E+20          FWVB~V-K163S~R-K2643S~5563311426525208573~DP         1            False               False                   False
379      0            DP            0                     4      151976     REAL               4         0      1     33             -1      -1E+20       V-K143S     R-K2623S             FWVB  5330290974871142634                                       Differenzdruck      [bar]       1E+20          FWVB~V-K143S~R-K2623S~5330290974871142634~DP         1            False               False                   False
380      0            DP            0                     4      151980     REAL               4         0      1     33             -1      -1E+20       V-K463S     R-K2943S             FWVB  4729161400809722771                                       Differenzdruck      [bar]       1E+20          FWVB~V-K463S~R-K2943S~4729161400809722771~DP         1            False               False                   False
381      0            DP            0                     4      151984     REAL               4         0      1     33             -1      -1E+20       V-K473S     R-K2953S             FWVB  4754097142009822062                                       Differenzdruck      [bar]       1E+20          FWVB~V-K473S~R-K2953S~4754097142009822062~DP         1            False               False                   False
382      0            DP            0                     4      151988     REAL               4         0      1     33             -1      -1E+20      V-K2403S     R-K4883S             FWVB  5401810795366193685                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2403S~R-K4883S~5401810795366193685~DP         1            False               False                   False
383      0            DP            0                     4      151992     REAL               4         0      1     33             -1      -1E+20       V-K153S     R-K2633S             FWVB  5384468559580542759                                       Differenzdruck      [bar]       1E+20          FWVB~V-K153S~R-K2633S~5384468559580542759~DP         1            False               False                   False
384      0            DP            0                     4      151996     REAL               4         0      1     33             -1      -1E+20       V-K133S     R-K2613S             FWVB  5318331789158859772                                       Differenzdruck      [bar]       1E+20          FWVB~V-K133S~R-K2613S~5318331789158859772~DP         1            False               False                   False
385      0            DP            0                     4      152000     REAL               4         0      1     33             -1      -1E+20      V-K1093S     R-K3573S             FWVB  4738106601869918484                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1093S~R-K3573S~4738106601869918484~DP         1            False               False                   False
386      0            DP            0                     4      152004     REAL               4         0      1     33             -1      -1E+20      V-K1093S     R-K3573S             FWVB  4775801701553878603                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1093S~R-K3573S~4775801701553878603~DP         1            False               False                   False
387      0            DP            0                     4      152008     REAL               4         0      1     33             -1      -1E+20      V-K1093S     R-K3573S             FWVB  4732732360611106938                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1093S~R-K3573S~4732732360611106938~DP         1            False               False                   False
388      0            DP            0                     4      152012     REAL               4         0      1     33             -1      -1E+20      V-K1093S     R-K3573S             FWVB  4778286022227403033                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1093S~R-K3573S~4778286022227403033~DP         1            False               False                   False
389      0            DP            0                     4      152016     REAL               4         0      1     33             -1      -1E+20      V-K2083S     R-K4563S             FWVB  5435045382624363994                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2083S~R-K4563S~5435045382624363994~DP         1            False               False                   False
390      0            DP            0                     4      152020     REAL               4         0      1     33             -1      -1E+20      V-K2083S     R-K4563S             FWVB  5242842916750666925                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2083S~R-K4563S~5242842916750666925~DP         1            False               False                   False
391      0            DP            0                     4      152024     REAL               4         0      1     33             -1      -1E+20      V-K2083S     R-K4563S             FWVB  4912783072892831323                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2083S~R-K4563S~4912783072892831323~DP         1            False               False                   False
392      0            DP            0                     4      152028     REAL               4         0      1     33             -1      -1E+20      V-K2083S     R-K4563S             FWVB  4687151605522873415                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2083S~R-K4563S~4687151605522873415~DP         1            False               False                   False
393      0            DP            0                     4      152032     REAL               4         0      1     33             -1      -1E+20      V-K2083S     R-K4563S             FWVB  5634194602703056958                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2083S~R-K4563S~5634194602703056958~DP         1            False               False                   False
394      0            DP            0                     4      152036     REAL               4         0      1     33             -1      -1E+20       V-K593S     R-K3073S             FWVB  5625042714189478940                                       Differenzdruck      [bar]       1E+20          FWVB~V-K593S~R-K3073S~5625042714189478940~DP         1            False               False                   False
395      0            DP            0                     4      152040     REAL               4         0      1     33             -1      -1E+20       V-K593S     R-K3073S             FWVB  4840040765573687334                                       Differenzdruck      [bar]       1E+20          FWVB~V-K593S~R-K3073S~4840040765573687334~DP         1            False               False                   False
396      0            DP            0                     4      152044     REAL               4         0      1     33             -1      -1E+20       V-K603S     R-K3083S             FWVB  5694344737203567106                                       Differenzdruck      [bar]       1E+20          FWVB~V-K603S~R-K3083S~5694344737203567106~DP         1            False               False                   False
397      0            DP            0                     4      152048     REAL               4         0      1     33             -1      -1E+20      V-K2393S     R-K4873S             FWVB  4620979504570756922                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2393S~R-K4873S~4620979504570756922~DP         1            False               False                   False
398      0            DP            0                     4      152052     REAL               4         0      1     33             -1      -1E+20       V-K593S     R-K3073S             FWVB  5410122665508561633                                       Differenzdruck      [bar]       1E+20          FWVB~V-K593S~R-K3073S~5410122665508561633~DP         1            False               False                   False
399      0            DP            0                     4      152056     REAL               4         0      1     33             -1      -1E+20       V-K603S     R-K3083S             FWVB  5014468390007665690                                       Differenzdruck      [bar]       1E+20          FWVB~V-K603S~R-K3083S~5014468390007665690~DP         1            False               False                   False
400      0            DP            0                     4      152060     REAL               4         0      1     33             -1      -1E+20      V-K1073S     R-K3553S             FWVB  5233585288374752785                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1073S~R-K3553S~5233585288374752785~DP         1            False               False                   False
401      0            DP            0                     4      152064     REAL               4         0      1     33             -1      -1E+20       V-K953S     R-K3633S             FWVB  4674360527812832669                                       Differenzdruck      [bar]       1E+20          FWVB~V-K953S~R-K3633S~4674360527812832669~DP         1            False               False                   False
402      0            DP            0                     4      152068     REAL               4         0      1     33             -1      -1E+20       V-K953S     R-K3433S             FWVB  5087702146373705981                                       Differenzdruck      [bar]       1E+20          FWVB~V-K953S~R-K3433S~5087702146373705981~DP         1            False               False                   False
403      0            DP            0                     4      152072     REAL               4         0      1     33             -1      -1E+20       V-K953S     R-K3433S             FWVB  5142910015534822732                                       Differenzdruck      [bar]       1E+20          FWVB~V-K953S~R-K3433S~5142910015534822732~DP         1            False               False                   False
404      0            DP            0                     4      152076     REAL               4         0      1     33             -1      -1E+20       V-K963S     R-K3443S             FWVB  5080512732384776234                                       Differenzdruck      [bar]       1E+20          FWVB~V-K963S~R-K3443S~5080512732384776234~DP         1            False               False                   False
405      0            DP            0                     4      152080     REAL               4         0      1     33             -1      -1E+20       V-K963S     R-K3443S             FWVB  5227036118096218347                                       Differenzdruck      [bar]       1E+20          FWVB~V-K963S~R-K3443S~5227036118096218347~DP         1            False               False                   False
406      0            DP            0                     4      152084     REAL               4         0      1     33             -1      -1E+20       V-K973S     R-K3453S             FWVB  5448365009177867429                                       Differenzdruck      [bar]       1E+20          FWVB~V-K973S~R-K3453S~5448365009177867429~DP         1            False               False                   False
407      0            DP            0                     4      152088     REAL               4         0      1     33             -1      -1E+20      V-K1013S     R-K3493S             FWVB  4904021830209359251                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1013S~R-K3493S~4904021830209359251~DP         1            False               False                   False
408      0            DP            0                     4      152092     REAL               4         0      1     33             -1      -1E+20       V-K953S     R-K3433S             FWVB  5678013267622520703                                       Differenzdruck      [bar]       1E+20          FWVB~V-K953S~R-K3433S~5678013267622520703~DP         1            False               False                   False
409      0            DP            0                     4      152096     REAL               4         0      1     33             -1      -1E+20       V-K953S     R-K3433S             FWVB  5036661921214789266                                       Differenzdruck      [bar]       1E+20          FWVB~V-K953S~R-K3433S~5036661921214789266~DP         1            False               False                   False
410      0            DP            0                     4      152100     REAL               4         0      1     33             -1      -1E+20       V-K963S     R-K3443S             FWVB  5533600337297302902                                       Differenzdruck      [bar]       1E+20          FWVB~V-K963S~R-K3443S~5533600337297302902~DP         1            False               False                   False
411      0            DP            0                     4      152104     REAL               4         0      1     33             -1      -1E+20       V-K963S     R-K3443S             FWVB  4843922463467905314                                       Differenzdruck      [bar]       1E+20          FWVB~V-K963S~R-K3443S~4843922463467905314~DP         1            False               False                   False
412      0            DP            0                     4      152108     REAL               4         0      1     33             -1      -1E+20       V-K973S     R-K3453S             FWVB  5422109685270461796                                       Differenzdruck      [bar]       1E+20          FWVB~V-K973S~R-K3453S~5422109685270461796~DP         1            False               False                   False
413      0            DP            0                     4      152112     REAL               4         0      1     33             -1      -1E+20       V-K973S     R-K3453S             FWVB  5510201249316735879                                       Differenzdruck      [bar]       1E+20          FWVB~V-K973S~R-K3453S~5510201249316735879~DP         1            False               False                   False
414      0            DP            0                     4      152116     REAL               4         0      1     33             -1      -1E+20      V-K1003S     R-K3483S             FWVB  5345883489919526044                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1003S~R-K3483S~5345883489919526044~DP         1            False               False                   False
415      0            DP            0                     4      152120     REAL               4         0      1     33             -1      -1E+20      V-K1013S     R-K3493S             FWVB  5749366699607682518                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1013S~R-K3493S~5749366699607682518~DP         1            False               False                   False
416      0            DP            0                     4      152124     REAL               4         0      1     33             -1      -1E+20      V-K1023S     R-K3503S             FWVB  5395974162027139767                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1023S~R-K3503S~5395974162027139767~DP         1            False               False                   False
417      0            DP            0                     4      152128     REAL               4         0      1     33             -1      -1E+20       V-K473S     R-K2953S             FWVB  5594862625858924531                                       Differenzdruck      [bar]       1E+20          FWVB~V-K473S~R-K2953S~5594862625858924531~DP         1            False               False                   False
418      0            DP            0                     4      152132     REAL               4         0      1     33             -1      -1E+20        V-SP02       R-SP02             FWVB  4848015442334341000                                       Differenzdruck      [bar]       1E+20             FWVB~V-SP02~R-SP02~4848015442334341000~DP         1            False               False                   False
419      0            DP            0                     4      152136     REAL               4         0      1     33             -1      -1E+20       V-K473S     R-K2953S             FWVB  5629665606219325209                                       Differenzdruck      [bar]       1E+20          FWVB~V-K473S~R-K2953S~5629665606219325209~DP         1            False               False                   False
420      0            DP            0                     4      152140     REAL               4         0      1     33             -1      -1E+20       V-K253S     R-K2733S             FWVB  5033838081953255687                                       Differenzdruck      [bar]       1E+20          FWVB~V-K253S~R-K2733S~5033838081953255687~DP         1            False               False                   False
421      0            DP            0                     4      152144     REAL               4         0      1     33             -1      -1E+20       V-K273S     R-K2753S             FWVB  4679890828975781067                                       Differenzdruck      [bar]       1E+20          FWVB~V-K273S~R-K2753S~4679890828975781067~DP         1            False               False                   False
422      0            DP            0                     4      152148     REAL               4         0      1     33             -1      -1E+20      V-K2383S     R-K4863S             FWVB  5037872509385452159                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2383S~R-K4863S~5037872509385452159~DP         1            False               False                   False
423      0            DP            0                     4      152152     REAL               4         0      1     33             -1      -1E+20      V-K2383S     R-K4863S             FWVB  5375255181374254857                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2383S~R-K4863S~5375255181374254857~DP         1            False               False                   False
424      0            DP            0                     4      152156     REAL               4         0      1     33             -1      -1E+20      V-K2383S     R-K4863S             FWVB  5659192153935849444                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2383S~R-K4863S~5659192153935849444~DP         1            False               False                   False
425      0            DP            0                     4      152160     REAL               4         0      1     33             -1      -1E+20       V-K473S     R-K2953S             FWVB  5416161135167168216                                       Differenzdruck      [bar]       1E+20          FWVB~V-K473S~R-K2953S~5416161135167168216~DP         1            False               False                   False
426      0            DP            0                     4      152164     REAL               4         0      1     33             -1      -1E+20      V-K2013S     R-K4493S             FWVB  4726386820185329079                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2013S~R-K4493S~4726386820185329079~DP         1            False               False                   False
427      0            DP            0                     4      152168     REAL               4         0      1     33             -1      -1E+20      V-K2023S     R-K4503S             FWVB  5048794081120001623                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2023S~R-K4503S~5048794081120001623~DP         1            False               False                   False
428      0            DP            0                     4      152172     REAL               4         0      1     33             -1      -1E+20      V-K1493S     R-K3973S             FWVB  5078575524279271295                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1493S~R-K3973S~5078575524279271295~DP         1            False               False                   False
429      0            DP            0                     4      152176     REAL               4         0      1     33             -1      -1E+20      V-K1473S     R-K3953S             FWVB  5328165953472204269                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1473S~R-K3953S~5328165953472204269~DP         1            False               False                   False
430      0            DP            0                     4      152180     REAL               4         0      1     33             -1      -1E+20      V-K1463S     R-K3943S             FWVB  4827314536298448425                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1463S~R-K3943S~4827314536298448425~DP         1            False               False                   False
431      0            DP            0                     4      152184     REAL               4         0      1     33             -1      -1E+20      V-K1453S     R-K3933S             FWVB  5053527380726940026                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1453S~R-K3933S~5053527380726940026~DP         1            False               False                   False
432      0            DP            0                     4      152188     REAL               4         0      1     33             -1      -1E+20      V-K1443S     R-K3923S             FWVB  5722736529457112020                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1443S~R-K3923S~5722736529457112020~DP         1            False               False                   False
433      0            DP            0                     4      152192     REAL               4         0      1     33             -1      -1E+20      V-K1443S     R-K3923S             FWVB  4833248160019911615                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1443S~R-K3923S~4833248160019911615~DP         1            False               False                   False
434      0            DP            0                     4      152196     REAL               4         0      1     33             -1      -1E+20      V-K1433S     R-K3913S             FWVB  5022762526597417884                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1433S~R-K3913S~5022762526597417884~DP         1            False               False                   False
435      0            DP            0                     4      152200     REAL               4         0      1     33             -1      -1E+20      V-K1423S     R-K3903S             FWVB  5172442747972094426                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1423S~R-K3903S~5172442747972094426~DP         1            False               False                   False
436      0            DP            0                     4      152204     REAL               4         0      1     33             -1      -1E+20      V-K1423S     R-K3903S             FWVB  5219159297285087056                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1423S~R-K3903S~5219159297285087056~DP         1            False               False                   False
437      0            DP            0                     4      152208     REAL               4         0      1     33             -1      -1E+20      V-K1403S     R-K3883S             FWVB  5290157706408162198                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1403S~R-K3883S~5290157706408162198~DP         1            False               False                   False
438      0            DP            0                     4      152212     REAL               4         0      1     33             -1      -1E+20      V-K1403S     R-K3883S             FWVB  5413829902103673412                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1403S~R-K3883S~5413829902103673412~DP         1            False               False                   False
439      0            DP            0                     4      152216     REAL               4         0      1     33             -1      -1E+20      V-K1403S     R-K3883S             FWVB  4724782239687086625                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1403S~R-K3883S~4724782239687086625~DP         1            False               False                   False
440      0            DP            0                     4      152220     REAL               4         0      1     33             -1      -1E+20      V-K1403S     R-K3883S             FWVB  5332535673077775580                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1403S~R-K3883S~5332535673077775580~DP         1            False               False                   False
441      0            DP            0                     4      152224     REAL               4         0      1     33             -1      -1E+20      V-K2143S     R-K4623S             FWVB  5690996677853628489                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2143S~R-K4623S~5690996677853628489~DP         1            False               False                   False
442      0            DP            0                     4      152228     REAL               4         0      1     33             -1      -1E+20      V-K1423S     R-K3903S             FWVB  5462869912273155677                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1423S~R-K3903S~5462869912273155677~DP         1            False               False                   False
443      0            DP            0                     4      152232     REAL               4         0      1     33             -1      -1E+20      V-K1433S     R-K3913S             FWVB  4912417173031909926                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1433S~R-K3913S~4912417173031909926~DP         1            False               False                   False
444      0            DP            0                     4      152236     REAL               4         0      1     33             -1      -1E+20      V-K1423S     R-K3903S             FWVB  5632830894118958363                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1423S~R-K3903S~5632830894118958363~DP         1            False               False                   False
445      0            DP            0                     4      152240     REAL               4         0      1     33             -1      -1E+20      V-K1443S     R-K3923S             FWVB  5129892855980697258                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1443S~R-K3923S~5129892855980697258~DP         1            False               False                   False
446      0            DP            0                     4      152244     REAL               4         0      1     33             -1      -1E+20      V-K1433S     R-K3913S             FWVB  4812170061133334192                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1433S~R-K3913S~4812170061133334192~DP         1            False               False                   False
447      0            DP            0                     4      152248     REAL               4         0      1     33             -1      -1E+20      V-K1453S     R-K3933S             FWVB  4650690516913118760                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1453S~R-K3933S~4650690516913118760~DP         1            False               False                   False
448      0            DP            0                     4      152252     REAL               4         0      1     33             -1      -1E+20      V-K1473S     R-K3953S             FWVB  5593258920455231713                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1473S~R-K3953S~5593258920455231713~DP         1            False               False                   False
449      0            DP            0                     4      152256     REAL               4         0      1     33             -1      -1E+20      V-K1473S     R-K3953S             FWVB  4773249905911243471                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1473S~R-K3953S~4773249905911243471~DP         1            False               False                   False
450      0            DP            0                     4      152260     REAL               4         0      1     33             -1      -1E+20      V-K1493S     R-K3973S             FWVB  5139255343562953856                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1493S~R-K3973S~5139255343562953856~DP         1            False               False                   False
451      0            DP            0                     4      152264     REAL               4         0      1     33             -1      -1E+20      V-K1503S     R-K3983S             FWVB  4945961939269554771                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1503S~R-K3983S~4945961939269554771~DP         1            False               False                   False
452      0            DP            0                     4      152268     REAL               4         0      1     33             -1      -1E+20      V-K1533S     R-K4013S             FWVB  4945833664991839087                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1533S~R-K4013S~4945833664991839087~DP         1            False               False                   False
453      0            DP            0                     4      152272     REAL               4         0      1     33             -1      -1E+20      V-K1503S     R-K3983S             FWVB  4805781336100450167                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1503S~R-K3983S~4805781336100450167~DP         1            False               False                   False
454      0            DP            0                     4      152276     REAL               4         0      1     33             -1      -1E+20      V-K1523S     R-K4003S             FWVB  5111577951994515523                                       Differenzdruck      [bar]       1E+20         FWVB~V-K1523S~R-K4003S~5111577951994515523~DP         1            False               False                   False
455      0            DP            0                     4      152280     REAL               4         0      1     33             -1      -1E+20       V-K943S     R-K3423S             FWVB  5567312130001677534                                       Differenzdruck      [bar]       1E+20          FWVB~V-K943S~R-K3423S~5567312130001677534~DP         1            False               False                   False
456      0            DP            0                     4      152284     REAL               4         0      1     33             -1      -1E+20      V-K2023S     R-K4503S             FWVB  5430848372257542560                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2023S~R-K4503S~5430848372257542560~DP         1            False               False                   False
457      0            DP            0                     4      152288     REAL               4         0      1     33             -1      -1E+20      V-K2063S     R-K4543S             FWVB  5147813561931418786                                       Differenzdruck      [bar]       1E+20         FWVB~V-K2063S~R-K4543S~5147813561931418786~DP         1            False               False                   False
458      0            DP            0                  1352      152292     REAL               4         0      1     37             -1         0.5             *            *             FWVB                    *                                       Differenzdruck      [bar]       1E+20                                         FWVB~*~*~*~DP       338             True                True                   False
459      0            DH            0                  1352      153644     REAL               4         0      1     37             -1      -1E+20             *            *             FWVB                    *                                   Differenzdruckhöhe        [m]       1E+20                                         FWVB~*~*~*~DH       338             True                True                   False
460      0            QM            0                     4      154996     REAL               4         0      1   1265             -1      -1E+20           V-E         V-E0             VENT  5120684848284658605                                           Durchfluss      [t/h]       1E+20                  VENT~V-E~V-E0~5120684848284658605~QM         1            False               False                   False
461      0           RHO            0                     4      155000     REAL               4         0      1   1073             -1      -1E+20           R-E         R-E2             PUMP  5374020919990423089                                               Dichte    [kg/m3]       1E+20                 PUMP~R-E~R-E2~5374020919990423089~RHO         1            False               False                   False
462      0             M            0                     4      155004     REAL               4         0      1     49             -1      -1E+20           R-E         R-E2             PUMP  5374020919990423089                                          Massenstrom     [kg/s]       1E+20                   PUMP~R-E~R-E2~5374020919990423089~M         1            False               False                   False
463      0             N            0                     4      155008     REAL               4         0      1   1073             -1      -1E+20           R-E         R-E2             PUMP  5374020919990423089                                             Drehzahl    [1/min]       1E+20                   PUMP~R-E~R-E2~5374020919990423089~N         1            False               False                   False
464      0           ETA            0                     4      155012     REAL               4         0      1   1073             -1      -1E+20           R-E         R-E2             PUMP  5374020919990423089                                         Wirkungsgrad         []       1E+20                 PUMP~R-E~R-E2~5374020919990423089~ETA         1            False               False                   False
465      0          ETAW            0                     4      155016     REAL               4         0      1     49             -1      -1E+20           R-E         R-E2             PUMP  5374020919990423089                                   Wellenwirkungsgrad         []       1E+20                PUMP~R-E~R-E2~5374020919990423089~ETAW         1            False               False                   False
466      0            DP            0                     4      155020     REAL               4         0      1     49             -1      -1E+20           R-E         R-E2             PUMP  5374020919990423089                                        Druckerhöhung      [bar]       1E+20                  PUMP~R-E~R-E2~5374020919990423089~DP         1            False               False                   False
467      0            PH            0                     4      155024     REAL               4         0      1   1265             -1      -1E+20        R-E-DH                          KNOT  5037146832979712094                                                Druck      [bar]       1E+20                   KNOT~R-E-DH~~5037146832979712094~PH         1            False               False                   False
468      0            QM            0                     4      155028     REAL               4         0      1   1265             -1      -1E+20          R-E3         R-E4             VENT  5652541284139882253                                           Durchfluss      [t/h]       1E+20                 VENT~R-E3~R-E4~5652541284139882253~QM         1            False               False                   False
469      0          RART            0                    12      155032     CHAR              12         0      1   1075             -1      -1E+20           R-E         R-E3             PGRP  4924988159454251099                                    Name Regelungsart   [3Sname]       1E+20                PGRP~R-E~R-E3~4924988159454251099~RART         1            False               False                   False
470      0             W            0                     4      155044     REAL               4         0      1   1073             -1      -1E+20           R-E         R-E3             PGRP  4924988159454251099                            Sollwert zur Regelungsart    [unitX]       1E+20                   PGRP~R-E~R-E3~4924988159454251099~W         1            False               False                   False
471      0             X            0                     4      155048     REAL               4         0      1   1073             -1      -1E+20           R-E         R-E3             PGRP  4924988159454251099                             Istwert zur Regelungsart    [unitX]       1E+20                   PGRP~R-E~R-E3~4924988159454251099~X         1            False               False                   False
472      0           RHO            0                     4      155052     REAL               4         0      1   1073             -1      -1E+20    V-TS-S-WU2  V-TS-S-WU2b             PUMP  5661833458038115239                                               Dichte    [kg/m3]       1E+20   PUMP~V-TS-S-WU2~V-TS-S-WU2b~5661833458038115239~RHO         1            False               False                   False
473      0             M            0                     4      155056     REAL               4         0      1     49             -1      -1E+20    V-TS-S-WU2  V-TS-S-WU2b             PUMP  5661833458038115239                                          Massenstrom     [kg/s]       1E+20     PUMP~V-TS-S-WU2~V-TS-S-WU2b~5661833458038115239~M         1            False               False                   False
474      0             N            0                     4      155060     REAL               4         0      1   1073             -1      -1E+20    V-TS-S-WU2  V-TS-S-WU2b             PUMP  5661833458038115239                                             Drehzahl    [1/min]       1E+20     PUMP~V-TS-S-WU2~V-TS-S-WU2b~5661833458038115239~N         1            False               False                   False
475      0           ETA            0                     4      155064     REAL               4         0      1   1073             -1      -1E+20    V-TS-S-WU2  V-TS-S-WU2b             PUMP  5661833458038115239                                         Wirkungsgrad         []       1E+20   PUMP~V-TS-S-WU2~V-TS-S-WU2b~5661833458038115239~ETA         1            False               False                   False
476      0          ETAW            0                     4      155068     REAL               4         0      1     49             -1      -1E+20    V-TS-S-WU2  V-TS-S-WU2b             PUMP  5661833458038115239                                   Wellenwirkungsgrad         []       1E+20  PUMP~V-TS-S-WU2~V-TS-S-WU2b~5661833458038115239~ETAW         1            False               False                   False
477      0            DP            0                     4      155072     REAL               4         0      1     49             -1      -1E+20    V-TS-S-WU2  V-TS-S-WU2b             PUMP  5661833458038115239                                        Druckerhöhung      [bar]       1E+20    PUMP~V-TS-S-WU2~V-TS-S-WU2b~5661833458038115239~DP         1            False               False                   False
478      0            PH            0                     4      155076     REAL               4         0      1   1265             -1      -1E+20       R-TS-DH                          KNOT  4810663080415972317                                                Druck      [bar]       1E+20                  KNOT~R-TS-DH~~4810663080415972317~PH         1            False               False                   False
479      0             Q            0                     4      155080     REAL               4         0      1   1057             -1      -1E+20   FWWU_505061                          FWWU  5140753672436942021                                 Übertragungsleistung       [kW]       1E+20               FWWU~FWWU_505061~~5140753672436942021~Q         1            False               False                   False
480      0         T2AUS            0                     4      155084     REAL               4         0      1   1057             -1      -1E+20   FWWU_505061                          FWWU  5140753672436942021                         Austrittstemperatur sekundär       [°C]       1E+20           FWWU~FWWU_505061~~5140753672436942021~T2AUS         1            False               False                   False
481      0         T2EIN            0                     4      155088     REAL               4         0      1   1057             -1      -1E+20   FWWU_505061                          FWWU  5140753672436942021                         Eintrittstemperatur sekundär       [°C]       1E+20           FWWU~FWWU_505061~~5140753672436942021~T2EIN         1            False               False                   False
482      0         T1EIN            0                     4      155092     REAL               4         0      1   1057             -1      -1E+20   FWWU_505061                          FWWU  5140753672436942021                           Eintrittstemperatur primär       [°C]       1E+20           FWWU~FWWU_505061~~5140753672436942021~T1EIN         1            False               False                   False
483      0         T1AUS            0                     4      155096     REAL               4         0      1   1057             -1      -1E+20   FWWU_505061                          FWWU  5140753672436942021                           Austrittstemperatur primär       [°C]       1E+20           FWWU~FWWU_505061~~5140753672436942021~T1AUS         1            False               False                   False
484      0            QM            0                     4      155100     REAL               4         0      1   1265             -1      -1E+20        V-TS-P    V-TS-P-WU             VENT  5257205059759497594                                           Durchfluss      [t/h]       1E+20          VENT~V-TS-P~V-TS-P-WU~5257205059759497594~QM         1            False               False                   False
485      0            QM            0                     4      155104     REAL               4         0      1   1265             -1      -1E+20     V-TS-S-WU   V-TS-S-WU2             VENT  5397401198360947165                                           Durchfluss      [t/h]       1E+20      VENT~V-TS-S-WU~V-TS-S-WU2~5397401198360947165~QM         1            False               False                   False
486      0            XA            0                     4      155108     REAL               4         0      1   1265             -1      -1E+20          Last                          RMES  4899351962406121892                                Signalwert am Ausgang   [signal]       1E+20                     RMES~Last~~4899351962406121892~XA         1            False               False                   False
487      0            XA            0                     4      155112     REAL               4         0      1   1265             -1      -1E+20     Erzeugung                          RMES  5554547908379981123                                Signalwert am Ausgang   [signal]       1E+20                RMES~Erzeugung~~5554547908379981123~XA         1            False               False                   False
488      0            XA            0                     4      155116     REAL               4         0      1   1265             -1      -1E+20     WVerlProz                          RDIV  5105729699655079411                                Signalwert am Ausgang   [signal]       1E+20                RDIV~WVerlProz~~5105729699655079411~XA         1            False               False                   False
489      0            XA            0                     4      155120     REAL               4         0      1   1265             -1      -1E+20           UWM                          RMES  5255082225302217802                                Signalwert am Ausgang   [signal]       1E+20                      RMES~UWM~~5255082225302217802~XA         1            False               False                   False
490      0            XA            0                     4      155124     REAL               4         0      1   1265             -1      -1E+20           TVL                          RFKT  4836221118111466566                                Signalwert am Ausgang   [signal]       1E+20                      RFKT~TVL~~4836221118111466566~XA         1            False               False                   False
491      0            XA            0                     4      155128     REAL               4         0      1   1265             -1      -1E+20          TRSP                          RFKT  5737169626127702346                                Signalwert am Ausgang   [signal]       1E+20                     RFKT~TRSP~~5737169626127702346~XA         1            False               False                   False
492      0            XA            0                     4      155132     REAL               4         0      1   1265             -1      -1E+20  NetzTrennEin                          RSLW  5347287125110176930                                Signalwert am Ausgang   [signal]       1E+20             RSLW~NetzTrennEin~~5347287125110176930~XA         1            False               False                   False
493      0             W            0                     4      155136     REAL               4         0      1    243             -1      -1E+20        AT Tag                          SWVT  5355550039103568011                           Tabellensollwert generisch    [unitX]       1E+20                    SWVT~AT Tag~~5355550039103568011~W         1            False               False                   False
2024-07-16 10:44:38,439 ; PT3S                                                         ; DEBUG   ; Mx._parseMx1: _Done.
2024-07-16 10:44:38,439 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: Start.
2024-07-16 10:44:38,439 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: mx2File: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.MX2 parsing ...
2024-07-16 10:44:38,445 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:FWES         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      40 Data[0]: 5393031835236689087 Data[-1]: 5194722485643852853 offsetToNextHeader:        104
2024-07-16 10:44:38,445 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:FWVB         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:    6760 Data[0]: 4743997951091160959 Data[-1]: 5540117011473392085 offsetToNextHeader:       6928
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:FWWU         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      20 Data[0]: 5140753672436942021 Data[-1]: 5140753672436942021 offsetToNextHeader:       7012
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:KLAP         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      60 Data[0]: 5110715607374589471 Data[-1]: 4656308032396859575 offsetToNextHeader:       7136
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:KNOT         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:   10340 Data[0]: 5669301360686511351 Data[-1]: 4810663080415972317 offsetToNextHeader:      17540
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:LFKT         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:     100 Data[0]: 5064934915538061082 Data[-1]: 4815010784226549980 offsetToNextHeader:      17704
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:PGRP         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      40 Data[0]: 4924988159454251099 Data[-1]: 5689949046976227756 offsetToNextHeader:      17808
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:PGRP_PUMP    AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      40 Data[0]: 5449689922198529163 Data[-1]: 4777677682321125698 offsetToNextHeader:      17912
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:PHI1         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      20 Data[0]: 4795605652164104970 Data[-1]: 4795605652164104970 offsetToNextHeader:      17996
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:PUMD         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      20 Data[0]: 5575442119913345553 Data[-1]: 5575442119913345553 offsetToNextHeader:      18080
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:PUMP         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      40 Data[0]: 5374020919990423089 Data[-1]: 5661833458038115239 offsetToNextHeader:      18184
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:PVAR         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      20 Data[0]: 5438965112471488959 Data[-1]: 5438965112471488959 offsetToNextHeader:      18268
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:QVAR         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      20 Data[0]: 4889489277290470657 Data[-1]: 4889489277290470657 offsetToNextHeader:      18352
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RART         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      60 Data[0]: 4735990821453247725 Data[-1]: 4883847250750209571 offsetToNextHeader:      18476
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RCPL         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      40 Data[0]: 5701755289383128141 Data[-1]: 4970721174998057339 offsetToNextHeader:      18580
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RCPL_ROWT    AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      60 Data[0]: 5709360699900284634 Data[-1]: 5147223745519470693 offsetToNextHeader:      18704
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RDIV         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      20 Data[0]: 5105729699655079411 Data[-1]: 5105729699655079411 offsetToNextHeader:      18788
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RFKT         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      60 Data[0]: 4836221118111466566 Data[-1]: 4749235746818978528 offsetToNextHeader:      18912
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RLVG         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      40 Data[0]: 5482891284237998767 Data[-1]: 5238909283782593579 offsetToNextHeader:      19016
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RMES         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:      80 Data[0]: 4899351962406121892 Data[-1]: 5255082225302217802 offsetToNextHeader:      19160
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:ROHR         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:   10480 Data[0]: 5442010239090746007 Data[-1]: 5373158549695106826 offsetToNextHeader:      29704
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:ROHR         AttrType:N_OF_POINTS  DataType:INT4 DataTypeLength:  4 DataLength:    2096 Data[0]:                   2 Data[-1]:                   2 offsetToNextHeader:      31864
2024-07-16 10:44:38,446 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RSLW         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:     100 Data[0]: 4764083785981173370 Data[-1]: 5361452811584248834 offsetToNextHeader:      32028
2024-07-16 10:44:38,449 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:RSTN         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:     160 Data[0]: 5003482158126479748 Data[-1]: 5484778231675052218 offsetToNextHeader:      32252
2024-07-16 10:44:38,449 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:SWVT         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:     140 Data[0]: 4992107583335560923 Data[-1]: 5397454124790914683 offsetToNextHeader:      32456
2024-07-16 10:44:38,449 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:TEVT         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      40 Data[0]: 5420151349188164622 Data[-1]: 5395645951786400348 offsetToNextHeader:      32560
2024-07-16 10:44:38,449 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:VENT         AttrType:tk           DataType:CHAR DataTypeLength: 20 DataLength:     240 Data[0]: 5078909058477631059 Data[-1]: 4817917631249014225 offsetToNextHeader:      32864
2024-07-16 10:44:38,449 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:WBLZ         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      20 Data[0]: 5747928298316755683 Data[-1]: 5747928298316755683 offsetToNextHeader:      32948
2024-07-16 10:44:38,449 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: ObjType:WEVT         AttrType:pk           DataType:CHAR DataTypeLength: 20 DataLength:      20 Data[0]: 5719241802175841970 Data[-1]: 5719241802175841970 offsetToNextHeader:      33032
2024-07-16 10:44:38,451 ; PT3S                                                         ; DEBUG   ; Mx._parseMx2: _Done.
2024-07-16 10:44:38,451 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtString: Start.
2024-07-16 10:44:38,454 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtString: Bytes per MX-Record=155140. Bytes Unpacked=155140 (making up 100.00 Bytes-%).
2024-07-16 10:44:38,454 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtString: mx1Df after generated Column: Shape: (494, 28).
2024-07-16 10:44:38,454 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtString: _Done.
2024-07-16 10:44:38,454 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: Start.
2024-07-16 10:44:38,454 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: idxTIMESTAMP=0 (idx in MX1) unpackIdxTIMESTAMP=0 (idx in recordData).
2024-07-16 10:44:38,454 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: idxSNAPSHOTTYPE=1 (idx in MX1) unpackIdxSNAPSHOTTYPE=1 (idx in recordData).
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: NOfColumns (without TIMESTAMP): 329.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: NOfColumnsVecs: 164.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: idxUnpackNonVectorChannelsLen: 329.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: idxUnpackVectorChannelsLen: 164.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: idxOfNonVectorChannels: Len: 329.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: idxOfVectorChannels:    Len: 164.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._buildMxRecordStructUnpackFmtStringPost: _Done.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._initWithMx1: _Done.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx.__init__: mxsFile c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MXS exists _and is newer than mx1File c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MX1 _and NoMxsRead False:
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx.__init__: The mxsFile is read.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Start.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Mxs: Implicit specified.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._handleMxsVecsFileDeletion: Start.
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._handleMxsVecsFileDeletion: Delete H5Dump because Mxs c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MXS To Read is newer than H5Dump c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.vec.h5 ...
2024-07-16 10:44:38,468 ; PT3S                                                         ; DEBUG   ; Mx._handleMxsVecsFileDeletion: _Done.
2024-07-16 10:44:38,484 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Mxs: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MXS opening ...
2024-07-16 10:44:38,484 ; PT3S                                                         ; INFO    ; Mx.setResultsToMxsFile: Mxs: ..\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MXS reading ...
2024-07-16 10:44:38,484 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: Start.
2024-07-16 10:44:38,489 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,489 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: CVERSO: SIR 3S 90-14-02-10 3S Consult, 30827 Garbsen - 16.07.2024 10:44 - M-1-0-1       .
2024-07-16 10:44:38,500 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,501 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: Start.
2024-07-16 10:44:38,508 ; PT3S                                                         ; DEBUG   ; Mx.unPackMxsVecsFileDataDf: Start.
2024-07-16 10:44:38,609 ; PT3S                                                         ; DEBUG   ; Mx.unPackMxsVecsFileDataDf: _Done.
2024-07-16 10:44:38,631 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: cSNAPSHOTTYPE STAT     processed to (empty) dfVecAggs with TIMESTAMPL: 2023-02-12 23:00:00+00:00
2024-07-16 10:44:38,631 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: _Done.
2024-07-16 10:44:38,633 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      1 read and processed finally=2023-02-12 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: STAT. - H5Dump: YES: key=/                   0 not in keys.
2024-07-16 10:44:38,633 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,641 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,661 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: Start.
2024-07-16 10:44:38,677 ; PT3S                                                         ; DEBUG   ; Mx.unPackMxsVecsFileDataDf: Start.
2024-07-16 10:44:38,796 ; PT3S                                                         ; DEBUG   ; Mx.unPackMxsVecsFileDataDf: _Done.
2024-07-16 10:44:38,845 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: cSNAPSHOTTYPE TIME     processed to         dfVecAggs with TIMESTAMPL: 2023-02-12 23:00:00+00:00
2024-07-16 10:44:38,845 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: _Done.
2024-07-16 10:44:38,848 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      2 read and processed finally=2023-02-12 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/                   0 not in keys - Nr.      1.
2024-07-16 10:44:38,848 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,853 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,853 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      3 read and processed finally=2023-02-13 00:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/             3600000 not in keys.
2024-07-16 10:44:38,853 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,858 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,865 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      4 read and processed finally=2023-02-13 01:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/             7200000 not in keys.
2024-07-16 10:44:38,866 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,875 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,875 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      5 read and processed finally=2023-02-13 02:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            10800000 not in keys.
2024-07-16 10:44:38,875 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,884 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,886 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      6 read and processed finally=2023-02-13 03:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            14400000 not in keys.
2024-07-16 10:44:38,886 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,886 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,886 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      7 read and processed finally=2023-02-13 04:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            18000000 not in keys.
2024-07-16 10:44:38,886 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,886 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,886 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      8 read and processed finally=2023-02-13 05:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            21600000 not in keys.
2024-07-16 10:44:38,886 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,904 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,904 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.      9 read and processed finally=2023-02-13 06:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            25200000 not in keys.
2024-07-16 10:44:38,904 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,907 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,907 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     10 read and processed finally=2023-02-13 07:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            28800000 not in keys.
2024-07-16 10:44:38,907 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,917 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,918 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     11 read and processed finally=2023-02-13 08:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            32400000 not in keys.
2024-07-16 10:44:38,918 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,921 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,921 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     12 read and processed finally=2023-02-13 09:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            36000000 not in keys.
2024-07-16 10:44:38,921 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,921 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,921 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     13 read and processed finally=2023-02-13 10:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            39600000 not in keys.
2024-07-16 10:44:38,921 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,933 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,935 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     14 read and processed finally=2023-02-13 11:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            43200000 not in keys.
2024-07-16 10:44:38,935 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,937 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,937 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     15 read and processed finally=2023-02-13 12:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            46800000 not in keys.
2024-07-16 10:44:38,937 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,937 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,937 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     16 read and processed finally=2023-02-13 13:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            50400000 not in keys.
2024-07-16 10:44:38,937 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,950 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,953 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     17 read and processed finally=2023-02-13 14:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            54000000 not in keys.
2024-07-16 10:44:38,953 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,957 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,957 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     18 read and processed finally=2023-02-13 15:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            57600000 not in keys.
2024-07-16 10:44:38,957 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,960 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,960 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     19 read and processed finally=2023-02-13 16:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            61200000 not in keys.
2024-07-16 10:44:38,960 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,971 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,971 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     20 read and processed finally=2023-02-13 17:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            64800000 not in keys.
2024-07-16 10:44:38,971 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,971 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,971 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     21 read and processed finally=2023-02-13 18:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            68400000 not in keys.
2024-07-16 10:44:38,971 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,971 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,971 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     22 read and processed finally=2023-02-13 19:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            72000000 not in keys.
2024-07-16 10:44:38,983 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     23 read and processed finally=2023-02-13 20:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            75600000 not in keys.
2024-07-16 10:44:38,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:38,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:38,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     24 read and processed finally=2023-02-13 21:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            79200000 not in keys.
2024-07-16 10:44:38,986 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:39,000 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:39,000 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     25 read and processed finally=2023-02-13 22:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            82800000 not in keys.
2024-07-16 10:44:39,000 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:39,006 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:39,006 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     26 read and processed finally=2023-02-13 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TIME. - H5Dump: YES: key=/            86400000 not in keys.
2024-07-16 10:44:39,006 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:39,012 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:39,012 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: Start.
2024-07-16 10:44:39,023 ; PT3S                                                         ; DEBUG   ; Mx.unPackMxsVecsFileDataDf: Start.
2024-07-16 10:44:39,119 ; PT3S                                                         ; DEBUG   ; Mx.unPackMxsVecsFileDataDf: _Done.
2024-07-16 10:44:39,151 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: cSNAPSHOTTYPE TMIN     processed to         dfVecAggs with TIMESTAMPL: 2023-02-12 23:00:00+00:00
2024-07-16 10:44:39,151 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: _Done.
2024-07-16 10:44:39,151 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     27 read and processed finally=2023-02-13 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TMIN. - H5Dump: YES: key=/            86400000 not in keys.
2024-07-16 10:44:39,151 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: Start.
2024-07-16 10:44:39,159 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFileSingleRecord: _Done.
2024-07-16 10:44:39,159 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: Start.
2024-07-16 10:44:39,167 ; PT3S                                                         ; DEBUG   ; Mx.unPackMxsVecsFileDataDf: Start.
2024-07-16 10:44:39,259 ; PT3S                                                         ; DEBUG   ; Mx.unPackMxsVecsFileDataDf: _Done.
2024-07-16 10:44:39,296 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: cSNAPSHOTTYPE TMAX     processed to         dfVecAggs with TIMESTAMPL: 2023-02-12 23:00:00+00:00
2024-07-16 10:44:39,296 ; PT3S                                                         ; DEBUG   ; Mx._processToDfVecAggs: _Done.
2024-07-16 10:44:39,296 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: TimeNr.     28 read and processed finally=2023-02-13 23:00:00.000000+0000 Values (without TIMESTAMP): 329 - Actual SNAPSHOTTYPE: TMAX. - H5Dump: YES: key=/            86400000 not in keys.
2024-07-16 10:44:39,296 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: File finished: Records read=28. Last Time read=2023-02-13 23:00:00.000000+0000. MB read=0004.34.
2024-07-16 10:44:39,302 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: df.shape(): (28, 329).
2024-07-16 10:44:39,302 ; PT3S                                                         ; DEBUG   ; Mx._readMxsFile: _Done.
2024-07-16 10:44:39,302 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Mxs: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MXS: NOT unique TIMESTAMPS: Their dfMxs Shape: (3, 329).
2024-07-16 10:44:39,302 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: Mxs: c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MXS: Assigned.     df Shape: (25, 329).
2024-07-16 10:44:39,302 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: RESULT after c:\users\jablonski\3s\pt3s\Examples\WDWärmenetz-Planungsbeispiel\B1\V0\BZ1\M-1-0-1.1.MXS: df Shape: (25, 329) First Time: 2023-02-12 23:00:00+00:00 Last Time: 2023-02-13 23:00:00+00:00.
2024-07-16 10:44:39,319 ; PT3S                                                         ; DEBUG   ; Mx.setResultsToMxsFile: _Done.
2024-07-16 10:44:39,319 ; PT3S                                                         ; DEBUG   ; Mx.__init__: _Done.
2024-07-16 10:44:39,319 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: MX read ok so far.
2024-07-16 10:44:39,319 ; PT3S                                                         ; INFO    ; dxAndMxHelperFcts.readDxAndMx: ..\Examples\Wärmenetz-Planungsbeispiel-m.pkl exists and is deleted...
2024-07-16 10:44:39,324 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Start.
2024-07-16 10:44:39,324 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: Start.
2024-07-16 10:44:39,324 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: Anzeigen im Netz:
2024-07-16 10:44:39,324 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: Annotationen SP:
2024-07-16 10:44:39,324 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: Optimierungsgebiet:
2024-07-16 10:44:39,368 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: Optimierungsgebiet VL:
2024-07-16 10:44:39,385 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: FWVB GebMitte:
2024-07-16 10:44:39,418 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: VL Rohre:
2024-07-16 10:44:39,462 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: RL Rohre:
2024-07-16 10:44:39,484 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: PlanungsbeispielFWVB:
2024-07-16 10:44:39,541 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: LAYR: PlanungsbeispielGebaeude:
2024-07-16 10:44:39,911 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Layr: _Done.
2024-07-16 10:44:39,917 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Wblz: Start.
2024-07-16 10:44:39,921 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Wblz: WBLZ: WärmeblnzGes:
2024-07-16 10:44:39,921 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Wblz: no WBLZs available ...
2024-07-16 10:44:39,921 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Wblz: _Done.
2024-07-16 10:44:39,921 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Start.
2024-07-16 10:44:39,971 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt Nr: 1.0 Layer: 0
2024-07-16 10:44:40,010 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,010 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: V-E0 k:V-K1683S 
2024-07-16 10:44:40,010 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: V-K133S k:V-K143S 
2024-07-16 10:44:40,010 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: V-E0 > Ende: V-K143S
2024-07-16 10:44:40,020 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 2
2024-07-16 10:44:40,020 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: R-E0 k:R-K4163S 
2024-07-16 10:44:40,020 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: R-K2613S k:R-K2623S 
2024-07-16 10:44:40,020 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: R-E0 > Ende: R-K2623S
2024-07-16 10:44:40,020 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt Nr: 1.0 Layer: 1
2024-07-16 10:44:40,060 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,063 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: V-E0 k:V-K1683S 
2024-07-16 10:44:40,063 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: V-K133S k:V-K143S 
2024-07-16 10:44:40,064 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: V-E0 > Ende: V-K143S
2024-07-16 10:44:40,070 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt Nr: 1.0 Layer: 2
2024-07-16 10:44:40,099 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,102 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: R-E0 k:R-K4163S 
2024-07-16 10:44:40,102 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: R-K2613S k:R-K2623S 
2024-07-16 10:44:40,102 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: R-E0 > Ende: R-K2623S
2024-07-16 10:44:40,109 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt in mlc Nr: 2.0 Layer: 0
2024-07-16 10:44:40,151 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,154 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: V-E0 k:V-K1683S 
2024-07-16 10:44:40,154 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: V-K133S k:V-K143S 
2024-07-16 10:44:40,155 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: V-E0 > Ende: V-K143S
2024-07-16 10:44:40,159 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 2
2024-07-16 10:44:40,159 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: R-E0 k:R-K4163S 
2024-07-16 10:44:40,159 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: R-K2613S k:R-K2623S 
2024-07-16 10:44:40,162 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: R-E0 > Ende: R-K2623S
2024-07-16 10:44:40,169 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt in mlc Nr: 2.0 Layer: 1
2024-07-16 10:44:40,185 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,185 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: V-E0 k:V-K1683S 
2024-07-16 10:44:40,185 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: V-K133S k:V-K143S 
2024-07-16 10:44:40,198 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: V-E0 > Ende: V-K143S
2024-07-16 10:44:40,200 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt in mlc Nr: 2.0 Layer: 2
2024-07-16 10:44:40,233 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,233 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: R-E0 k:R-K4163S 
2024-07-16 10:44:40,233 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: R-K2613S k:R-K2623S 
2024-07-16 10:44:40,233 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: R-E0 > Ende: R-K2623S
2024-07-16 10:44:40,233 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt in bar,B Nr: 3.0 Layer: 0
2024-07-16 10:44:40,274 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,280 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: V-E0 k:V-K1683S 
2024-07-16 10:44:40,280 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: V-K133S k:V-K143S 
2024-07-16 10:44:40,283 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: V-E0 > Ende: V-K143S
2024-07-16 10:44:40,287 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 2
2024-07-16 10:44:40,289 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: R-E0 k:R-K4163S 
2024-07-16 10:44:40,289 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: R-K2613S k:R-K2623S 
2024-07-16 10:44:40,290 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: R-E0 > Ende: R-K2623S
2024-07-16 10:44:40,296 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt in bar,B Nr: 3.0 Layer: 1
2024-07-16 10:44:40,331 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,334 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: V-E0 k:V-K1683S 
2024-07-16 10:44:40,335 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: V-K133S k:V-K143S 
2024-07-16 10:44:40,337 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: V-E0 > Ende: V-K143S
2024-07-16 10:44:40,340 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Schnitt: Längsschnitt in bar,B Nr: 3.0 Layer: 2
2024-07-16 10:44:40,378 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: CompNr.: 1
2024-07-16 10:44:40,378 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: First: i: R-E0 k:R-K4163S 
2024-07-16 10:44:40,378 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Last: i: R-K2613S k:R-K2623S 
2024-07-16 10:44:40,378 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: Pfad: Start: R-E0 > Ende: R-K2623S
2024-07-16 10:44:40,385 ; PT3S                                                         ; DEBUG   ; dxDecodeObjsData.Agsn: _Done.
2024-07-16 10:44:40,385 ; PT3S                                                         ; INFO    ; dxWithMx.__init__: Wärmenetz-Planungsbeispiel: processing dx and mx ...
2024-07-16 10:44:40,385 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Start.
2024-07-16 10:44:40,385 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: resType: KNOT ...
2024-07-16 10:44:40,400 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: resType: ROHR ...
2024-07-16 10:44:40,402 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: resType: FWVB ...
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: FWES: xkTypeMx: tk
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Exception: Line: 1244: <class 'AttributeError'>: 'numpy.ndarray' object has no attribute 'values': mx2Idx for FWES failed. mx2Idx = -1.
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: FWVB: xkTypeMx: tk
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Exception: Line: 1244: <class 'AttributeError'>: 'numpy.ndarray' object has no attribute 'values': mx2Idx for FWVB failed. mx2Idx = -1.
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: KLAP: xkTypeMx: tk
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Exception: Line: 1244: <class 'AttributeError'>: 'numpy.ndarray' object has no attribute 'values': mx2Idx for KLAP failed. mx2Idx = -1.
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: PGRP: xkTypeMx: tk
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Exception: Line: 1244: <class 'AttributeError'>: 'numpy.ndarray' object has no attribute 'values': mx2Idx for PGRP failed. mx2Idx = -1.
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: PUMP: xkTypeMx: tk
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Exception: Line: 1244: <class 'AttributeError'>: 'numpy.ndarray' object has no attribute 'values': mx2Idx for PUMP failed. mx2Idx = -1.
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: ROHR: xkTypeMx: tk
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Exception: Line: 1244: <class 'AttributeError'>: 'numpy.ndarray' object has no attribute 'values': mx2Idx for ROHR failed. mx2Idx = -1.
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: VENT: xkTypeMx: tk
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: Exception: Line: 1244: <class 'AttributeError'>: 'numpy.ndarray' object has no attribute 'values': mx2Idx for VENT failed. mx2Idx = -1.
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: _Done.
2024-07-16 10:44:40,418 ; PT3S                                                         ; DEBUG   ; Dx.MxSync: _Done.
2024-07-16 10:44:40,434 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: Start.
2024-07-16 10:44:40,434 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: Start.
2024-07-16 10:44:40,434 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: Sir3sIDsMatching for ^KNOT: ['KNOT~*~*~*~BCIND', 'KNOT~*~*~*~DP', 'KNOT~*~*~*~DPH', 'KNOT~*~*~*~H', 'KNOT~*~*~*~HMAX_INST', 'KNOT~*~*~*~HMIN_INST', 'KNOT~*~*~*~IAKTIV', 'KNOT~*~*~*~LFAKTAKT', 'KNOT~*~*~*~P', 'KNOT~*~*~*~PDAMPF', 'KNOT~*~*~*~PH', 'KNOT~*~*~*~PHMINMAXDIF', 'KNOT~*~*~*~PH_EIN', 'KNOT~*~*~*~PH_MIN', 'KNOT~*~*~*~PMAX_INST', 'KNOT~*~*~*~PMIN_INST', 'KNOT~*~*~*~QM', 'KNOT~*~*~*~RHO', 'KNOT~*~*~*~T', 'KNOT~*~*~*~TTR', 'KNOT~*~*~*~VOLD']
2024-07-16 10:44:40,438 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: _Done.
2024-07-16 10:44:40,452 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: Start.
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: Sir3sIDsMatching for ^ROHR~: ['ROHR~*~*~*~A', 'ROHR~*~*~*~DTTR', 'ROHR~*~*~*~DWVERL', 'ROHR~*~*~*~DWVERLABS', 'ROHR~*~*~*~IAKTIV', 'ROHR~*~*~*~IRTRENN', 'ROHR~*~*~*~JV', 'ROHR~*~*~*~MVEC', 'ROHR~*~*~*~PDAMPF', 'ROHR~*~*~*~PHR', 'ROHR~*~*~*~PMIN', 'ROHR~*~*~*~PVEC', 'ROHR~*~*~*~PVECMAX_INST', 'ROHR~*~*~*~PVECMIN_INST', 'ROHR~*~*~*~QMAV', 'ROHR~*~*~*~QMI', 'ROHR~*~*~*~QMK', 'ROHR~*~*~*~RHOI', 'ROHR~*~*~*~RHOK', 'ROHR~*~*~*~RHOVEC', 'ROHR~*~*~*~SVEC', 'ROHR~*~*~*~TI', 'ROHR~*~*~*~TK', 'ROHR~*~*~*~TTRVEC', 'ROHR~*~*~*~TVEC', 'ROHR~*~*~*~VAV', 'ROHR~*~*~*~VI', 'ROHR~*~*~*~VK', 'ROHR~*~*~*~VOLDA', 'ROHR~*~*~*~WVL', 'ROHR~*~*~*~ZVEC']
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~MVEC eliminiert
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~PVEC eliminiert
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~PVECMAX_INST eliminiert
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~PVECMIN_INST eliminiert
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~RHOVEC eliminiert
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~SVEC eliminiert
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~TTRVEC eliminiert
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~TVEC eliminiert
2024-07-16 10:44:40,454 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: : Innenpunktkanal: ROHR~*~*~*~ZVEC eliminiert
2024-07-16 10:44:40,460 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: _Done.
2024-07-16 10:44:40,467 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: Start.
2024-07-16 10:44:40,471 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: Sir3sIDsMatching for ^FWVB: ['FWVB~*~*~*~DH', 'FWVB~*~*~*~DP', 'FWVB~*~*~*~DPH', 'FWVB~*~*~*~IAKTIV', 'FWVB~*~*~*~INDUV', 'FWVB~*~*~*~LFH', 'FWVB~*~*~*~LFT', 'FWVB~*~*~*~M', 'FWVB~*~*~*~PHIRL', 'FWVB~*~*~*~PHIVL', 'FWVB~*~*~*~QM', 'FWVB~*~*~*~RHOI', 'FWVB~*~*~*~RHOK', 'FWVB~*~*~*~TI', 'FWVB~*~*~*~TK', 'FWVB~*~*~*~TVMIN', 'FWVB~*~*~*~W', 'FWVB~*~*~*~WSOLL']
2024-07-16 10:44:40,471 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: _Done.
2024-07-16 10:44:40,497 ; PT3S                                                         ; DEBUG   ; Dx.MxAdd: _Done.
2024-07-16 10:44:40,510 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHR['QMAVAbs'] ok so far.
2024-07-16 10:44:40,521 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHR['VAVAbs'] ok so far.
2024-07-16 10:44:40,536 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHR['PHRAbs'] ok so far.
2024-07-16 10:44:40,552 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_ROHR['JVAbs'] ok so far.
2024-07-16 10:44:40,552 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_FWVB['W'] ok so far.
2024-07-16 10:44:40,552 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_FWVB['QM'] ok so far.
2024-07-16 10:44:40,552 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_FWVB['TI'] ok so far.
2024-07-16 10:44:40,552 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of V3_FWVB['TK'] ok so far.
2024-07-16 10:44:40,552 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: Start.
2024-07-16 10:44:40,552 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: Sir3sIDsMatching for ^WBLZ~\*~\*~\*~: ['WBLZ~*~*~*~WES', 'WBLZ~*~*~*~WRAND', 'WBLZ~*~*~*~WSPEI', 'WBLZ~*~*~*~WVB', 'WBLZ~*~*~*~WVERL']
2024-07-16 10:44:40,559 ; PT3S                                                         ; DEBUG   ; Mx.getVecAggsResultsForObjectType: _Done.
2024-07-16 10:44:40,559 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Adding MX-Results to V3_WBLZ ok so far.
2024-07-16 10:44:40,559 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: crs reading successful:  EPSG:25832
2024-07-16 10:44:40,603 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing of gdf_FWVB and gdf_ROHR ok so far.
2024-07-16 10:44:40,889 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing NetworkX Graph G ok so far.
2024-07-16 10:44:40,890 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing NetworkX Graph G nodeposDctNx ok so far.
2024-07-16 10:44:40,917 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: Constructing NetworkX Graph GSig ok so far.
2024-07-16 10:44:40,917 ; PT3S                                                         ; DEBUG   ; dxWithMx.__init__: _Done.
2024-07-16 10:44:40,917 ; PT3S                                                         ; DEBUG   ; dxAndMxHelperFcts.readDxAndMx: _Done.
2024-07-16 10:44:41,217 ; matplotlib                                                   ; DEBUG   ; matplotlib data path: C:\Users\jablonski\AppData\Local\anaconda3\Lib\site-packages\matplotlib\mpl-data
2024-07-16 10:44:41,226 ; matplotlib                                                   ; DEBUG   ; CONFIGDIR=C:\Users\jablonski\.matplotlib
2024-07-16 10:44:41,228 ; matplotlib                                                   ; DEBUG   ; interactive is False
2024-07-16 10:44:41,228 ; matplotlib                                                   ; DEBUG   ; platform is win32
2024-07-16 10:44:41,337 ; matplotlib                                                   ; DEBUG   ; CACHEDIR=C:\Users\jablonski\.matplotlib
2024-07-16 10:44:41,342 ; matplotlib.font_manager                                      ; DEBUG   ; Using fontManager instance from C:\Users\jablonski\.matplotlib\fontlist-v330.json
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=583)
           2	RESUME(arg=0, lineno=583)
           4	LOAD_GLOBAL(arg=1, lineno=600)
          16	LOAD_FAST(arg=0, lineno=600)
          18	PRECALL(arg=1, lineno=600)
          22	CALL(arg=1, lineno=600)
          32	STORE_FAST(arg=2, lineno=600)
          34	LOAD_GLOBAL(arg=3, lineno=601)
          46	LOAD_ATTR(arg=2, lineno=601)
          56	LOAD_FAST(arg=2, lineno=601)
          58	LOAD_CONST(arg=1, lineno=601)
          60	BINARY_OP(arg=0, lineno=601)
          64	LOAD_FAST(arg=1, lineno=601)
          66	LOAD_CONST(arg=1, lineno=601)
          68	BINARY_OP(arg=0, lineno=601)
          72	BUILD_TUPLE(arg=2, lineno=601)
          74	LOAD_GLOBAL(arg=2, lineno=601)
          86	LOAD_ATTR(arg=3, lineno=601)
          96	KW_NAMES(arg=2, lineno=601)
          98	PRECALL(arg=2, lineno=601)
         102	CALL(arg=2, lineno=601)
         112	STORE_FAST(arg=3, lineno=601)
         114	LOAD_GLOBAL(arg=3, lineno=602)
         126	LOAD_ATTR(arg=2, lineno=602)
         136	LOAD_FAST(arg=2, lineno=602)
         138	LOAD_CONST(arg=1, lineno=602)
         140	BINARY_OP(arg=0, lineno=602)
         144	LOAD_FAST(arg=1, lineno=602)
         146	LOAD_CONST(arg=1, lineno=602)
         148	BINARY_OP(arg=0, lineno=602)
         152	BUILD_TUPLE(arg=2, lineno=602)
         154	LOAD_GLOBAL(arg=2, lineno=602)
         166	LOAD_ATTR(arg=4, lineno=602)
         176	KW_NAMES(arg=2, lineno=602)
         178	PRECALL(arg=2, lineno=602)
         182	CALL(arg=2, lineno=602)
         192	STORE_FAST(arg=4, lineno=602)
         194	LOAD_CONST(arg=1, lineno=603)
         196	LOAD_FAST(arg=3, lineno=603)
         198	LOAD_CONST(arg=1, lineno=603)
         200	LOAD_CONST(arg=1, lineno=603)
         202	LOAD_CONST(arg=3, lineno=603)
         204	BUILD_SLICE(arg=2, lineno=603)
         206	BUILD_TUPLE(arg=2, lineno=603)
         208	STORE_SUBSCR(arg=None, lineno=603)
         212	LOAD_GLOBAL(arg=2, lineno=604)
         224	LOAD_ATTR(arg=5, lineno=604)
         234	LOAD_FAST(arg=4, lineno=604)
         236	LOAD_CONST(arg=4, lineno=604)
         238	LOAD_CONST(arg=3, lineno=604)
         240	BUILD_SLICE(arg=2, lineno=604)
         242	LOAD_CONST(arg=1, lineno=604)
         244	LOAD_CONST(arg=3, lineno=604)
         246	BUILD_SLICE(arg=2, lineno=604)
         248	BUILD_TUPLE(arg=2, lineno=604)
         250	STORE_SUBSCR(arg=None, lineno=604)
         254	LOAD_GLOBAL(arg=3, lineno=606)
         266	LOAD_ATTR(arg=4, lineno=606)
         276	LOAD_CONST(arg=5, lineno=606)
         278	PRECALL(arg=1, lineno=606)
         282	CALL(arg=1, lineno=606)
         292	STORE_FAST(arg=5, lineno=606)
         294	LOAD_GLOBAL(arg=13, lineno=607)
         306	LOAD_CONST(arg=4, lineno=607)
         308	LOAD_GLOBAL(arg=1, lineno=607)
         320	LOAD_FAST(arg=0, lineno=607)
         322	PRECALL(arg=1, lineno=607)
         326	CALL(arg=1, lineno=607)
         336	LOAD_CONST(arg=1, lineno=607)
         338	BINARY_OP(arg=0, lineno=607)
         342	PRECALL(arg=2, lineno=607)
         346	CALL(arg=2, lineno=607)
         356	GET_ITER(arg=None, lineno=607)
>        358	NOP(arg=1, lineno=607)
         360	FOR_ITER(arg=272, lineno=607)
         362	STORE_FAST(arg=6, lineno=607)
         364	LOAD_GLOBAL(arg=3, lineno=608)
         376	LOAD_ATTR(arg=4, lineno=608)
         386	LOAD_CONST(arg=5, lineno=608)
         388	PRECALL(arg=1, lineno=608)
         392	CALL(arg=1, lineno=608)
         402	STORE_FAST(arg=7, lineno=608)
         404	LOAD_GLOBAL(arg=3, lineno=609)
         416	LOAD_ATTR(arg=4, lineno=609)
         426	LOAD_CONST(arg=5, lineno=609)
         428	PRECALL(arg=1, lineno=609)
         432	CALL(arg=1, lineno=609)
         442	STORE_FAST(arg=8, lineno=609)
         444	LOAD_GLOBAL(arg=3, lineno=610)
         456	LOAD_ATTR(arg=4, lineno=610)
         466	LOAD_CONST(arg=5, lineno=610)
         468	PRECALL(arg=1, lineno=610)
         472	CALL(arg=1, lineno=610)
         482	STORE_FAST(arg=9, lineno=610)
         484	LOAD_GLOBAL(arg=13, lineno=611)
         496	LOAD_CONST(arg=1, lineno=611)
         498	LOAD_FAST(arg=6, lineno=611)
         500	LOAD_CONST(arg=1, lineno=611)
         502	BINARY_OP(arg=0, lineno=611)
         506	PRECALL(arg=2, lineno=611)
         510	CALL(arg=2, lineno=611)
         520	GET_ITER(arg=None, lineno=611)
>        522	FOR_ITER(arg=175, lineno=611)
         524	STORE_FAST(arg=10, lineno=611)
         526	LOAD_FAST(arg=6, lineno=612)
         528	LOAD_FAST(arg=10, lineno=612)
         530	BINARY_OP(arg=10, lineno=612)
         534	LOAD_CONST(arg=1, lineno=612)
         536	BINARY_OP(arg=0, lineno=612)
         540	STORE_FAST(arg=11, lineno=612)
         542	LOAD_GLOBAL(arg=3, lineno=613)
         554	LOAD_ATTR(arg=4, lineno=613)
         564	LOAD_FAST(arg=0, lineno=613)
         566	LOAD_FAST(arg=11, lineno=613)
         568	LOAD_CONST(arg=1, lineno=613)
         570	BINARY_OP(arg=10, lineno=613)
         574	BINARY_SUBSCR(arg=None, lineno=613)
         584	PRECALL(arg=1, lineno=613)
         588	CALL(arg=1, lineno=613)
         598	STORE_FAST(arg=12, lineno=613)
         600	LOAD_FAST(arg=8, lineno=614)
         602	LOAD_FAST(arg=12, lineno=614)
         604	LOAD_FAST(arg=12, lineno=614)
         606	BINARY_OP(arg=5, lineno=614)
         610	BINARY_OP(arg=13, lineno=614)
         614	STORE_FAST(arg=8, lineno=614)
         616	LOAD_FAST(arg=7, lineno=615)
         618	LOAD_FAST(arg=12, lineno=615)
         620	BINARY_OP(arg=13, lineno=615)
         624	STORE_FAST(arg=7, lineno=615)
         626	LOAD_FAST(arg=9, lineno=616)
         628	LOAD_GLOBAL(arg=3, lineno=616)
         640	LOAD_ATTR(arg=4, lineno=616)
         650	LOAD_CONST(arg=1, lineno=616)
         652	PRECALL(arg=1, lineno=616)
         656	CALL(arg=1, lineno=616)
         666	BINARY_OP(arg=13, lineno=616)
         670	STORE_FAST(arg=9, lineno=616)
         672	LOAD_FAST(arg=8, lineno=617)
         674	LOAD_FAST(arg=7, lineno=617)
         676	LOAD_FAST(arg=7, lineno=617)
         678	BINARY_OP(arg=5, lineno=617)
         682	LOAD_FAST(arg=9, lineno=617)
         684	BINARY_OP(arg=11, lineno=617)
         688	BINARY_OP(arg=10, lineno=617)
         692	STORE_FAST(arg=5, lineno=617)
         694	LOAD_FAST(arg=11, lineno=618)
         696	LOAD_CONST(arg=1, lineno=618)
         698	BINARY_OP(arg=10, lineno=618)
         702	STORE_FAST(arg=13, lineno=618)
         704	LOAD_FAST(arg=13, lineno=619)
         706	LOAD_CONST(arg=5, lineno=619)
         708	COMPARE_OP(arg=3, lineno=619)
         714	POP_JUMP_FORWARD_IF_FALSE(arg=78, lineno=619)
         716	LOAD_GLOBAL(arg=13, lineno=620)
         728	LOAD_CONST(arg=4, lineno=620)
         730	LOAD_FAST(arg=1, lineno=620)
         732	LOAD_CONST(arg=1, lineno=620)
         734	BINARY_OP(arg=0, lineno=620)
         738	PRECALL(arg=2, lineno=620)
         742	CALL(arg=2, lineno=620)
         752	GET_ITER(arg=None, lineno=620)
>        754	FOR_ITER(arg=58, lineno=620)
         756	STORE_FAST(arg=14, lineno=620)
         758	LOAD_FAST(arg=4, lineno=621)
         760	LOAD_FAST(arg=6, lineno=621)
         762	LOAD_FAST(arg=14, lineno=621)
         764	BUILD_TUPLE(arg=2, lineno=621)
         766	BINARY_SUBSCR(arg=None, lineno=621)
         776	LOAD_FAST(arg=5, lineno=621)
         778	LOAD_FAST(arg=4, lineno=621)
         780	LOAD_FAST(arg=13, lineno=621)
         782	LOAD_FAST(arg=14, lineno=621)
         784	LOAD_CONST(arg=1, lineno=621)
         786	BINARY_OP(arg=10, lineno=621)
         790	BUILD_TUPLE(arg=2, lineno=621)
         792	BINARY_SUBSCR(arg=None, lineno=621)
         802	BINARY_OP(arg=0, lineno=621)
         806	COMPARE_OP(arg=5, lineno=621)
         812	POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=621)
         814	LOAD_FAST(arg=11, lineno=622)
         816	LOAD_FAST(arg=3, lineno=622)
         818	LOAD_FAST(arg=6, lineno=622)
         820	LOAD_FAST(arg=14, lineno=622)
         822	BUILD_TUPLE(arg=2, lineno=622)
         824	STORE_SUBSCR(arg=None, lineno=622)
         828	LOAD_FAST(arg=5, lineno=623)
         830	LOAD_FAST(arg=4, lineno=623)
         832	LOAD_FAST(arg=13, lineno=623)
         834	LOAD_FAST(arg=14, lineno=623)
         836	LOAD_CONST(arg=1, lineno=623)
         838	BINARY_OP(arg=10, lineno=623)
         842	BUILD_TUPLE(arg=2, lineno=623)
         844	BINARY_SUBSCR(arg=None, lineno=623)
         854	BINARY_OP(arg=0, lineno=623)
         858	LOAD_FAST(arg=4, lineno=623)
         860	LOAD_FAST(arg=6, lineno=623)
         862	LOAD_FAST(arg=14, lineno=623)
         864	BUILD_TUPLE(arg=2, lineno=623)
         866	STORE_SUBSCR(arg=None, lineno=623)
>        870	JUMP_BACKWARD(arg=59, lineno=623)
>        872	JUMP_BACKWARD(arg=176, lineno=623)
>        874	LOAD_CONST(arg=1, lineno=624)
         876	LOAD_FAST(arg=3, lineno=624)
         878	LOAD_FAST(arg=6, lineno=624)
         880	LOAD_CONST(arg=1, lineno=624)
         882	BUILD_TUPLE(arg=2, lineno=624)
         884	STORE_SUBSCR(arg=None, lineno=624)
         888	LOAD_FAST(arg=5, lineno=625)
         890	LOAD_FAST(arg=4, lineno=625)
         892	LOAD_FAST(arg=6, lineno=625)
         894	LOAD_CONST(arg=1, lineno=625)
         896	BUILD_TUPLE(arg=2, lineno=625)
         898	STORE_SUBSCR(arg=None, lineno=625)
         902	NOP(arg=1, lineno=625)
         904	JUMP_BACKWARD(arg=274, lineno=625)
>        906	LOAD_GLOBAL(arg=1, lineno=627)
         918	LOAD_FAST(arg=0, lineno=627)
         920	PRECALL(arg=1, lineno=627)
         924	CALL(arg=1, lineno=627)
         934	STORE_FAST(arg=15, lineno=627)
         936	LOAD_GLOBAL(arg=3, lineno=629)
         948	LOAD_ATTR(arg=2, lineno=629)
         958	LOAD_FAST(arg=1, lineno=629)
         960	LOAD_CONST(arg=1, lineno=629)
         962	BINARY_OP(arg=0, lineno=629)
         966	LOAD_FAST(arg=0, lineno=629)
         968	LOAD_ATTR(arg=7, lineno=629)
         978	KW_NAMES(arg=2, lineno=629)
         980	PRECALL(arg=2, lineno=629)
         984	CALL(arg=2, lineno=629)
         994	STORE_FAST(arg=16, lineno=629)
         996	LOAD_FAST(arg=0, lineno=630)
         998	LOAD_GLOBAL(arg=1, lineno=630)
        1010	LOAD_FAST(arg=0, lineno=630)
        1012	PRECALL(arg=1, lineno=630)
        1016	CALL(arg=1, lineno=630)
        1026	LOAD_CONST(arg=1, lineno=630)
        1028	BINARY_OP(arg=10, lineno=630)
        1032	BINARY_SUBSCR(arg=None, lineno=630)
        1042	LOAD_FAST(arg=16, lineno=630)
        1044	LOAD_FAST(arg=1, lineno=630)
        1046	STORE_SUBSCR(arg=None, lineno=630)
        1050	LOAD_FAST(arg=0, lineno=631)
        1052	LOAD_CONST(arg=5, lineno=631)
        1054	BINARY_SUBSCR(arg=None, lineno=631)
        1064	LOAD_FAST(arg=16, lineno=631)
        1066	LOAD_CONST(arg=5, lineno=631)
        1068	STORE_SUBSCR(arg=None, lineno=631)
        1072	LOAD_GLOBAL(arg=13, lineno=632)
        1084	LOAD_FAST(arg=1, lineno=632)
        1086	LOAD_CONST(arg=1, lineno=632)
        1088	LOAD_CONST(arg=6, lineno=632)
        1090	PRECALL(arg=3, lineno=632)
        1094	CALL(arg=3, lineno=632)
        1104	GET_ITER(arg=None, lineno=632)
>       1106	FOR_ITER(arg=62, lineno=632)
        1108	STORE_FAST(arg=17, lineno=632)
        1110	LOAD_FAST(arg=3, lineno=633)
        1112	LOAD_FAST(arg=15, lineno=633)
        1114	LOAD_FAST(arg=17, lineno=633)
        1116	BUILD_TUPLE(arg=2, lineno=633)
        1118	BINARY_SUBSCR(arg=None, lineno=633)
        1128	STORE_FAST(arg=18, lineno=633)
        1130	LOAD_GLOBAL(arg=17, lineno=634)
        1142	LOAD_FAST(arg=18, lineno=634)
        1144	LOAD_CONST(arg=4, lineno=634)
        1146	BINARY_OP(arg=10, lineno=634)
        1150	PRECALL(arg=1, lineno=634)
        1154	CALL(arg=1, lineno=634)
        1164	STORE_FAST(arg=19, lineno=634)
        1166	LOAD_FAST(arg=0, lineno=635)
        1168	LOAD_FAST(arg=19, lineno=635)
        1170	BINARY_SUBSCR(arg=None, lineno=635)
        1180	LOAD_FAST(arg=16, lineno=635)
        1182	LOAD_FAST(arg=17, lineno=635)
        1184	LOAD_CONST(arg=1, lineno=635)
        1186	BINARY_OP(arg=10, lineno=635)
        1190	STORE_SUBSCR(arg=None, lineno=635)
        1194	LOAD_GLOBAL(arg=17, lineno=636)
        1206	LOAD_FAST(arg=18, lineno=636)
        1208	LOAD_CONST(arg=1, lineno=636)
        1210	BINARY_OP(arg=10, lineno=636)
        1214	PRECALL(arg=1, lineno=636)
        1218	CALL(arg=1, lineno=636)
        1228	STORE_FAST(arg=15, lineno=636)
        1230	JUMP_BACKWARD(arg=63, lineno=636)
>       1232	LOAD_GLOBAL(arg=3, lineno=637)
        1244	LOAD_ATTR(arg=9, lineno=637)
        1254	LOAD_FAST(arg=16, lineno=637)
        1256	LOAD_CONST(arg=5, lineno=637)
        1258	PRECALL(arg=2, lineno=637)
        1262	CALL(arg=2, lineno=637)
        1272	RETURN_VALUE(arg=None, lineno=637)
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=583)
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=583)
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=600)
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,704 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=600)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=PRECALL(arg=1, lineno=600)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$values16.2']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=CALL(arg=1, lineno=600)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$values16.2']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=STORE_FAST(arg=2, lineno=600)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$22call.3']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=LOAD_ATTR(arg=2, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$34load_global.4']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$n_data56.7']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=60, inst=BINARY_OP(arg=0, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$n_data56.7', '$const58.8']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$binop_add60.9']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=66, inst=LOAD_CONST(arg=1, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$binop_add60.9', '$classes64.10']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=68, inst=BINARY_OP(arg=0, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$binop_add60.9', '$classes64.10', '$const66.11']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=BUILD_TUPLE(arg=2, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$binop_add60.9', '$binop_add68.12']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=74, inst=LOAD_GLOBAL(arg=2, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13', '$74load_global.14']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=96, inst=KW_NAMES(arg=2, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13', '$86load_attr.15']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=98, inst=PRECALL(arg=2, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13', '$86load_attr.15']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=102, inst=CALL(arg=2, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$34.5', '$46load_attr.6', '$72build_tuple.13', '$86load_attr.15']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=112, inst=STORE_FAST(arg=3, lineno=601)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$102call.16']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=114, inst=LOAD_GLOBAL(arg=3, lineno=602)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=126, inst=LOAD_ATTR(arg=2, lineno=602)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$114load_global.17']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=136, inst=LOAD_FAST(arg=2, lineno=602)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19']
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=138, inst=LOAD_CONST(arg=1, lineno=602)
2024-07-16 10:44:44,711 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$n_data136.20']
2024-07-16 10:44:44,716 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=140, inst=BINARY_OP(arg=0, lineno=602)
2024-07-16 10:44:44,716 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$n_data136.20', '$const138.21']
2024-07-16 10:44:44,716 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=144, inst=LOAD_FAST(arg=1, lineno=602)
2024-07-16 10:44:44,716 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$binop_add140.22']
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=146, inst=LOAD_CONST(arg=1, lineno=602)
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$binop_add140.22', '$classes144.23']
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=148, inst=BINARY_OP(arg=0, lineno=602)
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$binop_add140.22', '$classes144.23', '$const146.24']
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=152, inst=BUILD_TUPLE(arg=2, lineno=602)
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$binop_add140.22', '$binop_add148.25']
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=154, inst=LOAD_GLOBAL(arg=2, lineno=602)
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26']
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=166, inst=LOAD_ATTR(arg=4, lineno=602)
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26', '$154load_global.27']
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=176, inst=KW_NAMES(arg=2, lineno=602)
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26', '$166load_attr.28']
2024-07-16 10:44:44,717 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=178, inst=PRECALL(arg=2, lineno=602)
2024-07-16 10:44:44,718 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26', '$166load_attr.28']
2024-07-16 10:44:44,718 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=182, inst=CALL(arg=2, lineno=602)
2024-07-16 10:44:44,718 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$114.18', '$126load_attr.19', '$152build_tuple.26', '$166load_attr.28']
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=192, inst=STORE_FAST(arg=4, lineno=602)
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$182call.29']
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=194, inst=LOAD_CONST(arg=1, lineno=603)
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=196, inst=LOAD_FAST(arg=3, lineno=603)
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30']
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=198, inst=LOAD_CONST(arg=1, lineno=603)
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31']
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=200, inst=LOAD_CONST(arg=1, lineno=603)
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$const198.32']
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=202, inst=LOAD_CONST(arg=3, lineno=603)
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$const198.32', '$const200.33']
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=204, inst=BUILD_SLICE(arg=2, lineno=603)
2024-07-16 10:44:44,719 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$const198.32', '$const200.33', '$const202.34']
2024-07-16 10:44:44,720 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=206, inst=BUILD_TUPLE(arg=2, lineno=603)
2024-07-16 10:44:44,720 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$const198.32', '$204build_slice.36']
2024-07-16 10:44:44,720 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=208, inst=STORE_SUBSCR(arg=None, lineno=603)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const194.30', '$mat1196.31', '$206build_tuple.37']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=212, inst=LOAD_GLOBAL(arg=2, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=224, inst=LOAD_ATTR(arg=5, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$212load_global.38']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=236, inst=LOAD_CONST(arg=4, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=238, inst=LOAD_CONST(arg=3, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$const236.41']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=240, inst=BUILD_SLICE(arg=2, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$const236.41', '$const238.42']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$240build_slice.44']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=244, inst=LOAD_CONST(arg=3, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$240build_slice.44', '$const242.45']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=246, inst=BUILD_SLICE(arg=2, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$240build_slice.44', '$const242.45', '$const244.46']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$240build_slice.44', '$246build_slice.48']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=250, inst=STORE_SUBSCR(arg=None, lineno=604)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$224load_attr.39', '$mat2234.40', '$248build_tuple.49']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=254, inst=LOAD_GLOBAL(arg=3, lineno=606)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=266, inst=LOAD_ATTR(arg=4, lineno=606)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$254.51', '$254load_global.50']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=276, inst=LOAD_CONST(arg=5, lineno=606)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$254.51', '$266load_attr.52']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=278, inst=PRECALL(arg=1, lineno=606)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$254.51', '$266load_attr.52', '$const276.53']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=282, inst=CALL(arg=1, lineno=606)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$254.51', '$266load_attr.52', '$const276.53']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=292, inst=STORE_FAST(arg=5, lineno=606)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$282call.54']
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=294, inst=LOAD_GLOBAL(arg=13, lineno=607)
2024-07-16 10:44:44,721 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,725 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=306, inst=LOAD_CONST(arg=4, lineno=607)
2024-07-16 10:44:44,725 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55']
2024-07-16 10:44:44,725 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=308, inst=LOAD_GLOBAL(arg=1, lineno=607)
2024-07-16 10:44:44,725 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=320, inst=LOAD_FAST(arg=0, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$null$308.59', '$308load_global.58']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=322, inst=PRECALL(arg=1, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$null$308.59', '$308load_global.58', '$values320.60']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=326, inst=CALL(arg=1, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$null$308.59', '$308load_global.58', '$values320.60']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=336, inst=LOAD_CONST(arg=1, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$326call.61']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=338, inst=BINARY_OP(arg=0, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$326call.61', '$const336.62']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=342, inst=PRECALL(arg=2, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$binop_add338.63']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=346, inst=CALL(arg=2, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$294.56', '$294load_global.55', '$const306.57', '$binop_add338.63']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=356, inst=GET_ITER(arg=None, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$346call.64']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=358, stack=('$356get_iter.65',), blockstack=(), npush=0)]
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=358 nstack_initial=1)])
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi358.0']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=358 nstack_initial=1)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=358, inst=NOP(arg=1, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi358.0']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=360, stack=('$phi358.0',), blockstack=(), npush=0)]
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=360 nstack_initial=1)])
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi360.0']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=360 nstack_initial=1)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=360, inst=FOR_ITER(arg=272, lineno=607)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi360.0']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=906, stack=(), blockstack=(), npush=0), Edge(pc=362, stack=('$phi360.0', '$360for_iter.2'), blockstack=(), npush=0)]
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=906 nstack_initial=0), State(pc_initial=362 nstack_initial=2)])
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=906 nstack_initial=0)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=906, inst=LOAD_GLOBAL(arg=1, lineno=627)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=918, inst=LOAD_FAST(arg=0, lineno=627)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$906.1', '$906load_global.0']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=920, inst=PRECALL(arg=1, lineno=627)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$906.1', '$906load_global.0', '$values918.2']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=924, inst=CALL(arg=1, lineno=627)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$906.1', '$906load_global.0', '$values918.2']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=934, inst=STORE_FAST(arg=15, lineno=627)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$924call.3']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=936, inst=LOAD_GLOBAL(arg=3, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=948, inst=LOAD_ATTR(arg=2, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$936load_global.4']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=958, inst=LOAD_FAST(arg=1, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=960, inst=LOAD_CONST(arg=1, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$classes958.7']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=962, inst=BINARY_OP(arg=0, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$classes958.7', '$const960.8']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=966, inst=LOAD_FAST(arg=0, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=968, inst=LOAD_ATTR(arg=7, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9', '$values966.10']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=978, inst=KW_NAMES(arg=2, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9', '$968load_attr.11']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=980, inst=PRECALL(arg=2, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9', '$968load_attr.11']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=984, inst=CALL(arg=2, lineno=629)
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$936.5', '$948load_attr.6', '$binop_add962.9', '$968load_attr.11']
2024-07-16 10:44:44,726 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=994, inst=STORE_FAST(arg=16, lineno=629)
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$984call.12']
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=996, inst=LOAD_FAST(arg=0, lineno=630)
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=998, inst=LOAD_GLOBAL(arg=1, lineno=630)
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13']
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1010, inst=LOAD_FAST(arg=0, lineno=630)
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$null$998.15', '$998load_global.14']
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1012, inst=PRECALL(arg=1, lineno=630)
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$null$998.15', '$998load_global.14', '$values1010.16']
2024-07-16 10:44:44,733 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1016, inst=CALL(arg=1, lineno=630)
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$null$998.15', '$998load_global.14', '$values1010.16']
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1026, inst=LOAD_CONST(arg=1, lineno=630)
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$1016call.17']
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1028, inst=BINARY_OP(arg=10, lineno=630)
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$1016call.17', '$const1026.18']
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1032, inst=BINARY_SUBSCR(arg=None, lineno=630)
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values996.13', '$binop_sub1028.19']
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1042, inst=LOAD_FAST(arg=16, lineno=630)
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1032binary_subscr.20']
2024-07-16 10:44:44,734 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1044, inst=LOAD_FAST(arg=1, lineno=630)
2024-07-16 10:44:44,735 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1032binary_subscr.20', '$kclass1042.21']
2024-07-16 10:44:44,735 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1046, inst=STORE_SUBSCR(arg=None, lineno=630)
2024-07-16 10:44:44,735 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1032binary_subscr.20', '$kclass1042.21', '$classes1044.22']
2024-07-16 10:44:44,735 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1050, inst=LOAD_FAST(arg=0, lineno=631)
2024-07-16 10:44:44,735 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,735 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1052, inst=LOAD_CONST(arg=5, lineno=631)
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values1050.23']
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1054, inst=BINARY_SUBSCR(arg=None, lineno=631)
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$values1050.23', '$const1052.24']
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1064, inst=LOAD_FAST(arg=16, lineno=631)
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1054binary_subscr.25']
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1066, inst=LOAD_CONST(arg=5, lineno=631)
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1054binary_subscr.25', '$kclass1064.26']
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1068, inst=STORE_SUBSCR(arg=None, lineno=631)
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1054binary_subscr.25', '$kclass1064.26', '$const1066.27']
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1072, inst=LOAD_GLOBAL(arg=13, lineno=632)
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,736 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1084, inst=LOAD_FAST(arg=1, lineno=632)
2024-07-16 10:44:44,737 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28']
2024-07-16 10:44:44,737 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1086, inst=LOAD_CONST(arg=1, lineno=632)
2024-07-16 10:44:44,737 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28', '$classes1084.30']
2024-07-16 10:44:44,737 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1088, inst=LOAD_CONST(arg=6, lineno=632)
2024-07-16 10:44:44,737 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28', '$classes1084.30', '$const1086.31']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1090, inst=PRECALL(arg=3, lineno=632)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28', '$classes1084.30', '$const1086.31', '$const1088.32']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1094, inst=CALL(arg=3, lineno=632)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1072.29', '$1072load_global.28', '$classes1084.30', '$const1086.31', '$const1088.32']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1104, inst=GET_ITER(arg=None, lineno=632)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1094call.33']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=1106, stack=('$1104get_iter.34',), blockstack=(), npush=0)]
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=362 nstack_initial=2), State(pc_initial=1106 nstack_initial=1)])
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi362.0', '$phi362.1']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=362 nstack_initial=2)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=362, inst=STORE_FAST(arg=6, lineno=607)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$phi362.1']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=364, inst=LOAD_GLOBAL(arg=3, lineno=608)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=376, inst=LOAD_ATTR(arg=4, lineno=608)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$364.3', '$364load_global.2']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=386, inst=LOAD_CONST(arg=5, lineno=608)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$364.3', '$376load_attr.4']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=388, inst=PRECALL(arg=1, lineno=608)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$364.3', '$376load_attr.4', '$const386.5']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=392, inst=CALL(arg=1, lineno=608)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$364.3', '$376load_attr.4', '$const386.5']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=402, inst=STORE_FAST(arg=7, lineno=608)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$392call.6']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=404, inst=LOAD_GLOBAL(arg=3, lineno=609)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=416, inst=LOAD_ATTR(arg=4, lineno=609)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$404.8', '$404load_global.7']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=426, inst=LOAD_CONST(arg=5, lineno=609)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$404.8', '$416load_attr.9']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=428, inst=PRECALL(arg=1, lineno=609)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$404.8', '$416load_attr.9', '$const426.10']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=432, inst=CALL(arg=1, lineno=609)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$404.8', '$416load_attr.9', '$const426.10']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=442, inst=STORE_FAST(arg=8, lineno=609)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$432call.11']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=444, inst=LOAD_GLOBAL(arg=3, lineno=610)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=456, inst=LOAD_ATTR(arg=4, lineno=610)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$444.13', '$444load_global.12']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=466, inst=LOAD_CONST(arg=5, lineno=610)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$444.13', '$456load_attr.14']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=468, inst=PRECALL(arg=1, lineno=610)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$444.13', '$456load_attr.14', '$const466.15']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=472, inst=CALL(arg=1, lineno=610)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$444.13', '$456load_attr.14', '$const466.15']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=482, inst=STORE_FAST(arg=9, lineno=610)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$472call.16']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=484, inst=LOAD_GLOBAL(arg=13, lineno=611)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=496, inst=LOAD_CONST(arg=1, lineno=611)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=498, inst=LOAD_FAST(arg=6, lineno=611)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=500, inst=LOAD_CONST(arg=1, lineno=611)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19', '$_l498.20']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=502, inst=BINARY_OP(arg=0, lineno=611)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19', '$_l498.20', '$const500.21']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=506, inst=PRECALL(arg=2, lineno=611)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19', '$binop_add502.22']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=510, inst=CALL(arg=2, lineno=611)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$null$484.18', '$484load_global.17', '$const496.19', '$binop_add502.22']
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=520, inst=GET_ITER(arg=None, lineno=611)
2024-07-16 10:44:44,738 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi362.0', '$510call.23']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=522, stack=('$phi362.0', '$520get_iter.24'), blockstack=(), npush=0)]
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=1106 nstack_initial=1), State(pc_initial=522 nstack_initial=2)])
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi1106.0']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=1106 nstack_initial=1)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1106, inst=FOR_ITER(arg=62, lineno=632)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1106.0']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=1232, stack=(), blockstack=(), npush=0), Edge(pc=1108, stack=('$phi1106.0', '$1106for_iter.2'), blockstack=(), npush=0)]
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=522 nstack_initial=2), State(pc_initial=1232 nstack_initial=0), State(pc_initial=1108 nstack_initial=2)])
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi522.0', '$phi522.1']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=522 nstack_initial=2)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=522, inst=FOR_ITER(arg=175, lineno=611)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi522.0', '$phi522.1']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=874, stack=('$phi522.0',), blockstack=(), npush=0), Edge(pc=524, stack=('$phi522.0', '$phi522.1', '$522for_iter.3'), blockstack=(), npush=0)]
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=1232 nstack_initial=0), State(pc_initial=1108 nstack_initial=2), State(pc_initial=874 nstack_initial=1), State(pc_initial=524 nstack_initial=3)])
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=1232 nstack_initial=0)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1232, inst=LOAD_GLOBAL(arg=3, lineno=637)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1244, inst=LOAD_ATTR(arg=9, lineno=637)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1232load_global.0']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1254, inst=LOAD_FAST(arg=16, lineno=637)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1244load_attr.2']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1256, inst=LOAD_CONST(arg=5, lineno=637)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1244load_attr.2', '$kclass1254.3']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1258, inst=PRECALL(arg=2, lineno=637)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1244load_attr.2', '$kclass1254.3', '$const1256.4']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1262, inst=CALL(arg=2, lineno=637)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$1232.1', '$1244load_attr.2', '$kclass1254.3', '$const1256.4']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1272, inst=RETURN_VALUE(arg=None, lineno=637)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$1262call.5']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=1108 nstack_initial=2), State(pc_initial=874 nstack_initial=1), State(pc_initial=524 nstack_initial=3)])
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi1108.0', '$phi1108.1']
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=1108 nstack_initial=2)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1108, inst=STORE_FAST(arg=17, lineno=632)
2024-07-16 10:44:44,745 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$phi1108.1']
2024-07-16 10:44:44,749 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1110, inst=LOAD_FAST(arg=3, lineno=633)
2024-07-16 10:44:44,749 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-07-16 10:44:44,749 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1112, inst=LOAD_FAST(arg=15, lineno=633)
2024-07-16 10:44:44,749 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$mat11110.2']
2024-07-16 10:44:44,750 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1114, inst=LOAD_FAST(arg=17, lineno=633)
2024-07-16 10:44:44,750 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$mat11110.2', '$k1112.3']
2024-07-16 10:44:44,750 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1116, inst=BUILD_TUPLE(arg=2, lineno=633)
2024-07-16 10:44:44,750 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$mat11110.2', '$k1112.3', '$countNum1114.4']
2024-07-16 10:44:44,750 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1118, inst=BINARY_SUBSCR(arg=None, lineno=633)
2024-07-16 10:44:44,751 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$mat11110.2', '$1116build_tuple.5']
2024-07-16 10:44:44,751 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1128, inst=STORE_FAST(arg=18, lineno=633)
2024-07-16 10:44:44,751 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1118binary_subscr.6']
2024-07-16 10:44:44,751 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1130, inst=LOAD_GLOBAL(arg=17, lineno=634)
2024-07-16 10:44:44,751 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-07-16 10:44:44,752 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1142, inst=LOAD_FAST(arg=18, lineno=634)
2024-07-16 10:44:44,752 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7']
2024-07-16 10:44:44,752 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1144, inst=LOAD_CONST(arg=4, lineno=634)
2024-07-16 10:44:44,752 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7', '$pivot1142.9']
2024-07-16 10:44:44,752 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1146, inst=BINARY_OP(arg=10, lineno=634)
2024-07-16 10:44:44,752 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7', '$pivot1142.9', '$const1144.10']
2024-07-16 10:44:44,752 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1150, inst=PRECALL(arg=1, lineno=634)
2024-07-16 10:44:44,753 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7', '$binop_sub1146.11']
2024-07-16 10:44:44,753 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1154, inst=CALL(arg=1, lineno=634)
2024-07-16 10:44:44,753 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1130.8', '$1130load_global.7', '$binop_sub1146.11']
2024-07-16 10:44:44,753 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1164, inst=STORE_FAST(arg=19, lineno=634)
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1154call.12']
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1166, inst=LOAD_FAST(arg=0, lineno=635)
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1168, inst=LOAD_FAST(arg=19, lineno=635)
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$values1166.13']
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1170, inst=BINARY_SUBSCR(arg=None, lineno=635)
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$values1166.13', '$_id1168.14']
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1180, inst=LOAD_FAST(arg=16, lineno=635)
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15']
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1182, inst=LOAD_FAST(arg=17, lineno=635)
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15', '$kclass1180.16']
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1184, inst=LOAD_CONST(arg=1, lineno=635)
2024-07-16 10:44:44,754 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15', '$kclass1180.16', '$countNum1182.17']
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1186, inst=BINARY_OP(arg=10, lineno=635)
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15', '$kclass1180.16', '$countNum1182.17', '$const1184.18']
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1190, inst=STORE_SUBSCR(arg=None, lineno=635)
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1170binary_subscr.15', '$kclass1180.16', '$binop_sub1186.19']
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1194, inst=LOAD_GLOBAL(arg=17, lineno=636)
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1206, inst=LOAD_FAST(arg=18, lineno=636)
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20']
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1208, inst=LOAD_CONST(arg=1, lineno=636)
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20', '$pivot1206.22']
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1210, inst=BINARY_OP(arg=10, lineno=636)
2024-07-16 10:44:44,755 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20', '$pivot1206.22', '$const1208.23']
2024-07-16 10:44:44,757 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1214, inst=PRECALL(arg=1, lineno=636)
2024-07-16 10:44:44,757 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20', '$binop_sub1210.24']
2024-07-16 10:44:44,757 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1218, inst=CALL(arg=1, lineno=636)
2024-07-16 10:44:44,757 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$null$1194.21', '$1194load_global.20', '$binop_sub1210.24']
2024-07-16 10:44:44,757 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1228, inst=STORE_FAST(arg=15, lineno=636)
2024-07-16 10:44:44,757 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0', '$1218call.25']
2024-07-16 10:44:44,757 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=1230, inst=JUMP_BACKWARD(arg=63, lineno=636)
2024-07-16 10:44:44,757 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi1108.0']
2024-07-16 10:44:44,758 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=1106, stack=('$phi1108.0',), blockstack=(), npush=0)]
2024-07-16 10:44:44,758 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=874 nstack_initial=1), State(pc_initial=524 nstack_initial=3), State(pc_initial=1106 nstack_initial=1)])
2024-07-16 10:44:44,758 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi874.0']
2024-07-16 10:44:44,758 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=874 nstack_initial=1)
2024-07-16 10:44:44,758 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=874, inst=LOAD_CONST(arg=1, lineno=624)
2024-07-16 10:44:44,758 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0']
2024-07-16 10:44:44,758 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=876, inst=LOAD_FAST(arg=3, lineno=624)
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1']
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=878, inst=LOAD_FAST(arg=6, lineno=624)
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1', '$mat1876.2']
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=880, inst=LOAD_CONST(arg=1, lineno=624)
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1', '$mat1876.2', '$_l878.3']
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=882, inst=BUILD_TUPLE(arg=2, lineno=624)
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1', '$mat1876.2', '$_l878.3', '$const880.4']
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=884, inst=STORE_SUBSCR(arg=None, lineno=624)
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$const874.1', '$mat1876.2', '$882build_tuple.5']
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=888, inst=LOAD_FAST(arg=5, lineno=625)
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0']
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=890, inst=LOAD_FAST(arg=4, lineno=625)
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6']
2024-07-16 10:44:44,759 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=892, inst=LOAD_FAST(arg=6, lineno=625)
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6', '$mat2890.7']
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=894, inst=LOAD_CONST(arg=1, lineno=625)
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6', '$mat2890.7', '$_l892.8']
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=896, inst=BUILD_TUPLE(arg=2, lineno=625)
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6', '$mat2890.7', '$_l892.8', '$const894.9']
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=898, inst=STORE_SUBSCR(arg=None, lineno=625)
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0', '$v888.6', '$mat2890.7', '$896build_tuple.10']
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=902, inst=NOP(arg=1, lineno=625)
2024-07-16 10:44:44,760 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=904, inst=JUMP_BACKWARD(arg=274, lineno=625)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi874.0']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=358, stack=('$phi874.0',), blockstack=(), npush=0)]
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=524 nstack_initial=3), State(pc_initial=1106 nstack_initial=1), State(pc_initial=358 nstack_initial=1)])
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi524.0', '$phi524.1', '$phi524.2']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=524 nstack_initial=3)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=524, inst=STORE_FAST(arg=10, lineno=611)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$phi524.2']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=526, inst=LOAD_FAST(arg=6, lineno=612)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=528, inst=LOAD_FAST(arg=10, lineno=612)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$_l526.3']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=530, inst=BINARY_OP(arg=10, lineno=612)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$_l526.3', '$m528.4']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=534, inst=LOAD_CONST(arg=1, lineno=612)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_sub530.5']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=536, inst=BINARY_OP(arg=0, lineno=612)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_sub530.5', '$const534.6']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=540, inst=STORE_FAST(arg=11, lineno=612)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_add536.7']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=542, inst=LOAD_GLOBAL(arg=3, lineno=613)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=554, inst=LOAD_ATTR(arg=4, lineno=613)
2024-07-16 10:44:44,762 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$542load_global.8']
2024-07-16 10:44:44,764 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=564, inst=LOAD_FAST(arg=0, lineno=613)
2024-07-16 10:44:44,764 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10']
2024-07-16 10:44:44,764 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=566, inst=LOAD_FAST(arg=11, lineno=613)
2024-07-16 10:44:44,764 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$values564.11']
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=568, inst=LOAD_CONST(arg=1, lineno=613)
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$values564.11', '$i3566.12']
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=570, inst=BINARY_OP(arg=10, lineno=613)
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$values564.11', '$i3566.12', '$const568.13']
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=574, inst=BINARY_SUBSCR(arg=None, lineno=613)
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$values564.11', '$binop_sub570.14']
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=584, inst=PRECALL(arg=1, lineno=613)
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$574binary_subscr.15']
2024-07-16 10:44:44,765 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=588, inst=CALL(arg=1, lineno=613)
2024-07-16 10:44:44,766 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$null$542.9', '$554load_attr.10', '$574binary_subscr.15']
2024-07-16 10:44:44,766 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=598, inst=STORE_FAST(arg=12, lineno=613)
2024-07-16 10:44:44,766 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$588call.16']
2024-07-16 10:44:44,766 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=600, inst=LOAD_FAST(arg=8, lineno=614)
2024-07-16 10:44:44,766 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=602, inst=LOAD_FAST(arg=12, lineno=614)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2600.17']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=604, inst=LOAD_FAST(arg=12, lineno=614)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2600.17', '$val602.18']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=606, inst=BINARY_OP(arg=5, lineno=614)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2600.17', '$val602.18', '$val604.19']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=610, inst=BINARY_OP(arg=13, lineno=614)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2600.17', '$binop_mul606.20']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=614, inst=STORE_FAST(arg=8, lineno=614)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_iadd610.21']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=616, inst=LOAD_FAST(arg=7, lineno=615)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=618, inst=LOAD_FAST(arg=12, lineno=615)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s1616.22']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=620, inst=BINARY_OP(arg=13, lineno=615)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s1616.22', '$val618.23']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=624, inst=STORE_FAST(arg=7, lineno=615)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_iadd620.24']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=626, inst=LOAD_FAST(arg=9, lineno=616)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=628, inst=LOAD_GLOBAL(arg=3, lineno=616)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=640, inst=LOAD_ATTR(arg=4, lineno=616)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$null$628.27', '$628load_global.26']
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=650, inst=LOAD_CONST(arg=1, lineno=616)
2024-07-16 10:44:44,767 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$null$628.27', '$640load_attr.28']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=652, inst=PRECALL(arg=1, lineno=616)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$null$628.27', '$640load_attr.28', '$const650.29']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=656, inst=CALL(arg=1, lineno=616)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$null$628.27', '$640load_attr.28', '$const650.29']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=666, inst=BINARY_OP(arg=13, lineno=616)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$w626.25', '$656call.30']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=670, inst=STORE_FAST(arg=9, lineno=616)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_iadd666.31']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=672, inst=LOAD_FAST(arg=8, lineno=617)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=674, inst=LOAD_FAST(arg=7, lineno=617)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=676, inst=LOAD_FAST(arg=7, lineno=617)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$s1674.33']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=678, inst=BINARY_OP(arg=5, lineno=617)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$s1674.33', '$s1676.34']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=682, inst=LOAD_FAST(arg=9, lineno=617)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$binop_mul678.35']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=684, inst=BINARY_OP(arg=11, lineno=617)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$binop_mul678.35', '$w682.36']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=688, inst=BINARY_OP(arg=10, lineno=617)
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$s2672.32', '$binop_truediv684.37']
2024-07-16 10:44:44,769 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=692, inst=STORE_FAST(arg=5, lineno=617)
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_sub688.38']
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=694, inst=LOAD_FAST(arg=11, lineno=618)
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=696, inst=LOAD_CONST(arg=1, lineno=618)
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$i3694.39']
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=698, inst=BINARY_OP(arg=10, lineno=618)
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$i3694.39', '$const696.40']
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=702, inst=STORE_FAST(arg=13, lineno=618)
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$binop_sub698.41']
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=704, inst=LOAD_FAST(arg=13, lineno=619)
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1']
2024-07-16 10:44:44,772 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=706, inst=LOAD_CONST(arg=5, lineno=619)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$i4704.42']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=708, inst=COMPARE_OP(arg=3, lineno=619)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$i4704.42', '$const706.43']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=714, inst=POP_JUMP_FORWARD_IF_FALSE(arg=78, lineno=619)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi524.0', '$phi524.1', '$708compare_op.44']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=716, stack=('$phi524.0', '$phi524.1'), blockstack=(), npush=0), Edge(pc=872, stack=('$phi524.0', '$phi524.1'), blockstack=(), npush=0)]
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=1106 nstack_initial=1), State(pc_initial=358 nstack_initial=1), State(pc_initial=716 nstack_initial=2), State(pc_initial=872 nstack_initial=2)])
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=358 nstack_initial=1), State(pc_initial=716 nstack_initial=2), State(pc_initial=872 nstack_initial=2)])
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=716 nstack_initial=2), State(pc_initial=872 nstack_initial=2)])
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi716.0', '$phi716.1']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=716 nstack_initial=2)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=716, inst=LOAD_GLOBAL(arg=13, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=728, inst=LOAD_CONST(arg=4, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=730, inst=LOAD_FAST(arg=1, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=732, inst=LOAD_CONST(arg=1, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4', '$classes730.5']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=734, inst=BINARY_OP(arg=0, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4', '$classes730.5', '$const732.6']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=738, inst=PRECALL(arg=2, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4', '$binop_add734.7']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=742, inst=CALL(arg=2, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$null$716.3', '$716load_global.2', '$const728.4', '$binop_add734.7']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=752, inst=GET_ITER(arg=None, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi716.0', '$phi716.1', '$742call.8']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=754, stack=('$phi716.0', '$phi716.1', '$752get_iter.9'), blockstack=(), npush=0)]
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=872 nstack_initial=2), State(pc_initial=754 nstack_initial=3)])
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi872.0', '$phi872.1']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=872 nstack_initial=2)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=872, inst=JUMP_BACKWARD(arg=176, lineno=623)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi872.0', '$phi872.1']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=522, stack=('$phi872.0', '$phi872.1'), blockstack=(), npush=0)]
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=754 nstack_initial=3), State(pc_initial=522 nstack_initial=2)])
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi754.0', '$phi754.1', '$phi754.2']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=754 nstack_initial=3)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=754, inst=FOR_ITER(arg=58, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi754.0', '$phi754.1', '$phi754.2']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=872, stack=('$phi754.0', '$phi754.1'), blockstack=(), npush=0), Edge(pc=756, stack=('$phi754.0', '$phi754.1', '$phi754.2', '$754for_iter.4'), blockstack=(), npush=0)]
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=522 nstack_initial=2), State(pc_initial=872 nstack_initial=2), State(pc_initial=756 nstack_initial=4)])
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=872 nstack_initial=2), State(pc_initial=756 nstack_initial=4)])
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=756 nstack_initial=4)])
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi756.0', '$phi756.1', '$phi756.2', '$phi756.3']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=756 nstack_initial=4)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=756, inst=STORE_FAST(arg=14, lineno=620)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$phi756.3']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=758, inst=LOAD_FAST(arg=4, lineno=621)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=760, inst=LOAD_FAST(arg=6, lineno=621)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$mat2758.4']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=762, inst=LOAD_FAST(arg=14, lineno=621)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$mat2758.4', '$_l760.5']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=764, inst=BUILD_TUPLE(arg=2, lineno=621)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$mat2758.4', '$_l760.5', '$j762.6']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=766, inst=BINARY_SUBSCR(arg=None, lineno=621)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$mat2758.4', '$764build_tuple.7']
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=776, inst=LOAD_FAST(arg=5, lineno=621)
2024-07-16 10:44:44,774 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8']
2024-07-16 10:44:44,780 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=778, inst=LOAD_FAST(arg=4, lineno=621)
2024-07-16 10:44:44,780 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9']
2024-07-16 10:44:44,780 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=780, inst=LOAD_FAST(arg=13, lineno=621)
2024-07-16 10:44:44,780 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10']
2024-07-16 10:44:44,780 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=782, inst=LOAD_FAST(arg=14, lineno=621)
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$i4780.11']
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=784, inst=LOAD_CONST(arg=1, lineno=621)
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$i4780.11', '$j782.12']
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=786, inst=BINARY_OP(arg=10, lineno=621)
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$i4780.11', '$j782.12', '$const784.13']
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=790, inst=BUILD_TUPLE(arg=2, lineno=621)
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$i4780.11', '$binop_sub786.14']
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=792, inst=BINARY_SUBSCR(arg=None, lineno=621)
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$mat2778.10', '$790build_tuple.15']
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=802, inst=BINARY_OP(arg=0, lineno=621)
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$v776.9', '$792binary_subscr.16']
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=806, inst=COMPARE_OP(arg=5, lineno=621)
2024-07-16 10:44:44,781 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$766binary_subscr.8', '$binop_add802.17']
2024-07-16 10:44:44,782 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=812, inst=POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=621)
2024-07-16 10:44:44,782 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi756.0', '$phi756.1', '$phi756.2', '$806compare_op.18']
2024-07-16 10:44:44,782 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=814, stack=('$phi756.0', '$phi756.1', '$phi756.2'), blockstack=(), npush=0), Edge(pc=870, stack=('$phi756.0', '$phi756.1', '$phi756.2'), blockstack=(), npush=0)]
2024-07-16 10:44:44,783 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=814 nstack_initial=3), State(pc_initial=870 nstack_initial=3)])
2024-07-16 10:44:44,783 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi814.0', '$phi814.1', '$phi814.2']
2024-07-16 10:44:44,783 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=814 nstack_initial=3)
2024-07-16 10:44:44,783 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=814, inst=LOAD_FAST(arg=11, lineno=622)
2024-07-16 10:44:44,783 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2']
2024-07-16 10:44:44,783 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=816, inst=LOAD_FAST(arg=3, lineno=622)
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3']
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=818, inst=LOAD_FAST(arg=6, lineno=622)
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3', '$mat1816.4']
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=820, inst=LOAD_FAST(arg=14, lineno=622)
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3', '$mat1816.4', '$_l818.5']
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=822, inst=BUILD_TUPLE(arg=2, lineno=622)
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3', '$mat1816.4', '$_l818.5', '$j820.6']
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=824, inst=STORE_SUBSCR(arg=None, lineno=622)
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$i3814.3', '$mat1816.4', '$822build_tuple.7']
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=828, inst=LOAD_FAST(arg=5, lineno=623)
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2']
2024-07-16 10:44:44,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=830, inst=LOAD_FAST(arg=4, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=832, inst=LOAD_FAST(arg=13, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=834, inst=LOAD_FAST(arg=14, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$i4832.10']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=836, inst=LOAD_CONST(arg=1, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$i4832.10', '$j834.11']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=838, inst=BINARY_OP(arg=10, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$i4832.10', '$j834.11', '$const836.12']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=842, inst=BUILD_TUPLE(arg=2, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$i4832.10', '$binop_sub838.13']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=844, inst=BINARY_SUBSCR(arg=None, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$mat2830.9', '$842build_tuple.14']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=854, inst=BINARY_OP(arg=0, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$v828.8', '$844binary_subscr.15']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=858, inst=LOAD_FAST(arg=4, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=860, inst=LOAD_FAST(arg=6, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16', '$mat2858.17']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=862, inst=LOAD_FAST(arg=14, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16', '$mat2858.17', '$_l860.18']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=864, inst=BUILD_TUPLE(arg=2, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16', '$mat2858.17', '$_l860.18', '$j862.19']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=866, inst=STORE_SUBSCR(arg=None, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi814.0', '$phi814.1', '$phi814.2', '$binop_add854.16', '$mat2858.17', '$864build_tuple.20']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=870, stack=('$phi814.0', '$phi814.1', '$phi814.2'), blockstack=(), npush=0)]
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=870 nstack_initial=3), State(pc_initial=870 nstack_initial=3)])
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi870.0', '$phi870.1', '$phi870.2']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=870 nstack_initial=3)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=870, inst=JUMP_BACKWARD(arg=59, lineno=623)
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi870.0', '$phi870.1', '$phi870.2']
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=754, stack=('$phi870.0', '$phi870.1', '$phi870.2'), blockstack=(), npush=0)]
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=870 nstack_initial=3), State(pc_initial=754 nstack_initial=3)])
2024-07-16 10:44:44,785 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=754 nstack_initial=3)])
2024-07-16 10:44:44,789 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:44,789 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=358 nstack_initial=1): set(),
             State(pc_initial=360 nstack_initial=1): {'$phi360.0'},
             State(pc_initial=362 nstack_initial=2): {'$phi362.1'},
             State(pc_initial=522 nstack_initial=2): {'$phi522.1'},
             State(pc_initial=524 nstack_initial=3): {'$phi524.2'},
             State(pc_initial=716 nstack_initial=2): set(),
             State(pc_initial=754 nstack_initial=3): {'$phi754.2'},
             State(pc_initial=756 nstack_initial=4): {'$phi756.3'},
             State(pc_initial=814 nstack_initial=3): set(),
             State(pc_initial=870 nstack_initial=3): set(),
             State(pc_initial=872 nstack_initial=2): set(),
             State(pc_initial=874 nstack_initial=1): set(),
             State(pc_initial=906 nstack_initial=0): set(),
             State(pc_initial=1106 nstack_initial=1): {'$phi1106.0'},
             State(pc_initial=1108 nstack_initial=2): {'$phi1108.1'},
             State(pc_initial=1232 nstack_initial=0): set()})
2024-07-16 10:44:44,789 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {'$phi1106.0': State(pc_initial=906 nstack_initial=0),
 '$phi1108.1': State(pc_initial=1106 nstack_initial=1),
 '$phi358.0': State(pc_initial=0 nstack_initial=0),
 '$phi362.1': State(pc_initial=360 nstack_initial=1),
 '$phi522.1': State(pc_initial=362 nstack_initial=2),
 '$phi524.2': State(pc_initial=522 nstack_initial=2),
 '$phi754.2': State(pc_initial=716 nstack_initial=2),
 '$phi756.3': State(pc_initial=754 nstack_initial=3)}
2024-07-16 10:44:44,789 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0)),
                            ('$phi1108.0',
                             State(pc_initial=1108 nstack_initial=2))},
             '$phi1108.0': {('$phi1106.0',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi874.0',
                            State(pc_initial=874 nstack_initial=1))},
             '$phi360.0': {('$phi358.0',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi362.0': {('$phi360.0',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi872.0',
                            State(pc_initial=872 nstack_initial=2))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi872.1',
                            State(pc_initial=872 nstack_initial=2))},
             '$phi524.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi524.1': {('$phi522.1',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$phi524.0',
                            State(pc_initial=524 nstack_initial=3))},
             '$phi716.1': {('$phi524.1',
                            State(pc_initial=524 nstack_initial=3))},
             '$phi754.0': {('$phi716.0',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi870.0',
                            State(pc_initial=870 nstack_initial=3))},
             '$phi754.1': {('$phi716.1',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi870.1',
                            State(pc_initial=870 nstack_initial=3))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi870.2',
                            State(pc_initial=870 nstack_initial=3))},
             '$phi756.0': {('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi756.1': {('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi756.2': {('$phi754.2',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$phi756.0',
                            State(pc_initial=756 nstack_initial=4))},
             '$phi814.1': {('$phi756.1',
                            State(pc_initial=756 nstack_initial=4))},
             '$phi814.2': {('$phi756.2',
                            State(pc_initial=756 nstack_initial=4))},
             '$phi870.0': {('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi870.1': {('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi870.2': {('$phi756.2',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.2',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi872.0': {('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi872.1': {('$phi524.1',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi874.0': {('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))}})
2024-07-16 10:44:44,789 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0)),
                            ('$phi1106.0',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi522.0',
                            State(pc_initial=522 nstack_initial=2)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi524.1',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi524.1',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi754.1',
                            State(pc_initial=754 nstack_initial=3)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi756.2',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.2',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi756.2',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.2',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2)),
                           ('$phi814.2',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))}})
2024-07-16 10:44:44,795 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=3)),
                           ('$phi754.0',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2)),
                           ('$phi756.1',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.1',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))}})
2024-07-16 10:44:44,795 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi756.0',
                            State(pc_initial=756 nstack_initial=4)),
                           ('$phi814.0',
                            State(pc_initial=814 nstack_initial=3))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))}})
2024-07-16 10:44:44,799 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))}})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi1106.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.0': {('$1104get_iter.34',
                             State(pc_initial=906 nstack_initial=0))},
             '$phi1108.1': {('$1106for_iter.2',
                             State(pc_initial=1106 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi360.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.1': {('$360for_iter.2',
                            State(pc_initial=360 nstack_initial=1))},
             '$phi522.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi522.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi524.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi524.2': {('$522for_iter.3',
                            State(pc_initial=522 nstack_initial=2))},
             '$phi716.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi716.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi754.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi754.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi756.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi756.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi756.3': {('$754for_iter.4',
                            State(pc_initial=754 nstack_initial=3))},
             '$phi814.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi814.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi814.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi870.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi870.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi870.2': {('$752get_iter.9',
                            State(pc_initial=716 nstack_initial=2))},
             '$phi872.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi872.1': {('$520get_iter.24',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi874.0': {('$356get_iter.65',
                            State(pc_initial=0 nstack_initial=0))}})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {'$phi1106.0': {('$1104get_iter.34', State(pc_initial=906 nstack_initial=0))},
 '$phi1108.1': {('$1106for_iter.2', State(pc_initial=1106 nstack_initial=1))},
 '$phi360.0': {('$356get_iter.65', State(pc_initial=0 nstack_initial=0))},
 '$phi362.1': {('$360for_iter.2', State(pc_initial=360 nstack_initial=1))},
 '$phi522.1': {('$520get_iter.24', State(pc_initial=362 nstack_initial=2))},
 '$phi524.2': {('$522for_iter.3', State(pc_initial=522 nstack_initial=2))},
 '$phi754.2': {('$752get_iter.9', State(pc_initial=716 nstack_initial=2))},
 '$phi756.3': {('$754for_iter.4', State(pc_initial=754 nstack_initial=3))}}
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi360.0': '$356get_iter.65'},
             State(pc_initial=360 nstack_initial=1): {'$phi362.1': '$360for_iter.2'},
             State(pc_initial=362 nstack_initial=2): {'$phi522.1': '$520get_iter.24'},
             State(pc_initial=522 nstack_initial=2): {'$phi524.2': '$522for_iter.3'},
             State(pc_initial=716 nstack_initial=2): {'$phi754.2': '$752get_iter.9'},
             State(pc_initial=754 nstack_initial=3): {'$phi756.3': '$754for_iter.4'},
             State(pc_initial=906 nstack_initial=0): {'$phi1106.0': '$1104get_iter.34'},
             State(pc_initial=1106 nstack_initial=1): {'$phi1108.1': '$1106for_iter.2'}})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$values16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$values16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'value': '$22call.3'}), (34, {'idx': 1, 'res': '$34load_global.4'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'item': '$34load_global.4', 'res': '$46load_attr.6'}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'res': '$n_data56.7'}), (58, {'res': '$const58.8'}), (60, {'op': '+', 'lhs': '$n_data56.7', 'rhs': '$const58.8', 'res': '$binop_add60.9'}), (62, {}), (64, {'res': '$classes64.10'}), (66, {'res': '$const66.11'}), (68, {'op': '+', 'lhs': '$classes64.10', 'rhs': '$const66.11', 'res': '$binop_add68.12'}), (70, {}), (72, {'items': ['$binop_add60.9', '$binop_add68.12'], 'res': '$72build_tuple.13'}), (74, {'idx': 1, 'res': '$74load_global.14'}), (76, {}), (78, {}), (80, {}), (82, {}), (84, {}), (86, {'item': '$74load_global.14', 'res': '$86load_attr.15'}), (88, {}), (90, {}), (92, {}), (94, {}), (98, {}), (100, {}), (102, {'func': '$46load_attr.6', 'args': ['$72build_tuple.13', '$86load_attr.15'], 'kw_names': 2, 'res': '$102call.16'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'value': '$102call.16'}), (114, {'idx': 1, 'res': '$114load_global.17'}), (116, {}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {'item': '$114load_global.17', 'res': '$126load_attr.19'}), (128, {}), (130, {}), (132, {}), (134, {}), (136, {'res': '$n_data136.20'}), (138, {'res': '$const138.21'}), (140, {'op': '+', 'lhs': '$n_data136.20', 'rhs': '$const138.21', 'res': '$binop_add140.22'}), (142, {}), (144, {'res': '$classes144.23'}), (146, {'res': '$const146.24'}), (148, {'op': '+', 'lhs': '$classes144.23', 'rhs': '$const146.24', 'res': '$binop_add148.25'}), (150, {}), (152, {'items': ['$binop_add140.22', '$binop_add148.25'], 'res': '$152build_tuple.26'}), (154, {'idx': 1, 'res': '$154load_global.27'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {}), (166, {'item': '$154load_global.27', 'res': '$166load_attr.28'}), (168, {}), (170, {}), (172, {}), (174, {}), (178, {}), (180, {}), (182, {'func': '$126load_attr.19', 'args': ['$152build_tuple.26', '$166load_attr.28'], 'kw_names': 2, 'res': '$182call.29'}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'value': '$182call.29'}), (194, {'res': '$const194.30'}), (196, {'res': '$mat1196.31'}), (198, {'res': '$const198.32'}), (200, {'res': '$const200.33'}), (202, {'res': '$const202.34'}), (204, {'start': '$const200.33', 'stop': '$const202.34', 'step': None, 'res': '$204build_slice.36', 'slicevar': '$204build_slice.35'}), (206, {'items': ['$const198.32', '$204build_slice.36'], 'res': '$206build_tuple.37'}), (208, {'target': '$mat1196.31', 'index': '$206build_tuple.37', 'value': '$const194.30'}), (210, {}), (212, {'idx': 1, 'res': '$212load_global.38'}), (214, {}), (216, {}), (218, {}), (220, {}), (222, {}), (224, {'item': '$212load_global.38', 'res': '$224load_attr.39'}), (226, {}), (228, {}), (230, {}), (232, {}), (234, {'res': '$mat2234.40'}), (236, {'res': '$const236.41'}), (238, {'res': '$const238.42'}), (240, {'start': '$const236.41', 'stop': '$const238.42', 'step': None, 'res': '$240build_slice.44', 'slicevar': '$240build_slice.43'}), (242, {'res': '$const242.45'}), (244, {'res': '$const244.46'}), (246, {'start': '$const242.45', 'stop': '$const244.46', 'step': None, 'res': '$246build_slice.48', 'slicevar': '$246build_slice.47'}), (248, {'items': ['$240build_slice.44', '$246build_slice.48'], 'res': '$248build_tuple.49'}), (250, {'target': '$mat2234.40', 'index': '$248build_tuple.49', 'value': '$224load_attr.39'}), (252, {}), (254, {'idx': 1, 'res': '$254load_global.50'}), (256, {}), (258, {}), (260, {}), (262, {}), (264, {}), (266, {'item': '$254load_global.50', 'res': '$266load_attr.52'}), (268, {}), (270, {}), (272, {}), (274, {}), (276, {'res': '$const276.53'}), (278, {}), (280, {}), (282, {'func': '$266load_attr.52', 'args': ['$const276.53'], 'kw_names': None, 'res': '$282call.54'}), (284, {}), (286, {}), (288, {}), (290, {}), (292, {'value': '$282call.54'}), (294, {'idx': 6, 'res': '$294load_global.55'}), (296, {}), (298, {}), (300, {}), (302, {}), (304, {}), (306, {'res': '$const306.57'}), (308, {'idx': 0, 'res': '$308load_global.58'}), (310, {}), (312, {}), (314, {}), (316, {}), (318, {}), (320, {'res': '$values320.60'}), (322, {}), (324, {}), (326, {'func': '$308load_global.58', 'args': ['$values320.60'], 'kw_names': None, 'res': '$326call.61'}), (328, {}), (330, {}), (332, {}), (334, {}), (336, {'res': '$const336.62'}), (338, {'op': '+', 'lhs': '$326call.61', 'rhs': '$const336.62', 'res': '$binop_add338.63'}), (340, {}), (342, {}), (344, {}), (346, {'func': '$294load_global.55', 'args': ['$const306.57', '$binop_add338.63'], 'kw_names': None, 'res': '$346call.64'}), (348, {}), (350, {}), (352, {}), (354, {}), (356, {'value': '$346call.64', 'res': '$356get_iter.65'})), outgoing_phis={'$phi360.0': '$356get_iter.65'}, blockstack=(), active_try_block=None, outgoing_edgepushed={358: ('$356get_iter.65',)})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=358 nstack_initial=1):
AdaptBlockInfo(insts=((358, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={360: ('$phi358.0',)})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=360 nstack_initial=1):
AdaptBlockInfo(insts=((360, {'iterator': '$phi360.0', 'pair': '$360for_iter.1', 'indval': '$360for_iter.2', 'pred': '$360for_iter.3'}),), outgoing_phis={'$phi362.1': '$360for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={906: (), 362: ('$phi360.0', '$360for_iter.2')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=362 nstack_initial=2):
AdaptBlockInfo(insts=((362, {'value': '$phi362.1'}), (364, {'idx': 1, 'res': '$364load_global.2'}), (366, {}), (368, {}), (370, {}), (372, {}), (374, {}), (376, {'item': '$364load_global.2', 'res': '$376load_attr.4'}), (378, {}), (380, {}), (382, {}), (384, {}), (386, {'res': '$const386.5'}), (388, {}), (390, {}), (392, {'func': '$376load_attr.4', 'args': ['$const386.5'], 'kw_names': None, 'res': '$392call.6'}), (394, {}), (396, {}), (398, {}), (400, {}), (402, {'value': '$392call.6'}), (404, {'idx': 1, 'res': '$404load_global.7'}), (406, {}), (408, {}), (410, {}), (412, {}), (414, {}), (416, {'item': '$404load_global.7', 'res': '$416load_attr.9'}), (418, {}), (420, {}), (422, {}), (424, {}), (426, {'res': '$const426.10'}), (428, {}), (430, {}), (432, {'func': '$416load_attr.9', 'args': ['$const426.10'], 'kw_names': None, 'res': '$432call.11'}), (434, {}), (436, {}), (438, {}), (440, {}), (442, {'value': '$432call.11'}), (444, {'idx': 1, 'res': '$444load_global.12'}), (446, {}), (448, {}), (450, {}), (452, {}), (454, {}), (456, {'item': '$444load_global.12', 'res': '$456load_attr.14'}), (458, {}), (460, {}), (462, {}), (464, {}), (466, {'res': '$const466.15'}), (468, {}), (470, {}), (472, {'func': '$456load_attr.14', 'args': ['$const466.15'], 'kw_names': None, 'res': '$472call.16'}), (474, {}), (476, {}), (478, {}), (480, {}), (482, {'value': '$472call.16'}), (484, {'idx': 6, 'res': '$484load_global.17'}), (486, {}), (488, {}), (490, {}), (492, {}), (494, {}), (496, {'res': '$const496.19'}), (498, {'res': '$_l498.20'}), (500, {'res': '$const500.21'}), (502, {'op': '+', 'lhs': '$_l498.20', 'rhs': '$const500.21', 'res': '$binop_add502.22'}), (504, {}), (506, {}), (508, {}), (510, {'func': '$484load_global.17', 'args': ['$const496.19', '$binop_add502.22'], 'kw_names': None, 'res': '$510call.23'}), (512, {}), (514, {}), (516, {}), (518, {}), (520, {'value': '$510call.23', 'res': '$520get_iter.24'})), outgoing_phis={'$phi522.1': '$520get_iter.24'}, blockstack=(), active_try_block=None, outgoing_edgepushed={522: ('$phi362.0', '$520get_iter.24')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=522 nstack_initial=2):
AdaptBlockInfo(insts=((522, {'iterator': '$phi522.1', 'pair': '$522for_iter.2', 'indval': '$522for_iter.3', 'pred': '$522for_iter.4'}),), outgoing_phis={'$phi524.2': '$522for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={874: ('$phi522.0',), 524: ('$phi522.0', '$phi522.1', '$522for_iter.3')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=524 nstack_initial=3):
AdaptBlockInfo(insts=((524, {'value': '$phi524.2'}), (526, {'res': '$_l526.3'}), (528, {'res': '$m528.4'}), (530, {'op': '-', 'lhs': '$_l526.3', 'rhs': '$m528.4', 'res': '$binop_sub530.5'}), (532, {}), (534, {'res': '$const534.6'}), (536, {'op': '+', 'lhs': '$binop_sub530.5', 'rhs': '$const534.6', 'res': '$binop_add536.7'}), (538, {}), (540, {'value': '$binop_add536.7'}), (542, {'idx': 1, 'res': '$542load_global.8'}), (544, {}), (546, {}), (548, {}), (550, {}), (552, {}), (554, {'item': '$542load_global.8', 'res': '$554load_attr.10'}), (556, {}), (558, {}), (560, {}), (562, {}), (564, {'res': '$values564.11'}), (566, {'res': '$i3566.12'}), (568, {'res': '$const568.13'}), (570, {'op': '-', 'lhs': '$i3566.12', 'rhs': '$const568.13', 'res': '$binop_sub570.14'}), (572, {}), (574, {'index': '$binop_sub570.14', 'target': '$values564.11', 'res': '$574binary_subscr.15'}), (576, {}), (578, {}), (580, {}), (582, {}), (584, {}), (586, {}), (588, {'func': '$554load_attr.10', 'args': ['$574binary_subscr.15'], 'kw_names': None, 'res': '$588call.16'}), (590, {}), (592, {}), (594, {}), (596, {}), (598, {'value': '$588call.16'}), (600, {'res': '$s2600.17'}), (602, {'res': '$val602.18'}), (604, {'res': '$val604.19'}), (606, {'op': '*', 'lhs': '$val602.18', 'rhs': '$val604.19', 'res': '$binop_mul606.20'}), (608, {}), (610, {'op': '+=', 'lhs': '$s2600.17', 'rhs': '$binop_mul606.20', 'res': '$binop_iadd610.21'}), (612, {}), (614, {'value': '$binop_iadd610.21'}), (616, {'res': '$s1616.22'}), (618, {'res': '$val618.23'}), (620, {'op': '+=', 'lhs': '$s1616.22', 'rhs': '$val618.23', 'res': '$binop_iadd620.24'}), (622, {}), (624, {'value': '$binop_iadd620.24'}), (626, {'res': '$w626.25'}), (628, {'idx': 1, 'res': '$628load_global.26'}), (630, {}), (632, {}), (634, {}), (636, {}), (638, {}), (640, {'item': '$628load_global.26', 'res': '$640load_attr.28'}), (642, {}), (644, {}), (646, {}), (648, {}), (650, {'res': '$const650.29'}), (652, {}), (654, {}), (656, {'func': '$640load_attr.28', 'args': ['$const650.29'], 'kw_names': None, 'res': '$656call.30'}), (658, {}), (660, {}), (662, {}), (664, {}), (666, {'op': '+=', 'lhs': '$w626.25', 'rhs': '$656call.30', 'res': '$binop_iadd666.31'}), (668, {}), (670, {'value': '$binop_iadd666.31'}), (672, {'res': '$s2672.32'}), (674, {'res': '$s1674.33'}), (676, {'res': '$s1676.34'}), (678, {'op': '*', 'lhs': '$s1674.33', 'rhs': '$s1676.34', 'res': '$binop_mul678.35'}), (680, {}), (682, {'res': '$w682.36'}), (684, {'op': '/', 'lhs': '$binop_mul678.35', 'rhs': '$w682.36', 'res': '$binop_truediv684.37'}), (686, {}), (688, {'op': '-', 'lhs': '$s2672.32', 'rhs': '$binop_truediv684.37', 'res': '$binop_sub688.38'}), (690, {}), (692, {'value': '$binop_sub688.38'}), (694, {'res': '$i3694.39'}), (696, {'res': '$const696.40'}), (698, {'op': '-', 'lhs': '$i3694.39', 'rhs': '$const696.40', 'res': '$binop_sub698.41'}), (700, {}), (702, {'value': '$binop_sub698.41'}), (704, {'res': '$i4704.42'}), (706, {'res': '$const706.43'}), (708, {'lhs': '$i4704.42', 'rhs': '$const706.43', 'res': '$708compare_op.44'}), (710, {}), (712, {}), (714, {'pred': '$708compare_op.44'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={716: ('$phi524.0', '$phi524.1'), 872: ('$phi524.0', '$phi524.1')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=716 nstack_initial=2):
AdaptBlockInfo(insts=((716, {'idx': 6, 'res': '$716load_global.2'}), (718, {}), (720, {}), (722, {}), (724, {}), (726, {}), (728, {'res': '$const728.4'}), (730, {'res': '$classes730.5'}), (732, {'res': '$const732.6'}), (734, {'op': '+', 'lhs': '$classes730.5', 'rhs': '$const732.6', 'res': '$binop_add734.7'}), (736, {}), (738, {}), (740, {}), (742, {'func': '$716load_global.2', 'args': ['$const728.4', '$binop_add734.7'], 'kw_names': None, 'res': '$742call.8'}), (744, {}), (746, {}), (748, {}), (750, {}), (752, {'value': '$742call.8', 'res': '$752get_iter.9'})), outgoing_phis={'$phi754.2': '$752get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={754: ('$phi716.0', '$phi716.1', '$752get_iter.9')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=754 nstack_initial=3):
AdaptBlockInfo(insts=((754, {'iterator': '$phi754.2', 'pair': '$754for_iter.3', 'indval': '$754for_iter.4', 'pred': '$754for_iter.5'}),), outgoing_phis={'$phi756.3': '$754for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={872: ('$phi754.0', '$phi754.1'), 756: ('$phi754.0', '$phi754.1', '$phi754.2', '$754for_iter.4')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=756 nstack_initial=4):
AdaptBlockInfo(insts=((756, {'value': '$phi756.3'}), (758, {'res': '$mat2758.4'}), (760, {'res': '$_l760.5'}), (762, {'res': '$j762.6'}), (764, {'items': ['$_l760.5', '$j762.6'], 'res': '$764build_tuple.7'}), (766, {'index': '$764build_tuple.7', 'target': '$mat2758.4', 'res': '$766binary_subscr.8'}), (768, {}), (770, {}), (772, {}), (774, {}), (776, {'res': '$v776.9'}), (778, {'res': '$mat2778.10'}), (780, {'res': '$i4780.11'}), (782, {'res': '$j782.12'}), (784, {'res': '$const784.13'}), (786, {'op': '-', 'lhs': '$j782.12', 'rhs': '$const784.13', 'res': '$binop_sub786.14'}), (788, {}), (790, {'items': ['$i4780.11', '$binop_sub786.14'], 'res': '$790build_tuple.15'}), (792, {'index': '$790build_tuple.15', 'target': '$mat2778.10', 'res': '$792binary_subscr.16'}), (794, {}), (796, {}), (798, {}), (800, {}), (802, {'op': '+', 'lhs': '$v776.9', 'rhs': '$792binary_subscr.16', 'res': '$binop_add802.17'}), (804, {}), (806, {'lhs': '$766binary_subscr.8', 'rhs': '$binop_add802.17', 'res': '$806compare_op.18'}), (808, {}), (810, {}), (812, {'pred': '$806compare_op.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={814: ('$phi756.0', '$phi756.1', '$phi756.2'), 870: ('$phi756.0', '$phi756.1', '$phi756.2')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=814 nstack_initial=3):
AdaptBlockInfo(insts=((814, {'res': '$i3814.3'}), (816, {'res': '$mat1816.4'}), (818, {'res': '$_l818.5'}), (820, {'res': '$j820.6'}), (822, {'items': ['$_l818.5', '$j820.6'], 'res': '$822build_tuple.7'}), (824, {'target': '$mat1816.4', 'index': '$822build_tuple.7', 'value': '$i3814.3'}), (826, {}), (828, {'res': '$v828.8'}), (830, {'res': '$mat2830.9'}), (832, {'res': '$i4832.10'}), (834, {'res': '$j834.11'}), (836, {'res': '$const836.12'}), (838, {'op': '-', 'lhs': '$j834.11', 'rhs': '$const836.12', 'res': '$binop_sub838.13'}), (840, {}), (842, {'items': ['$i4832.10', '$binop_sub838.13'], 'res': '$842build_tuple.14'}), (844, {'index': '$842build_tuple.14', 'target': '$mat2830.9', 'res': '$844binary_subscr.15'}), (846, {}), (848, {}), (850, {}), (852, {}), (854, {'op': '+', 'lhs': '$v828.8', 'rhs': '$844binary_subscr.15', 'res': '$binop_add854.16'}), (856, {}), (858, {'res': '$mat2858.17'}), (860, {'res': '$_l860.18'}), (862, {'res': '$j862.19'}), (864, {'items': ['$_l860.18', '$j862.19'], 'res': '$864build_tuple.20'}), (866, {'target': '$mat2858.17', 'index': '$864build_tuple.20', 'value': '$binop_add854.16'}), (868, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={870: ('$phi814.0', '$phi814.1', '$phi814.2')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=870 nstack_initial=3):
AdaptBlockInfo(insts=((870, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={754: ('$phi870.0', '$phi870.1', '$phi870.2')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=872 nstack_initial=2):
AdaptBlockInfo(insts=((872, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={522: ('$phi872.0', '$phi872.1')})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=874 nstack_initial=1):
AdaptBlockInfo(insts=((874, {'res': '$const874.1'}), (876, {'res': '$mat1876.2'}), (878, {'res': '$_l878.3'}), (880, {'res': '$const880.4'}), (882, {'items': ['$_l878.3', '$const880.4'], 'res': '$882build_tuple.5'}), (884, {'target': '$mat1876.2', 'index': '$882build_tuple.5', 'value': '$const874.1'}), (886, {}), (888, {'res': '$v888.6'}), (890, {'res': '$mat2890.7'}), (892, {'res': '$_l892.8'}), (894, {'res': '$const894.9'}), (896, {'items': ['$_l892.8', '$const894.9'], 'res': '$896build_tuple.10'}), (898, {'target': '$mat2890.7', 'index': '$896build_tuple.10', 'value': '$v888.6'}), (900, {}), (902, {}), (904, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={358: ('$phi874.0',)})
2024-07-16 10:44:44,802 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=906 nstack_initial=0):
AdaptBlockInfo(insts=((906, {'idx': 0, 'res': '$906load_global.0'}), (908, {}), (910, {}), (912, {}), (914, {}), (916, {}), (918, {'res': '$values918.2'}), (920, {}), (922, {}), (924, {'func': '$906load_global.0', 'args': ['$values918.2'], 'kw_names': None, 'res': '$924call.3'}), (926, {}), (928, {}), (930, {}), (932, {}), (934, {'value': '$924call.3'}), (936, {'idx': 1, 'res': '$936load_global.4'}), (938, {}), (940, {}), (942, {}), (944, {}), (946, {}), (948, {'item': '$936load_global.4', 'res': '$948load_attr.6'}), (950, {}), (952, {}), (954, {}), (956, {}), (958, {'res': '$classes958.7'}), (960, {'res': '$const960.8'}), (962, {'op': '+', 'lhs': '$classes958.7', 'rhs': '$const960.8', 'res': '$binop_add962.9'}), (964, {}), (966, {'res': '$values966.10'}), (968, {'item': '$values966.10', 'res': '$968load_attr.11'}), (970, {}), (972, {}), (974, {}), (976, {}), (980, {}), (982, {}), (984, {'func': '$948load_attr.6', 'args': ['$binop_add962.9', '$968load_attr.11'], 'kw_names': 2, 'res': '$984call.12'}), (986, {}), (988, {}), (990, {}), (992, {}), (994, {'value': '$984call.12'}), (996, {'res': '$values996.13'}), (998, {'idx': 0, 'res': '$998load_global.14'}), (1000, {}), (1002, {}), (1004, {}), (1006, {}), (1008, {}), (1010, {'res': '$values1010.16'}), (1012, {}), (1014, {}), (1016, {'func': '$998load_global.14', 'args': ['$values1010.16'], 'kw_names': None, 'res': '$1016call.17'}), (1018, {}), (1020, {}), (1022, {}), (1024, {}), (1026, {'res': '$const1026.18'}), (1028, {'op': '-', 'lhs': '$1016call.17', 'rhs': '$const1026.18', 'res': '$binop_sub1028.19'}), (1030, {}), (1032, {'index': '$binop_sub1028.19', 'target': '$values996.13', 'res': '$1032binary_subscr.20'}), (1034, {}), (1036, {}), (1038, {}), (1040, {}), (1042, {'res': '$kclass1042.21'}), (1044, {'res': '$classes1044.22'}), (1046, {'target': '$kclass1042.21', 'index': '$classes1044.22', 'value': '$1032binary_subscr.20'}), (1048, {}), (1050, {'res': '$values1050.23'}), (1052, {'res': '$const1052.24'}), (1054, {'index': '$const1052.24', 'target': '$values1050.23', 'res': '$1054binary_subscr.25'}), (1056, {}), (1058, {}), (1060, {}), (1062, {}), (1064, {'res': '$kclass1064.26'}), (1066, {'res': '$const1066.27'}), (1068, {'target': '$kclass1064.26', 'index': '$const1066.27', 'value': '$1054binary_subscr.25'}), (1070, {}), (1072, {'idx': 6, 'res': '$1072load_global.28'}), (1074, {}), (1076, {}), (1078, {}), (1080, {}), (1082, {}), (1084, {'res': '$classes1084.30'}), (1086, {'res': '$const1086.31'}), (1088, {'res': '$const1088.32'}), (1090, {}), (1092, {}), (1094, {'func': '$1072load_global.28', 'args': ['$classes1084.30', '$const1086.31', '$const1088.32'], 'kw_names': None, 'res': '$1094call.33'}), (1096, {}), (1098, {}), (1100, {}), (1102, {}), (1104, {'value': '$1094call.33', 'res': '$1104get_iter.34'})), outgoing_phis={'$phi1106.0': '$1104get_iter.34'}, blockstack=(), active_try_block=None, outgoing_edgepushed={1106: ('$1104get_iter.34',)})
2024-07-16 10:44:44,810 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=1106 nstack_initial=1):
AdaptBlockInfo(insts=((1106, {'iterator': '$phi1106.0', 'pair': '$1106for_iter.1', 'indval': '$1106for_iter.2', 'pred': '$1106for_iter.3'}),), outgoing_phis={'$phi1108.1': '$1106for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={1232: (), 1108: ('$phi1106.0', '$1106for_iter.2')})
2024-07-16 10:44:44,810 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=1108 nstack_initial=2):
AdaptBlockInfo(insts=((1108, {'value': '$phi1108.1'}), (1110, {'res': '$mat11110.2'}), (1112, {'res': '$k1112.3'}), (1114, {'res': '$countNum1114.4'}), (1116, {'items': ['$k1112.3', '$countNum1114.4'], 'res': '$1116build_tuple.5'}), (1118, {'index': '$1116build_tuple.5', 'target': '$mat11110.2', 'res': '$1118binary_subscr.6'}), (1120, {}), (1122, {}), (1124, {}), (1126, {}), (1128, {'value': '$1118binary_subscr.6'}), (1130, {'idx': 8, 'res': '$1130load_global.7'}), (1132, {}), (1134, {}), (1136, {}), (1138, {}), (1140, {}), (1142, {'res': '$pivot1142.9'}), (1144, {'res': '$const1144.10'}), (1146, {'op': '-', 'lhs': '$pivot1142.9', 'rhs': '$const1144.10', 'res': '$binop_sub1146.11'}), (1148, {}), (1150, {}), (1152, {}), (1154, {'func': '$1130load_global.7', 'args': ['$binop_sub1146.11'], 'kw_names': None, 'res': '$1154call.12'}), (1156, {}), (1158, {}), (1160, {}), (1162, {}), (1164, {'value': '$1154call.12'}), (1166, {'res': '$values1166.13'}), (1168, {'res': '$_id1168.14'}), (1170, {'index': '$_id1168.14', 'target': '$values1166.13', 'res': '$1170binary_subscr.15'}), (1172, {}), (1174, {}), (1176, {}), (1178, {}), (1180, {'res': '$kclass1180.16'}), (1182, {'res': '$countNum1182.17'}), (1184, {'res': '$const1184.18'}), (1186, {'op': '-', 'lhs': '$countNum1182.17', 'rhs': '$const1184.18', 'res': '$binop_sub1186.19'}), (1188, {}), (1190, {'target': '$kclass1180.16', 'index': '$binop_sub1186.19', 'value': '$1170binary_subscr.15'}), (1192, {}), (1194, {'idx': 8, 'res': '$1194load_global.20'}), (1196, {}), (1198, {}), (1200, {}), (1202, {}), (1204, {}), (1206, {'res': '$pivot1206.22'}), (1208, {'res': '$const1208.23'}), (1210, {'op': '-', 'lhs': '$pivot1206.22', 'rhs': '$const1208.23', 'res': '$binop_sub1210.24'}), (1212, {}), (1214, {}), (1216, {}), (1218, {'func': '$1194load_global.20', 'args': ['$binop_sub1210.24'], 'kw_names': None, 'res': '$1218call.25'}), (1220, {}), (1222, {}), (1224, {}), (1226, {}), (1228, {'value': '$1218call.25'}), (1230, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1106: ('$phi1108.0',)})
2024-07-16 10:44:44,810 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=1232 nstack_initial=0):
AdaptBlockInfo(insts=((1232, {'idx': 1, 'res': '$1232load_global.0'}), (1234, {}), (1236, {}), (1238, {}), (1240, {}), (1242, {}), (1244, {'item': '$1232load_global.0', 'res': '$1244load_attr.2'}), (1246, {}), (1248, {}), (1250, {}), (1252, {}), (1254, {'res': '$kclass1254.3'}), (1256, {'res': '$const1256.4'}), (1258, {}), (1260, {}), (1262, {'func': '$1244load_attr.2', 'args': ['$kclass1254.3', '$const1256.4'], 'kw_names': None, 'res': '$1262call.5'}), (1264, {}), (1266, {}), (1268, {}), (1270, {}), (1272, {'retval': '$1262call.5', 'castval': '$1272return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:44,819 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    values = arg(0, name=values)             ['values']
    classes = arg(1, name=classes)           ['classes']
    $4load_global.0 = global(len: <built-in function len>) ['$4load_global.0']
    n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.0', 'n_data', 'values']
    $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$34load_global.4']
    $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros) ['$34load_global.4', '$46load_attr.6']
    $const58.8 = const(int, 1)               ['$const58.8']
    $binop_add60.9 = n_data + $const58.8     ['$binop_add60.9', '$const58.8', 'n_data']
    $const66.11 = const(int, 1)              ['$const66.11']
    $binop_add68.12 = classes + $const66.11  ['$binop_add68.12', '$const66.11', 'classes']
    $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)]) ['$72build_tuple.13', '$binop_add60.9', '$binop_add68.12']
    $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$74load_global.14']
    $86load_attr.15 = getattr(value=$74load_global.14, attr=int32) ['$74load_global.14', '$86load_attr.15']
    mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None) ['$46load_attr.6', '$72build_tuple.13', '$86load_attr.15', 'mat1']
    $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$114load_global.17']
    $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros) ['$114load_global.17', '$126load_attr.19']
    $const138.21 = const(int, 1)             ['$const138.21']
    $binop_add140.22 = n_data + $const138.21 ['$binop_add140.22', '$const138.21', 'n_data']
    $const146.24 = const(int, 1)             ['$const146.24']
    $binop_add148.25 = classes + $const146.24 ['$binop_add148.25', '$const146.24', 'classes']
    $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)]) ['$152build_tuple.26', '$binop_add140.22', '$binop_add148.25']
    $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$154load_global.27']
    $166load_attr.28 = getattr(value=$154load_global.27, attr=float32) ['$154load_global.27', '$166load_attr.28']
    mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None) ['$126load_attr.19', '$152build_tuple.26', '$166load_attr.28', 'mat2']
    $const194.30 = const(int, 1)             ['$const194.30']
    $const198.32 = const(int, 1)             ['$const198.32']
    $const200.33 = const(int, 1)             ['$const200.33']
    $const202.34 = const(NoneType, None)     ['$const202.34']
    $204build_slice.35 = global(slice: <class 'slice'>) ['$204build_slice.35']
    $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None) ['$204build_slice.35', '$204build_slice.36', '$const200.33', '$const202.34']
    $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)]) ['$204build_slice.36', '$206build_tuple.37', '$const198.32']
    mat1[$206build_tuple.37] = $const194.30  ['$206build_tuple.37', '$const194.30', 'mat1']
    $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$212load_global.38']
    $224load_attr.39 = getattr(value=$212load_global.38, attr=inf) ['$212load_global.38', '$224load_attr.39']
    $const236.41 = const(int, 2)             ['$const236.41']
    $const238.42 = const(NoneType, None)     ['$const238.42']
    $240build_slice.43 = global(slice: <class 'slice'>) ['$240build_slice.43']
    $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None) ['$240build_slice.43', '$240build_slice.44', '$const236.41', '$const238.42']
    $const242.45 = const(int, 1)             ['$const242.45']
    $const244.46 = const(NoneType, None)     ['$const244.46']
    $246build_slice.47 = global(slice: <class 'slice'>) ['$246build_slice.47']
    $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None) ['$246build_slice.47', '$246build_slice.48', '$const242.45', '$const244.46']
    $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)]) ['$240build_slice.44', '$246build_slice.48', '$248build_tuple.49']
    mat2[$248build_tuple.49] = $224load_attr.39 ['$224load_attr.39', '$248build_tuple.49', 'mat2']
    $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$254load_global.50']
    $266load_attr.52 = getattr(value=$254load_global.50, attr=float32) ['$254load_global.50', '$266load_attr.52']
    $const276.53 = const(int, 0)             ['$const276.53']
    v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None) ['$266load_attr.52', '$const276.53', 'v']
    $294load_global.55 = global(range: <class 'range'>) ['$294load_global.55']
    $const306.57 = const(int, 2)             ['$const306.57']
    $308load_global.58 = global(len: <built-in function len>) ['$308load_global.58']
    $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None) ['$308load_global.58', '$326call.61', 'values']
    $const336.62 = const(int, 1)             ['$const336.62']
    $binop_add338.63 = $326call.61 + $const336.62 ['$326call.61', '$binop_add338.63', '$const336.62']
    $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None) ['$294load_global.55', '$346call.64', '$binop_add338.63', '$const306.57']
    $356get_iter.65 = getiter(value=$346call.64) ['$346call.64', '$356get_iter.65']
    $phi360.0 = $356get_iter.65              ['$356get_iter.65', '$phi360.0']
    jump 358                                 []
label 358:
    jump 360                                 []
label 360:
    $360for_iter.1 = iternext(value=$phi360.0) ['$360for_iter.1', '$phi360.0']
    $360for_iter.2 = pair_first(value=$360for_iter.1) ['$360for_iter.1', '$360for_iter.2']
    $360for_iter.3 = pair_second(value=$360for_iter.1) ['$360for_iter.1', '$360for_iter.3']
    $phi362.1 = $360for_iter.2               ['$360for_iter.2', '$phi362.1']
    branch $360for_iter.3, 362, 906          ['$360for_iter.3']
label 362:
    _l = $phi362.1                           ['$phi362.1', '_l']
    $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$364load_global.2']
    $376load_attr.4 = getattr(value=$364load_global.2, attr=float32) ['$364load_global.2', '$376load_attr.4']
    $const386.5 = const(int, 0)              ['$const386.5']
    s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None) ['$376load_attr.4', '$const386.5', 's1']
    $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$404load_global.7']
    $416load_attr.9 = getattr(value=$404load_global.7, attr=float32) ['$404load_global.7', '$416load_attr.9']
    $const426.10 = const(int, 0)             ['$const426.10']
    s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None) ['$416load_attr.9', '$const426.10', 's2']
    $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$444load_global.12']
    $456load_attr.14 = getattr(value=$444load_global.12, attr=float32) ['$444load_global.12', '$456load_attr.14']
    $const466.15 = const(int, 0)             ['$const466.15']
    w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None) ['$456load_attr.14', '$const466.15', 'w']
    $484load_global.17 = global(range: <class 'range'>) ['$484load_global.17']
    $const496.19 = const(int, 1)             ['$const496.19']
    $const500.21 = const(int, 1)             ['$const500.21']
    $binop_add502.22 = _l + $const500.21     ['$binop_add502.22', '$const500.21', '_l']
    $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None) ['$484load_global.17', '$510call.23', '$binop_add502.22', '$const496.19']
    $520get_iter.24 = getiter(value=$510call.23) ['$510call.23', '$520get_iter.24']
    $phi522.1 = $520get_iter.24              ['$520get_iter.24', '$phi522.1']
    jump 522                                 []
label 522:
    $522for_iter.2 = iternext(value=$phi522.1) ['$522for_iter.2', '$phi522.1']
    $522for_iter.3 = pair_first(value=$522for_iter.2) ['$522for_iter.2', '$522for_iter.3']
    $522for_iter.4 = pair_second(value=$522for_iter.2) ['$522for_iter.2', '$522for_iter.4']
    $phi524.2 = $522for_iter.3               ['$522for_iter.3', '$phi524.2']
    branch $522for_iter.4, 524, 874          ['$522for_iter.4']
label 524:
    m = $phi524.2                            ['$phi524.2', 'm']
    $binop_sub530.5 = _l - m                 ['$binop_sub530.5', '_l', 'm']
    $const534.6 = const(int, 1)              ['$const534.6']
    i3 = $binop_sub530.5 + $const534.6       ['$binop_sub530.5', '$const534.6', 'i3']
    $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$542load_global.8']
    $554load_attr.10 = getattr(value=$542load_global.8, attr=float32) ['$542load_global.8', '$554load_attr.10']
    $const568.13 = const(int, 1)             ['$const568.13']
    $binop_sub570.14 = i3 - $const568.13     ['$binop_sub570.14', '$const568.13', 'i3']
    $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>) ['$574binary_subscr.15', '$binop_sub570.14', 'values']
    val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None) ['$554load_attr.10', '$574binary_subscr.15', 'val']
    $binop_mul606.20 = val * val             ['$binop_mul606.20', 'val', 'val']
    $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd610.21', '$binop_mul606.20', 's2']
    s2 = $binop_iadd610.21                   ['$binop_iadd610.21', 's2']
    $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd620.24', 's1', 'val']
    s1 = $binop_iadd620.24                   ['$binop_iadd620.24', 's1']
    $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$628load_global.26']
    $640load_attr.28 = getattr(value=$628load_global.26, attr=float32) ['$628load_global.26', '$640load_attr.28']
    $const650.29 = const(int, 1)             ['$const650.29']
    $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None) ['$640load_attr.28', '$656call.30', '$const650.29']
    $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined) ['$656call.30', '$binop_iadd666.31', 'w']
    w = $binop_iadd666.31                    ['$binop_iadd666.31', 'w']
    $binop_mul678.35 = s1 * s1               ['$binop_mul678.35', 's1', 's1']
    $binop_truediv684.37 = $binop_mul678.35 / w ['$binop_mul678.35', '$binop_truediv684.37', 'w']
    v = s2 - $binop_truediv684.37            ['$binop_truediv684.37', 's2', 'v']
    $const696.40 = const(int, 1)             ['$const696.40']
    i4 = i3 - $const696.40                   ['$const696.40', 'i3', 'i4']
    $const706.43 = const(int, 0)             ['$const706.43']
    $708compare_op.44 = i4 != $const706.43   ['$708compare_op.44', '$const706.43', 'i4']
    bool714 = global(bool: <class 'bool'>)   ['bool714']
    $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None) ['$708compare_op.44', '$714pred', 'bool714']
    branch $714pred, 716, 872                ['$714pred']
label 716:
    $716load_global.2 = global(range: <class 'range'>) ['$716load_global.2']
    $const728.4 = const(int, 2)              ['$const728.4']
    $const732.6 = const(int, 1)              ['$const732.6']
    $binop_add734.7 = classes + $const732.6  ['$binop_add734.7', '$const732.6', 'classes']
    $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None) ['$716load_global.2', '$742call.8', '$binop_add734.7', '$const728.4']
    $752get_iter.9 = getiter(value=$742call.8) ['$742call.8', '$752get_iter.9']
    $phi754.2 = $752get_iter.9               ['$752get_iter.9', '$phi754.2']
    jump 754                                 []
label 754:
    $754for_iter.3 = iternext(value=$phi754.2) ['$754for_iter.3', '$phi754.2']
    $754for_iter.4 = pair_first(value=$754for_iter.3) ['$754for_iter.3', '$754for_iter.4']
    $754for_iter.5 = pair_second(value=$754for_iter.3) ['$754for_iter.3', '$754for_iter.5']
    $phi756.3 = $754for_iter.4               ['$754for_iter.4', '$phi756.3']
    branch $754for_iter.5, 756, 872          ['$754for_iter.5']
label 756:
    j = $phi756.3                            ['$phi756.3', 'j']
    $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)]) ['$764build_tuple.7', '_l', 'j']
    $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>) ['$764build_tuple.7', '$766binary_subscr.8', 'mat2']
    $const784.13 = const(int, 1)             ['$const784.13']
    $binop_sub786.14 = j - $const784.13      ['$binop_sub786.14', '$const784.13', 'j']
    $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)]) ['$790build_tuple.15', '$binop_sub786.14', 'i4']
    $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>) ['$790build_tuple.15', '$792binary_subscr.16', 'mat2']
    $binop_add802.17 = v + $792binary_subscr.16 ['$792binary_subscr.16', '$binop_add802.17', 'v']
    $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17 ['$766binary_subscr.8', '$806compare_op.18', '$binop_add802.17']
    bool812 = global(bool: <class 'bool'>)   ['bool812']
    $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None) ['$806compare_op.18', '$812pred', 'bool812']
    branch $812pred, 814, 870                ['$812pred']
label 814:
    $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)]) ['$822build_tuple.7', '_l', 'j']
    mat1[$822build_tuple.7] = i3             ['$822build_tuple.7', 'i3', 'mat1']
    $const836.12 = const(int, 1)             ['$const836.12']
    $binop_sub838.13 = j - $const836.12      ['$binop_sub838.13', '$const836.12', 'j']
    $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)]) ['$842build_tuple.14', '$binop_sub838.13', 'i4']
    $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>) ['$842build_tuple.14', '$844binary_subscr.15', 'mat2']
    $binop_add854.16 = v + $844binary_subscr.15 ['$844binary_subscr.15', '$binop_add854.16', 'v']
    $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)]) ['$864build_tuple.20', '_l', 'j']
    mat2[$864build_tuple.20] = $binop_add854.16 ['$864build_tuple.20', '$binop_add854.16', 'mat2']
    jump 870                                 []
label 870:
    jump 754                                 []
label 872:
    jump 522                                 []
label 874:
    $const874.1 = const(int, 1)              ['$const874.1']
    $const880.4 = const(int, 1)              ['$const880.4']
    $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)]) ['$882build_tuple.5', '$const880.4', '_l']
    mat1[$882build_tuple.5] = $const874.1    ['$882build_tuple.5', '$const874.1', 'mat1']
    $const894.9 = const(int, 1)              ['$const894.9']
    $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)]) ['$896build_tuple.10', '$const894.9', '_l']
    mat2[$896build_tuple.10] = v             ['$896build_tuple.10', 'mat2', 'v']
    jump 358                                 []
label 906:
    $906load_global.0 = global(len: <built-in function len>) ['$906load_global.0']
    k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None) ['$906load_global.0', 'k', 'values']
    $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$936load_global.4']
    $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros) ['$936load_global.4', '$948load_attr.6']
    $const960.8 = const(int, 1)              ['$const960.8']
    $binop_add962.9 = classes + $const960.8  ['$binop_add962.9', '$const960.8', 'classes']
    $968load_attr.11 = getattr(value=values, attr=dtype) ['$968load_attr.11', 'values']
    kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None) ['$948load_attr.6', '$968load_attr.11', '$binop_add962.9', 'kclass']
    $998load_global.14 = global(len: <built-in function len>) ['$998load_global.14']
    $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None) ['$1016call.17', '$998load_global.14', 'values']
    $const1026.18 = const(int, 1)            ['$const1026.18']
    $binop_sub1028.19 = $1016call.17 - $const1026.18 ['$1016call.17', '$binop_sub1028.19', '$const1026.18']
    $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>) ['$1032binary_subscr.20', '$binop_sub1028.19', 'values']
    kclass[classes] = $1032binary_subscr.20  ['$1032binary_subscr.20', 'classes', 'kclass']
    $const1052.24 = const(int, 0)            ['$const1052.24']
    $1054binary_subscr.25 = getitem(value=values, index=$const1052.24, fn=<built-in function getitem>) ['$1054binary_subscr.25', '$const1052.24', 'values']
    $const1066.27 = const(int, 0)            ['$const1066.27']
    kclass[$const1066.27] = $1054binary_subscr.25 ['$1054binary_subscr.25', '$const1066.27', 'kclass']
    $1072load_global.28 = global(range: <class 'range'>) ['$1072load_global.28']
    $const1086.31 = const(int, 1)            ['$const1086.31']
    $const1088.32 = const(int, -1)           ['$const1088.32']
    $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None) ['$1072load_global.28', '$1094call.33', '$const1086.31', '$const1088.32', 'classes']
    $1104get_iter.34 = getiter(value=$1094call.33) ['$1094call.33', '$1104get_iter.34']
    $phi1106.0 = $1104get_iter.34            ['$1104get_iter.34', '$phi1106.0']
    jump 1106                                []
label 1106:
    $1106for_iter.1 = iternext(value=$phi1106.0) ['$1106for_iter.1', '$phi1106.0']
    $1106for_iter.2 = pair_first(value=$1106for_iter.1) ['$1106for_iter.1', '$1106for_iter.2']
    $1106for_iter.3 = pair_second(value=$1106for_iter.1) ['$1106for_iter.1', '$1106for_iter.3']
    $phi1108.1 = $1106for_iter.2             ['$1106for_iter.2', '$phi1108.1']
    branch $1106for_iter.3, 1108, 1232       ['$1106for_iter.3']
label 1108:
    countNum = $phi1108.1                    ['$phi1108.1', 'countNum']
    $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)]) ['$1116build_tuple.5', 'countNum', 'k']
    pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>) ['$1116build_tuple.5', 'mat1', 'pivot']
    $1130load_global.7 = global(int: <class 'int'>) ['$1130load_global.7']
    $const1144.10 = const(int, 2)            ['$const1144.10']
    $binop_sub1146.11 = pivot - $const1144.10 ['$binop_sub1146.11', '$const1144.10', 'pivot']
    _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None) ['$1130load_global.7', '$binop_sub1146.11', '_id']
    $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>) ['$1170binary_subscr.15', '_id', 'values']
    $const1184.18 = const(int, 1)            ['$const1184.18']
    $binop_sub1186.19 = countNum - $const1184.18 ['$binop_sub1186.19', '$const1184.18', 'countNum']
    kclass[$binop_sub1186.19] = $1170binary_subscr.15 ['$1170binary_subscr.15', '$binop_sub1186.19', 'kclass']
    $1194load_global.20 = global(int: <class 'int'>) ['$1194load_global.20']
    $const1208.23 = const(int, 1)            ['$const1208.23']
    $binop_sub1210.24 = pivot - $const1208.23 ['$binop_sub1210.24', '$const1208.23', 'pivot']
    k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None) ['$1194load_global.20', '$binop_sub1210.24', 'k']
    jump 1106                                []
label 1232:
    $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$1232load_global.0']
    $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete) ['$1232load_global.0', '$1244load_attr.2']
    $const1256.4 = const(int, 0)             ['$const1256.4']
    $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None) ['$1244load_attr.2', '$1262call.5', '$const1256.4', 'kclass']
    $1272return_value.6 = cast(value=$1262call.5) ['$1262call.5', '$1272return_value.6']
    return $1272return_value.6               ['$1272return_value.6']

2024-07-16 10:44:44,910 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:44,910 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,910 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:44,910 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:44,910 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:44,910 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,910 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,916 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:44,916 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:44,916 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:44,916 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:44,916 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:44,916 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:44,917 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,917 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:44,917 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,917 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,917 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:44,918 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:44,919 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:44,919 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,919 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,919 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 358
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 360
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 362
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 522
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 524
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = $binop_iadd666.31
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 716
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,920 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:44,933 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:44,933 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:44,933 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:44,933 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,933 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:44,933 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:44,933 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:44,933 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 754
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 756
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:44,934 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 814
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 870
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 872
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 874
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 906
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 1106
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 1108
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 1232
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263764ECF90>
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:44,936 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:44,954 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$1016call.17': [(<numba.core.ir.Assign object at 0x00000263764A2410>,
                               906)],
             '$1032binary_subscr.20': [(<numba.core.ir.Assign object at 0x00000263764A28D0>,
                                        906)],
             '$1054binary_subscr.25': [(<numba.core.ir.Assign object at 0x0000026374CD20D0>,
                                        906)],
             '$1072load_global.28': [(<numba.core.ir.Assign object at 0x00000263764A3850>,
                                      906)],
             '$1094call.33': [(<numba.core.ir.Assign object at 0x00000263764A3F10>,
                               906)],
             '$1104get_iter.34': [(<numba.core.ir.Assign object at 0x00000263764A8150>,
                                   906)],
             '$1106for_iter.1': [(<numba.core.ir.Assign object at 0x00000263764A81D0>,
                                  1106)],
             '$1106for_iter.2': [(<numba.core.ir.Assign object at 0x00000263764A8350>,
                                  1106)],
             '$1106for_iter.3': [(<numba.core.ir.Assign object at 0x00000263764A84D0>,
                                  1106)],
             '$1116build_tuple.5': [(<numba.core.ir.Assign object at 0x00000263764A8E90>,
                                     1108)],
             '$1130load_global.7': [(<numba.core.ir.Assign object at 0x00000263764A9390>,
                                     1108)],
             '$114load_global.17': [(<numba.core.ir.Assign object at 0x0000026376472690>,
                                     0)],
             '$1170binary_subscr.15': [(<numba.core.ir.Assign object at 0x00000263764AA1D0>,
                                        1108)],
             '$1194load_global.20': [(<numba.core.ir.Assign object at 0x00000263764AAA90>,
                                      1108)],
             '$1232load_global.0': [(<numba.core.ir.Assign object at 0x00000263764A9FD0>,
                                     1232)],
             '$1244load_attr.2': [(<numba.core.ir.Assign object at 0x00000263764AB410>,
                                   1232)],
             '$1262call.5': [(<numba.core.ir.Assign object at 0x00000263764AB910>,
                              1232)],
             '$126load_attr.19': [(<numba.core.ir.Assign object at 0x0000026376472790>,
                                   0)],
             '$1272return_value.6': [(<numba.core.ir.Assign object at 0x00000263764ABB50>,
                                      1232)],
             '$152build_tuple.26': [(<numba.core.ir.Assign object at 0x0000026376473610>,
                                     0)],
             '$154load_global.27': [(<numba.core.ir.Assign object at 0x00000263764737D0>,
                                     0)],
             '$166load_attr.28': [(<numba.core.ir.Assign object at 0x0000026376473A90>,
                                   0)],
             '$204build_slice.35': [(<numba.core.ir.Assign object at 0x0000026376478A10>,
                                     0)],
             '$204build_slice.36': [(<numba.core.ir.Assign object at 0x0000026376478B90>,
                                     0)],
             '$206build_tuple.37': [(<numba.core.ir.Assign object at 0x0000026376478D50>,
                                     0)],
             '$212load_global.38': [(<numba.core.ir.Assign object at 0x0000026376478FD0>,
                                     0)],
             '$224load_attr.39': [(<numba.core.ir.Assign object at 0x0000026376479290>,
                                   0)],
             '$240build_slice.43': [(<numba.core.ir.Assign object at 0x0000026376479AD0>,
                                     0)],
             '$240build_slice.44': [(<numba.core.ir.Assign object at 0x0000026376479C50>,
                                     0)],
             '$246build_slice.47': [(<numba.core.ir.Assign object at 0x000002637647A150>,
                                     0)],
             '$246build_slice.48': [(<numba.core.ir.Assign object at 0x000002637647A2D0>,
                                     0)],
             '$248build_tuple.49': [(<numba.core.ir.Assign object at 0x000002637647A4D0>,
                                     0)],
             '$254load_global.50': [(<numba.core.ir.Assign object at 0x000002637647A750>,
                                     0)],
             '$266load_attr.52': [(<numba.core.ir.Assign object at 0x000002637647A950>,
                                   0)],
             '$294load_global.55': [(<numba.core.ir.Assign object at 0x000002637647B150>,
                                     0)],
             '$308load_global.58': [(<numba.core.ir.Assign object at 0x000002637647B4D0>,
                                     0)],
             '$326call.61': [(<numba.core.ir.Assign object at 0x000002637647B890>,
                              0)],
             '$346call.64': [(<numba.core.ir.Assign object at 0x000002637647BED0>,
                              0)],
             '$34load_global.4': [(<numba.core.ir.Assign object at 0x000002637644BD10>,
                                   0)],
             '$356get_iter.65': [(<numba.core.ir.Assign object at 0x00000263764841D0>,
                                  0)],
             '$360for_iter.1': [(<numba.core.ir.Assign object at 0x0000026376484310>,
                                 360)],
             '$360for_iter.2': [(<numba.core.ir.Assign object at 0x0000026376484490>,
                                 360)],
             '$360for_iter.3': [(<numba.core.ir.Assign object at 0x0000026376484610>,
                                 360)],
             '$364load_global.2': [(<numba.core.ir.Assign object at 0x0000026376484A90>,
                                    362)],
             '$376load_attr.4': [(<numba.core.ir.Assign object at 0x0000026376484D50>,
                                  362)],
             '$404load_global.7': [(<numba.core.ir.Assign object at 0x0000026376485690>,
                                    362)],
             '$416load_attr.9': [(<numba.core.ir.Assign object at 0x0000026376485A10>,
                                  362)],
             '$444load_global.12': [(<numba.core.ir.Assign object at 0x0000026376486350>,
                                     362)],
             '$456load_attr.14': [(<numba.core.ir.Assign object at 0x00000263764866D0>,
                                   362)],
             '$46load_attr.6': [(<numba.core.ir.Assign object at 0x0000026376406FD0>,
                                 0)],
             '$484load_global.17': [(<numba.core.ir.Assign object at 0x0000026376486F90>,
                                     362)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x00000263764540D0>,
                                  0)],
             '$510call.23': [(<numba.core.ir.Assign object at 0x0000026376487A90>,
                              362)],
             '$520get_iter.24': [(<numba.core.ir.Assign object at 0x0000026376487D90>,
                                  362)],
             '$522for_iter.2': [(<numba.core.ir.Assign object at 0x000002637648C050>,
                                 522)],
             '$522for_iter.3': [(<numba.core.ir.Assign object at 0x000002637648C1D0>,
                                 522)],
             '$522for_iter.4': [(<numba.core.ir.Assign object at 0x000002637648C350>,
                                 522)],
             '$542load_global.8': [(<numba.core.ir.Assign object at 0x000002637648D2D0>,
                                    524)],
             '$554load_attr.10': [(<numba.core.ir.Assign object at 0x000002637648D4D0>,
                                   524)],
             '$574binary_subscr.15': [(<numba.core.ir.Assign object at 0x000002637648DDD0>,
                                       524)],
             '$628load_global.26': [(<numba.core.ir.Assign object at 0x000002637648F610>,
                                     524)],
             '$640load_attr.28': [(<numba.core.ir.Assign object at 0x000002637648F8D0>,
                                   524)],
             '$656call.30': [(<numba.core.ir.Assign object at 0x000002637648FD50>,
                              524)],
             '$708compare_op.44': [(<numba.core.ir.Assign object at 0x0000026376491B90>,
                                    524)],
             '$714pred': [(<numba.core.ir.Assign object at 0x0000026376491F90>,
                           524)],
             '$716load_global.2': [(<numba.core.ir.Assign object at 0x000002637648E610>,
                                    716)],
             '$72build_tuple.13': [(<numba.core.ir.Assign object at 0x0000026376469290>,
                                    0)],
             '$742call.8': [(<numba.core.ir.Assign object at 0x0000026376492550>,
                             716)],
             '$74load_global.14': [(<numba.core.ir.Assign object at 0x000002637645CA50>,
                                    0)],
             '$752get_iter.9': [(<numba.core.ir.Assign object at 0x0000026376492790>,
                                 716)],
             '$754for_iter.3': [(<numba.core.ir.Assign object at 0x0000026376492B10>,
                                 754)],
             '$754for_iter.4': [(<numba.core.ir.Assign object at 0x0000026376492C90>,
                                 754)],
             '$754for_iter.5': [(<numba.core.ir.Assign object at 0x0000026376492E10>,
                                 754)],
             '$764build_tuple.7': [(<numba.core.ir.Assign object at 0x0000026376493810>,
                                    756)],
             '$766binary_subscr.8': [(<numba.core.ir.Assign object at 0x0000026376493A50>,
                                      756)],
             '$790build_tuple.15': [(<numba.core.ir.Assign object at 0x0000026376498690>,
                                     756)],
             '$792binary_subscr.16': [(<numba.core.ir.Assign object at 0x0000026376498850>,
                                       756)],
             '$806compare_op.18': [(<numba.core.ir.Assign object at 0x0000026376498D90>,
                                    756)],
             '$812pred': [(<numba.core.ir.Assign object at 0x0000026376499150>,
                           756)],
             '$822build_tuple.7': [(<numba.core.ir.Assign object at 0x0000026376499950>,
                                    814)],
             '$842build_tuple.14': [(<numba.core.ir.Assign object at 0x000002637649A650>,
                                     814)],
             '$844binary_subscr.15': [(<numba.core.ir.Assign object at 0x000002637649A850>,
                                       814)],
             '$864build_tuple.20': [(<numba.core.ir.Assign object at 0x000002637649B190>,
                                     814)],
             '$86load_attr.15': [(<numba.core.ir.Assign object at 0x0000026374CD3B10>,
                                  0)],
             '$882build_tuple.5': [(<numba.core.ir.Assign object at 0x000002637649BB10>,
                                    874)],
             '$896build_tuple.10': [(<numba.core.ir.Assign object at 0x00000263764A0450>,
                                     874)],
             '$906load_global.0': [(<numba.core.ir.Assign object at 0x00000263764A0790>,
                                    906)],
             '$936load_global.4': [(<numba.core.ir.Assign object at 0x00000263764A0E10>,
                                    906)],
             '$948load_attr.6': [(<numba.core.ir.Assign object at 0x00000263764A1050>,
                                  906)],
             '$968load_attr.11': [(<numba.core.ir.Assign object at 0x00000263764A1910>,
                                   906)],
             '$998load_global.14': [(<numba.core.ir.Assign object at 0x00000263764A2010>,
                                     906)],
             '$binop_add140.22': [(<numba.core.ir.Assign object at 0x0000026376472DD0>,
                                   0)],
             '$binop_add148.25': [(<numba.core.ir.Assign object at 0x0000026376473390>,
                                   0)],
             '$binop_add338.63': [(<numba.core.ir.Assign object at 0x000002637647BC10>,
                                   0)],
             '$binop_add502.22': [(<numba.core.ir.Assign object at 0x0000026376487790>,
                                   362)],
             '$binop_add60.9': [(<numba.core.ir.Assign object at 0x0000026376460890>,
                                 0)],
             '$binop_add68.12': [(<numba.core.ir.Assign object at 0x0000026376460710>,
                                  0)],
             '$binop_add734.7': [(<numba.core.ir.Assign object at 0x0000026376492310>,
                                  716)],
             '$binop_add802.17': [(<numba.core.ir.Assign object at 0x0000026376498B10>,
                                   756)],
             '$binop_add854.16': [(<numba.core.ir.Assign object at 0x000002637649AB50>,
                                   814)],
             '$binop_add962.9': [(<numba.core.ir.Assign object at 0x00000263764A15D0>,
                                  906)],
             '$binop_iadd610.21': [(<numba.core.ir.Assign object at 0x000002637648EB90>,
                                    524)],
             '$binop_iadd620.24': [(<numba.core.ir.Assign object at 0x000002637648F190>,
                                    524)],
             '$binop_iadd666.31': [(<numba.core.ir.Assign object at 0x000002637648FFD0>,
                                    524)],
             '$binop_mul606.20': [(<numba.core.ir.Assign object at 0x000002637648E9D0>,
                                   524)],
             '$binop_mul678.35': [(<numba.core.ir.Assign object at 0x0000026376490790>,
                                   524)],
             '$binop_sub1028.19': [(<numba.core.ir.Assign object at 0x00000263764A2790>,
                                    906)],
             '$binop_sub1146.11': [(<numba.core.ir.Assign object at 0x00000263764A9890>,
                                    1108)],
             '$binop_sub1186.19': [(<numba.core.ir.Assign object at 0x00000263764AA850>,
                                    1108)],
             '$binop_sub1210.24': [(<numba.core.ir.Assign object at 0x00000263764AAF90>,
                                    1108)],
             '$binop_sub530.5': [(<numba.core.ir.Assign object at 0x000002637648CC50>,
                                  524)],
             '$binop_sub570.14': [(<numba.core.ir.Assign object at 0x000002637648DB90>,
                                   524)],
             '$binop_sub786.14': [(<numba.core.ir.Assign object at 0x0000026376498450>,
                                   756)],
             '$binop_sub838.13': [(<numba.core.ir.Assign object at 0x000002637649A410>,
                                   814)],
             '$binop_truediv684.37': [(<numba.core.ir.Assign object at 0x0000026376490BD0>,
                                       524)],
             '$const1026.18': [(<numba.core.ir.Assign object at 0x00000263764A2590>,
                                906)],
             '$const1052.24': [(<numba.core.ir.Assign object at 0x00000263764A3090>,
                                906)],
             '$const1066.27': [(<numba.core.ir.Assign object at 0x00000263764A35D0>,
                                906)],
             '$const1086.31': [(<numba.core.ir.Assign object at 0x00000263764A3B50>,
                                906)],
             '$const1088.32': [(<numba.core.ir.Assign object at 0x00000263764A3CD0>,
                                906)],
             '$const1144.10': [(<numba.core.ir.Assign object at 0x00000263764A9690>,
                                1108)],
             '$const1184.18': [(<numba.core.ir.Assign object at 0x00000263764AA650>,
                                1108)],
             '$const1208.23': [(<numba.core.ir.Assign object at 0x00000263764AAD90>,
                                1108)],
             '$const1256.4': [(<numba.core.ir.Assign object at 0x00000263764AB710>,
                               1232)],
             '$const138.21': [(<numba.core.ir.Assign object at 0x0000026376472BD0>,
                               0)],
             '$const146.24': [(<numba.core.ir.Assign object at 0x0000026376473190>,
                               0)],
             '$const194.30': [(<numba.core.ir.Assign object at 0x0000026376478150>,
                               0)],
             '$const198.32': [(<numba.core.ir.Assign object at 0x00000263764784D0>,
                               0)],
             '$const200.33': [(<numba.core.ir.Assign object at 0x0000026376478650>,
                               0)],
             '$const202.34': [(<numba.core.ir.Assign object at 0x0000026376478810>,
                               0)],
             '$const236.41': [(<numba.core.ir.Assign object at 0x0000026376479710>,
                               0)],
             '$const238.42': [(<numba.core.ir.Assign object at 0x00000263764798D0>,
                               0)],
             '$const242.45': [(<numba.core.ir.Assign object at 0x0000026376479DD0>,
                               0)],
             '$const244.46': [(<numba.core.ir.Assign object at 0x0000026376479F90>,
                               0)],
             '$const276.53': [(<numba.core.ir.Assign object at 0x000002637647AB10>,
                               0)],
             '$const306.57': [(<numba.core.ir.Assign object at 0x000002637647B310>,
                               0)],
             '$const336.62': [(<numba.core.ir.Assign object at 0x000002637647BA10>,
                               0)],
             '$const386.5': [(<numba.core.ir.Assign object at 0x0000026376484F90>,
                              362)],
             '$const426.10': [(<numba.core.ir.Assign object at 0x0000026376485C90>,
                               362)],
             '$const466.15': [(<numba.core.ir.Assign object at 0x0000026376486990>,
                               362)],
             '$const496.19': [(<numba.core.ir.Assign object at 0x00000263764871D0>,
                               362)],
             '$const500.21': [(<numba.core.ir.Assign object at 0x0000026376487550>,
                               362)],
             '$const534.6': [(<numba.core.ir.Assign object at 0x000002637648CDD0>,
                              524)],
             '$const568.13': [(<numba.core.ir.Assign object at 0x000002637648D950>,
                               524)],
             '$const58.8': [(<numba.core.ir.Assign object at 0x0000026376463C90>,
                             0)],
             '$const650.29': [(<numba.core.ir.Assign object at 0x000002637648FB10>,
                               524)],
             '$const66.11': [(<numba.core.ir.Assign object at 0x0000026376460CD0>,
                              0)],
             '$const696.40': [(<numba.core.ir.Assign object at 0x0000026376491250>,
                               524)],
             '$const706.43': [(<numba.core.ir.Assign object at 0x0000026376491950>,
                               524)],
             '$const728.4': [(<numba.core.ir.Assign object at 0x0000026376490410>,
                              716)],
             '$const732.6': [(<numba.core.ir.Assign object at 0x0000026376492110>,
                              716)],
             '$const784.13': [(<numba.core.ir.Assign object at 0x0000026376498210>,
                               756)],
             '$const836.12': [(<numba.core.ir.Assign object at 0x000002637649A210>,
                               814)],
             '$const874.1': [(<numba.core.ir.Assign object at 0x000002637649B490>,
                              874)],
             '$const880.4': [(<numba.core.ir.Assign object at 0x000002637649B910>,
                              874)],
             '$const894.9': [(<numba.core.ir.Assign object at 0x00000263764A0250>,
                              874)],
             '$const960.8': [(<numba.core.ir.Assign object at 0x00000263764A1390>,
                              906)],
             '$phi1106.0': [(<numba.core.ir.Assign object at 0x00000263764A0C50>,
                             906)],
             '$phi1108.1': [(<numba.core.ir.Assign object at 0x00000263764A8590>,
                             1106)],
             '$phi360.0': [(<numba.core.ir.Assign object at 0x00000263764621D0>,
                            0)],
             '$phi362.1': [(<numba.core.ir.Assign object at 0x0000026376479610>,
                            360)],
             '$phi522.1': [(<numba.core.ir.Assign object at 0x0000026376485790>,
                            362)],
             '$phi524.2': [(<numba.core.ir.Assign object at 0x000002637648C410>,
                            522)],
             '$phi754.2': [(<numba.core.ir.Assign object at 0x0000026376491090>,
                            716)],
             '$phi756.3': [(<numba.core.ir.Assign object at 0x0000026376492ED0>,
                            754)],
             '_id': [(<numba.core.ir.Assign object at 0x00000263764A9AD0>,
                      1108)],
             '_l': [(<numba.core.ir.Assign object at 0x00000263764848D0>, 362)],
             'bool714': [(<numba.core.ir.Assign object at 0x0000026376491DD0>,
                          524)],
             'bool812': [(<numba.core.ir.Assign object at 0x0000026376498F90>,
                          756)],
             'classes': [(<numba.core.ir.Assign object at 0x0000026376457D10>,
                          0)],
             'countNum': [(<numba.core.ir.Assign object at 0x00000263764A8810>,
                           1108)],
             'i3': [(<numba.core.ir.Assign object at 0x000002637648D010>, 524)],
             'i4': [(<numba.core.ir.Assign object at 0x0000026376491450>, 524)],
             'j': [(<numba.core.ir.Assign object at 0x0000026376493190>, 756)],
             'k': [(<numba.core.ir.Assign object at 0x00000263764A0B10>, 906),
                   (<numba.core.ir.Assign object at 0x00000263764AB1D0>, 1108)],
             'kclass': [(<numba.core.ir.Assign object at 0x00000263764A1B50>,
                         906)],
             'm': [(<numba.core.ir.Assign object at 0x000002637648C6D0>, 524)],
             'mat1': [(<numba.core.ir.Assign object at 0x0000026376472390>, 0)],
             'mat2': [(<numba.core.ir.Assign object at 0x0000026376473D90>, 0)],
             'n_data': [(<numba.core.ir.Assign object at 0x000002637644B010>,
                         0)],
             'pivot': [(<numba.core.ir.Assign object at 0x00000263764A9090>,
                        1108)],
             's1': [(<numba.core.ir.Assign object at 0x0000026376485250>, 362),
                    (<numba.core.ir.Assign object at 0x000002637648F210>, 524)],
             's2': [(<numba.core.ir.Assign object at 0x0000026376485F10>, 362),
                    (<numba.core.ir.Assign object at 0x000002637648EC10>, 524)],
             'v': [(<numba.core.ir.Assign object at 0x000002637647AD90>, 0),
                   (<numba.core.ir.Assign object at 0x0000026376490E50>, 524)],
             'val': [(<numba.core.ir.Assign object at 0x000002637648E150>,
                      524)],
             'values': [(<numba.core.ir.Assign object at 0x0000026376457F50>,
                         0)],
             'w': [(<numba.core.ir.Assign object at 0x0000026376486C50>, 362),
                   (<numba.core.ir.Assign object at 0x0000026376490090>, 524)]})
2024-07-16 10:44:44,955 ; numba.core.ssa                                               ; DEBUG   ; SSA violators {'w', 's1', 's2', 'k', 'v'}
2024-07-16 10:44:44,956 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var w
2024-07-16 10:44:44,956 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:44,956 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,956 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:44,956 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:44,956 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:44,956 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,957 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,957 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:44,957 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:44,957 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:44,957 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:44,957 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:44,957 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:44,957 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,958 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:44,958 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,958 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,958 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:44,958 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:44,958 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:44,958 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,959 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:44,960 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:44,961 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,961 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,961 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:44,961 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:44,961 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,961 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:44,961 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:44,961 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,962 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:44,962 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:44,962 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:44,962 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,962 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:44,962 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:44,962 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,963 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:44,964 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:44,964 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:44,964 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:44,964 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:44,964 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:44,964 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:44,965 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,966 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,966 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:44,966 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:44,966 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,966 ; numba.core.ssa                                               ; DEBUG   ; first assign: w
2024-07-16 10:44:44,966 ; numba.core.ssa                                               ; DEBUG   ; replaced with: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,966 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:44,967 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,968 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:44,969 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:44,970 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,970 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:44,970 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:44,970 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:44,970 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:44,970 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,970 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:44,970 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:44,971 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = $binop_iadd666.31
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; replaced with: w.1 = $binop_iadd666.31
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:44,972 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,973 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:44,973 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:44,973 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,973 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:44,973 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:44,973 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:44,973 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:44,973 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,974 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:44,974 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:44,974 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:44,974 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:44,974 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,974 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:44,974 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:44,974 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:44,975 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:44,976 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:44,977 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:44,978 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:44,979 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:44,980 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:44,980 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:44,980 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,980 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:44,980 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,980 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:44,980 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:44,980 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:44,981 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,982 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:44,982 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:44,983 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,984 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764A8A50>
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {362: [<numba.core.ir.Assign object at 0x0000026376460690>],
             524: [<numba.core.ir.Assign object at 0x00000263764F0D50>]})
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:44,985 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:44,990 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:44,995 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:44,999 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:44,999 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:44,999 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:44,999 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,000 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,000 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,000 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,000 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,000 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,000 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,000 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,001 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def var='w' stmt=$binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 524
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 524
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 522
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; insert phi node w.2 = phi(incoming_values=[], incoming_blocks=[]) at 522
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 872
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 872
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 872
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; incoming_def w.1 = $binop_iadd666.31
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 362
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; incoming_def w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; find_def var='w' stmt=$binop_truediv684.37 = $binop_mul678.35 / w
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,002 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,006 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,007 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,007 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,007 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,007 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,008 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,009 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,009 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,009 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,009 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,010 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,012 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,016 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,017 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,017 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,017 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,017 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764AB090>
2024-07-16 10:44:45,018 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var s1
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:45,019 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:45,021 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,023 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; first assign: s1
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; replaced with: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,024 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:45,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:45,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:45,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,032 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,033 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,033 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,033 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = $binop_iadd620.24
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; replaced with: s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,034 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,035 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,035 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,035 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-07-16 10:44:45,035 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,036 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764F2790>
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,039 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,049 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {362: [<numba.core.ir.Assign object at 0x00000263764F3C50>],
             524: [<numba.core.ir.Assign object at 0x00000263764870D0>]})
2024-07-16 10:44:45,050 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:45,050 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,050 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:45,050 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:45,050 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,050 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,050 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,050 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,051 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:45,053 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; find_def var='s1' stmt=$binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 524
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 524
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 522
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; insert phi node s1.2 = phi(incoming_values=[], incoming_blocks=[]) at 522
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 872
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 872
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 872
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; incoming_def s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 362
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; incoming_def s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1.2, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,060 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,066 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1 * s1
2024-07-16 10:44:45,066 ; numba.core.ssa                                               ; DEBUG   ; find_def var='s1' stmt=$binop_mul678.35 = s1 * s1
2024-07-16 10:44:45,066 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_mul678.35 = s1.1 * s1.1
2024-07-16 10:44:45,066 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,066 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,067 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,069 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376486810>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var s2
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:45,070 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:45,082 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,084 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:45,084 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,084 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:45,084 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:45,084 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:45,084 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:45,084 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,084 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:45,085 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; first assign: s2
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; replaced with: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.2 = phi(incoming_values=[Var(s1.1, classifiers.py:615), Var(s1, classifiers.py:608)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = $binop_iadd610.21
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; replaced with: s2.1 = $binop_iadd610.21
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1.2, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1.1 * s1.1
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,086 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,099 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376485D50>
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {362: [<numba.core.ir.Assign object at 0x0000026376500150>],
             524: [<numba.core.ir.Assign object at 0x0000026376500E10>]})
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:45,100 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,111 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:45,116 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,116 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:45,116 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:45,117 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,118 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,118 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:45,118 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:45,118 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.2 = phi(incoming_values=[Var(s1.1, classifiers.py:615), Var(s1, classifiers.py:608)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def var='s2' stmt=$binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 524
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 524
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 522
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; insert phi node s2.2 = phi(incoming_values=[], incoming_blocks=[]) at 522
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 872
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 872
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 872
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; incoming_def s2.1 = $binop_iadd610.21
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 362
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; incoming_def s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2.2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.1 = $binop_iadd610.21
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1.2, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1.1 * s1.1
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2 - $binop_truediv684.37
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; find_def var='s2' stmt=v = s2 - $binop_truediv684.37
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; replaced with: v = s2.1 - $binop_truediv684.37
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,119 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,132 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,132 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,132 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,132 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,132 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,132 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,132 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,132 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var k
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,133 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,148 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.2 = phi(incoming_values=[Var(s2.1, classifiers.py:614), Var(s2, classifiers.py:609)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.2 = phi(incoming_values=[Var(s1.1, classifiers.py:615), Var(s1, classifiers.py:608)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:45,149 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2.2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.1 = $binop_iadd610.21
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1.2, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1.1 * s1.1
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2.1 - $binop_truediv684.37
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,151 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; first assign: k
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; replaced with: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,158 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,164 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; replaced with: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376457310>
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {906: [<numba.core.ir.Assign object at 0x0000026376500F90>],
             1108: [<numba.core.ir.Assign object at 0x0000026376501890>]})
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:45,166 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.2 = phi(incoming_values=[Var(s2.1, classifiers.py:614), Var(s2, classifiers.py:609)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.2 = phi(incoming_values=[Var(s1.1, classifiers.py:615), Var(s1, classifiers.py:608)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:45,170 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2.2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.1 = $binop_iadd610.21
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1.2, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,180 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1.1 * s1.1
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2.1 - $binop_truediv684.37
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,182 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; find_def var='k' stmt=$1116build_tuple.5 = build_tuple(items=[Var(k, classifiers.py:627), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 1108
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; idom 1106 from label 1108
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 1106
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 1106
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; insert phi node k.2 = phi(incoming_values=[], incoming_blocks=[]) at 1106
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 906
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; incoming_def k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 1108
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; incoming_def k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,184 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x000002637644B0D0>
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var v
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:45,196 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; first assign: v
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; replaced with: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,199 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.2 = phi(incoming_values=[Var(s2.1, classifiers.py:614), Var(s2, classifiers.py:609)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.2 = phi(incoming_values=[Var(s1.1, classifiers.py:615), Var(s1, classifiers.py:608)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2.2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.1 = $binop_iadd610.21
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1.2, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,206 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1.1 * s1.1
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = s2.1 - $binop_truediv684.37
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; replaced with: v.1 = s2.1 - $binop_truediv684.37
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,212 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,213 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,213 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,213 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,213 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,213 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,214 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.2 = phi(incoming_values=[Var(k, classifiers.py:627), Var(k.1, classifiers.py:636)], incoming_blocks=[906, 1108])
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263764EDE90>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026376471050>],
             524: [<numba.core.ir.Assign object at 0x0000026376501B10>]})
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: values = arg(0, name=values)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: classes = arg(1, name=classes)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: n_data = call $4load_global.0(values, func=$4load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46load_attr.6 = getattr(value=$34load_global.4, attr=zeros)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const58.8 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add60.9 = n_data + $const58.8
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.11 = const(int, 1)
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add68.12 = classes + $const66.11
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $72build_tuple.13 = build_tuple(items=[Var($binop_add60.9, classifiers.py:601), Var($binop_add68.12, classifiers.py:601)])
2024-07-16 10:44:45,216 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $74load_global.14 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,228 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $86load_attr.15 = getattr(value=$74load_global.14, attr=int32)
2024-07-16 10:44:45,228 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1 = call $46load_attr.6($72build_tuple.13, func=$46load_attr.6, args=[Var($72build_tuple.13, classifiers.py:601)], kws=[('dtype', Var($86load_attr.15, classifiers.py:601))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,228 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,229 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $126load_attr.19 = getattr(value=$114load_global.17, attr=zeros)
2024-07-16 10:44:45,229 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const138.21 = const(int, 1)
2024-07-16 10:44:45,229 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add140.22 = n_data + $const138.21
2024-07-16 10:44:45,229 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.24 = const(int, 1)
2024-07-16 10:44:45,229 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add148.25 = classes + $const146.24
2024-07-16 10:44:45,229 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $152build_tuple.26 = build_tuple(items=[Var($binop_add140.22, classifiers.py:602), Var($binop_add148.25, classifiers.py:602)])
2024-07-16 10:44:45,229 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,229 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166load_attr.28 = getattr(value=$154load_global.27, attr=float32)
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2 = call $126load_attr.19($152build_tuple.26, func=$126load_attr.19, args=[Var($152build_tuple.26, classifiers.py:602)], kws=[('dtype', Var($166load_attr.28, classifiers.py:602))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const194.30 = const(int, 1)
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const198.32 = const(int, 1)
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.33 = const(int, 1)
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const202.34 = const(NoneType, None)
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.35 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.36 = call $204build_slice.35($const200.33, $const202.34, func=$204build_slice.35, args=(Var($const200.33, classifiers.py:603), Var($const202.34, classifiers.py:603)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206build_tuple.37 = build_tuple(items=[Var($const198.32, classifiers.py:603), Var($204build_slice.36, classifiers.py:603)])
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[(1, slice(1, None, None))] = $const194.30
2024-07-16 10:44:45,230 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $212load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_attr.39 = getattr(value=$212load_global.38, attr=inf)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.41 = const(int, 2)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const238.42 = const(NoneType, None)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.43 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_slice.44 = call $240build_slice.43($const236.41, $const238.42, func=$240build_slice.43, args=(Var($const236.41, classifiers.py:604), Var($const238.42, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const242.45 = const(int, 1)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const244.46 = const(NoneType, None)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.47 = global(slice: <class 'slice'>)
2024-07-16 10:44:45,231 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246build_slice.48 = call $246build_slice.47($const242.45, $const244.46, func=$246build_slice.47, args=(Var($const242.45, classifiers.py:604), Var($const244.46, classifiers.py:604)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $248build_tuple.49 = build_tuple(items=[Var($240build_slice.44, classifiers.py:604), Var($246build_slice.48, classifiers.py:604)])
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[(slice(2, None, None), slice(1, None, None))] = $224load_attr.39
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $254load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266load_attr.52 = getattr(value=$254load_global.50, attr=float32)
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const276.53 = const(int, 0)
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $294load_global.55 = global(range: <class 'range'>)
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const306.57 = const(int, 2)
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $308load_global.58 = global(len: <built-in function len>)
2024-07-16 10:44:45,232 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $326call.61 = call $308load_global.58(values, func=$308load_global.58, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,233 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const336.62 = const(int, 1)
2024-07-16 10:44:45,233 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add338.63 = $326call.61 + $const336.62
2024-07-16 10:44:45,233 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $346call.64 = call $294load_global.55($const306.57, $binop_add338.63, func=$294load_global.55, args=[Var($const306.57, classifiers.py:607), Var($binop_add338.63, classifiers.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,233 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $356get_iter.65 = getiter(value=$346call.64)
2024-07-16 10:44:45,233 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi360.0 = $356get_iter.65
2024-07-16 10:44:45,233 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 358
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 360
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 360
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.1 = iternext(value=$phi360.0)
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.2 = pair_first(value=$360for_iter.1)
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $360for_iter.3 = pair_second(value=$360for_iter.1)
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi362.1 = $360for_iter.2
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $360for_iter.3, 362, 906
2024-07-16 10:44:45,234 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 362
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _l = $phi362.1
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $364load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $376load_attr.4 = getattr(value=$364load_global.2, attr=float32)
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const386.5 = const(int, 0)
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1 = call $376load_attr.4($const386.5, func=$376load_attr.4, args=[Var($const386.5, classifiers.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $404load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $416load_attr.9 = getattr(value=$404load_global.7, attr=float32)
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const426.10 = const(int, 0)
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2 = call $416load_attr.9($const426.10, func=$416load_attr.9, args=[Var($const426.10, classifiers.py:609)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,235 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $444load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $456load_attr.14 = getattr(value=$444load_global.12, attr=float32)
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const466.15 = const(int, 0)
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w = call $456load_attr.14($const466.15, func=$456load_attr.14, args=[Var($const466.15, classifiers.py:610)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $484load_global.17 = global(range: <class 'range'>)
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const496.19 = const(int, 1)
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const500.21 = const(int, 1)
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add502.22 = _l + $const500.21
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $510call.23 = call $484load_global.17($const496.19, $binop_add502.22, func=$484load_global.17, args=[Var($const496.19, classifiers.py:611), Var($binop_add502.22, classifiers.py:611)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,236 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $520get_iter.24 = getiter(value=$510call.23)
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi522.1 = $520get_iter.24
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 522
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.2 = phi(incoming_values=[Var(s2.1, classifiers.py:614), Var(s2, classifiers.py:609)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.2 = phi(incoming_values=[Var(s1.1, classifiers.py:615), Var(s1, classifiers.py:608)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.2 = phi(incoming_values=[Var(w.1, classifiers.py:616), Var(w, classifiers.py:610)], incoming_blocks=[872, 362])
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.2 = iternext(value=$phi522.1)
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.3 = pair_first(value=$522for_iter.2)
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $522for_iter.4 = pair_second(value=$522for_iter.2)
2024-07-16 10:44:45,237 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi524.2 = $522for_iter.3
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $522for_iter.4, 524, 874
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 524
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: m = $phi524.2
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub530.5 = _l - m
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const534.6 = const(int, 1)
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i3 = $binop_sub530.5 + $const534.6
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $542load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $554load_attr.10 = getattr(value=$542load_global.8, attr=float32)
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const568.13 = const(int, 1)
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub570.14 = i3 - $const568.13
2024-07-16 10:44:45,238 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $574binary_subscr.15 = getitem(value=values, index=$binop_sub570.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,239 ; numba.core.ssa                                               ; DEBUG   ; on stmt: val = call $554load_attr.10($574binary_subscr.15, func=$554load_attr.10, args=[Var($574binary_subscr.15, classifiers.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,239 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul606.20 = val * val
2024-07-16 10:44:45,239 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd610.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s2.2, rhs=$binop_mul606.20, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,239 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s2.1 = $binop_iadd610.21
2024-07-16 10:44:45,239 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd620.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=s1.2, rhs=val, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s1.1 = $binop_iadd620.24
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $628load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $640load_attr.28 = getattr(value=$628load_global.26, attr=float32)
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const650.29 = const(int, 1)
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $656call.30 = call $640load_attr.28($const650.29, func=$640load_attr.28, args=[Var($const650.29, classifiers.py:616)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd666.31 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=w.2, rhs=$656call.30, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: w.1 = $binop_iadd666.31
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mul678.35 = s1.1 * s1.1
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_truediv684.37 = $binop_mul678.35 / w.1
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: v.1 = s2.1 - $binop_truediv684.37
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const696.40 = const(int, 1)
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: i4 = i3 - $const696.40
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const706.43 = const(int, 0)
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $708compare_op.44 = i4 != $const706.43
2024-07-16 10:44:45,240 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool714 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $714pred = call bool714($708compare_op.44, func=bool714, args=(Var($708compare_op.44, classifiers.py:619),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $714pred, 716, 872
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 716
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $716load_global.2 = global(range: <class 'range'>)
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const728.4 = const(int, 2)
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const732.6 = const(int, 1)
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add734.7 = classes + $const732.6
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $742call.8 = call $716load_global.2($const728.4, $binop_add734.7, func=$716load_global.2, args=[Var($const728.4, classifiers.py:620), Var($binop_add734.7, classifiers.py:620)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $752get_iter.9 = getiter(value=$742call.8)
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi754.2 = $752get_iter.9
2024-07-16 10:44:45,242 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,243 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 754
2024-07-16 10:44:45,243 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,243 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.3 = iternext(value=$phi754.2)
2024-07-16 10:44:45,243 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.4 = pair_first(value=$754for_iter.3)
2024-07-16 10:44:45,243 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $754for_iter.5 = pair_second(value=$754for_iter.3)
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi756.3 = $754for_iter.4
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $754for_iter.5, 756, 872
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 756
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: j = $phi756.3
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $764build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $766binary_subscr.8 = getitem(value=mat2, index=$764build_tuple.7, fn=<built-in function getitem>)
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const784.13 = const(int, 1)
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub786.14 = j - $const784.13
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $790build_tuple.15 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub786.14, classifiers.py:621)])
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $792binary_subscr.16 = getitem(value=mat2, index=$790build_tuple.15, fn=<built-in function getitem>)
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def var='v' stmt=$binop_add802.17 = v + $792binary_subscr.16
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 756
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; idom 754 from label 756
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 754
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 754
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; idom 716 from label 754
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 716
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 716
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 716
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_add802.17 = v.1 + $792binary_subscr.16
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $806compare_op.18 = $766binary_subscr.8 >= $binop_add802.17
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool812 = global(bool: <class 'bool'>)
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $812pred = call bool812($806compare_op.18, func=bool812, args=(Var($806compare_op.18, classifiers.py:621),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $812pred, 814, 870
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 814
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $822build_tuple.7 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$822build_tuple.7] = i3
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const836.12 = const(int, 1)
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub838.13 = j - $const836.12
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $842build_tuple.14 = build_tuple(items=[Var(i4, classifiers.py:618), Var($binop_sub838.13, classifiers.py:623)])
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $844binary_subscr.15 = getitem(value=mat2, index=$842build_tuple.14, fn=<built-in function getitem>)
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def var='v' stmt=$binop_add854.16 = v + $844binary_subscr.15
2024-07-16 10:44:45,244 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 814
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; idom 756 from label 814
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 756
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 756
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; idom 754 from label 756
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 754
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 754
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; idom 716 from label 754
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 716
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 716
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 716
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_add854.16 = v.1 + $844binary_subscr.15
2024-07-16 10:44:45,248 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $864build_tuple.20 = build_tuple(items=[Var(_l, classifiers.py:607), Var(j, classifiers.py:620)])
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$864build_tuple.20] = $binop_add854.16
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 870
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 870
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 754
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 872
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 522
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 874
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const874.1 = const(int, 1)
2024-07-16 10:44:45,249 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const880.4 = const(int, 1)
2024-07-16 10:44:45,250 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $882build_tuple.5 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const880.4, classifiers.py:624)])
2024-07-16 10:44:45,250 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat1[$882build_tuple.5] = $const874.1
2024-07-16 10:44:45,250 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const894.9 = const(int, 1)
2024-07-16 10:44:45,250 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $896build_tuple.10 = build_tuple(items=[Var(_l, classifiers.py:607), Var($const894.9, classifiers.py:625)])
2024-07-16 10:44:45,250 ; numba.core.ssa                                               ; DEBUG   ; on stmt: mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def var='v' stmt=mat2[$896build_tuple.10] = v
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 874
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 874
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 522
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; insert phi node v.2 = phi(incoming_values=[], incoming_blocks=[]) at 522
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 872
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 872
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; idom 524 from label 872
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 524
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; incoming_def v.1 = s2.1 - $binop_truediv684.37
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 362
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 362
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; idom 360 from label 362
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 360
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 360
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; idom 358 from label 360
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 358
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 358
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; insert phi node v.3 = phi(incoming_values=[], incoming_blocks=[]) at 358
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; incoming_def v = call $266load_attr.52($const276.53, func=$266load_attr.52, args=[Var($const276.53, classifiers.py:606)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 874
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 874
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; idom 522 from label 874
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 522
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; incoming_def v.2 = phi(incoming_values=[Var(v.1, classifiers.py:617)], incoming_blocks=[872])
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; incoming_def v.3 = phi(incoming_values=[Var(v, classifiers.py:606), Var(v.2, classifiers.py:624)], incoming_blocks=[0, 874])
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; replaced with: mat2[$896build_tuple.10] = v.2
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 358
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 906
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $906load_global.0 = global(len: <built-in function len>)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k = call $906load_global.0(values, func=$906load_global.0, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $936load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $948load_attr.6 = getattr(value=$936load_global.4, attr=zeros)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const960.8 = const(int, 1)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add962.9 = classes + $const960.8
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $968load_attr.11 = getattr(value=values, attr=dtype)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass = call $948load_attr.6($binop_add962.9, func=$948load_attr.6, args=[Var($binop_add962.9, classifiers.py:629)], kws=[('dtype', Var($968load_attr.11, classifiers.py:629))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $998load_global.14 = global(len: <built-in function len>)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1016call.17 = call $998load_global.14(values, func=$998load_global.14, args=[Var(values, classifiers.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1026.18 = const(int, 1)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1028.19 = $1016call.17 - $const1026.18
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1032binary_subscr.20 = getitem(value=values, index=$binop_sub1028.19, fn=<built-in function getitem>)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[classes] = $1032binary_subscr.20
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1052.24 = const(int, 0)
2024-07-16 10:44:45,251 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1054binary_subscr.25 = static_getitem(value=values, index=0, index_var=$const1052.24, fn=<built-in function getitem>)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1066.27 = const(int, 0)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[0] = $1054binary_subscr.25
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1072load_global.28 = global(range: <class 'range'>)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1086.31 = const(int, 1)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1088.32 = const(int, -1)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1094call.33 = call $1072load_global.28(classes, $const1086.31, $const1088.32, func=$1072load_global.28, args=[Var(classes, classifiers.py:583), Var($const1086.31, classifiers.py:632), Var($const1088.32, classifiers.py:632)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1104get_iter.34 = getiter(value=$1094call.33)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1106.0 = $1104get_iter.34
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1106
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.2 = phi(incoming_values=[Var(k, classifiers.py:627), Var(k.1, classifiers.py:636)], incoming_blocks=[906, 1108])
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.1 = iternext(value=$phi1106.0)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.2 = pair_first(value=$1106for_iter.1)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1106for_iter.3 = pair_second(value=$1106for_iter.1)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi1108.1 = $1106for_iter.2
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $1106for_iter.3, 1108, 1232
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1108
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: countNum = $phi1108.1
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1116build_tuple.5 = build_tuple(items=[Var(k.2, classifiers.py:632), Var(countNum, classifiers.py:632)])
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pivot = getitem(value=mat1, index=$1116build_tuple.5, fn=<built-in function getitem>)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1130load_global.7 = global(int: <class 'int'>)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1144.10 = const(int, 2)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1146.11 = pivot - $const1144.10
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: _id = call $1130load_global.7($binop_sub1146.11, func=$1130load_global.7, args=[Var($binop_sub1146.11, classifiers.py:634)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1170binary_subscr.15 = getitem(value=values, index=_id, fn=<built-in function getitem>)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1184.18 = const(int, 1)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1186.19 = countNum - $const1184.18
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: kclass[$binop_sub1186.19] = $1170binary_subscr.15
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1194load_global.20 = global(int: <class 'int'>)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1208.23 = const(int, 1)
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_sub1210.24 = pivot - $const1208.23
2024-07-16 10:44:45,256 ; numba.core.ssa                                               ; DEBUG   ; on stmt: k.1 = call $1194load_global.20($binop_sub1210.24, func=$1194load_global.20, args=[Var($binop_sub1210.24, classifiers.py:636)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 1106
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 1232
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263764596D0>
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1232load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1244load_attr.2 = getattr(value=$1232load_global.0, attr=delete)
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const1256.4 = const(int, 0)
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1262call.5 = call $1244load_attr.2(kclass, $const1256.4, func=$1244load_attr.2, args=[Var(kclass, classifiers.py:629), Var($const1256.4, classifiers.py:637)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $1272return_value.6 = cast(value=$1262call.5)
2024-07-16 10:44:45,259 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $1272return_value.6
2024-07-16 10:44:45,414 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4445)
           2	RESUME(arg=0, lineno=4445)
           4	LOAD_GLOBAL(arg=1, lineno=4446)
          16	LOAD_ATTR(arg=1, lineno=4446)
          26	LOAD_FAST(arg=0, lineno=4446)
          28	LOAD_FAST(arg=1, lineno=4446)
          30	KW_NAMES(arg=1, lineno=4446)
          32	PRECALL(arg=2, lineno=4446)
          36	CALL(arg=2, lineno=4446)
          46	STORE_FAST(arg=2, lineno=4446)
          48	LOAD_FAST(arg=2, lineno=4447)
          50	LOAD_METHOD(arg=2, lineno=4447)
          72	PRECALL(arg=0, lineno=4447)
          76	CALL(arg=0, lineno=4447)
          86	POP_TOP(arg=None, lineno=4447)
          88	LOAD_FAST(arg=2, lineno=4448)
          90	RETURN_VALUE(arg=None, lineno=4448)
2024-07-16 10:44:45,414 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:45,414 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:45,414 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:45,414 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4445)
2024-07-16 10:44:45,416 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,416 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4445)
2024-07-16 10:44:45,416 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,416 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4446)
2024-07-16 10:44:45,416 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4446)
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4446)
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2']
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4446)
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4446)
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:45,417 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=PRECALL(arg=2, lineno=4446)
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=CALL(arg=2, lineno=4446)
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4446)
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$36call.5']
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4447)
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4447)
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr48.6']
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=PRECALL(arg=0, lineno=4447)
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=76, inst=CALL(arg=0, lineno=4447)
2024-07-16 10:44:45,418 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=86, inst=POP_TOP(arg=None, lineno=4447)
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$76call.9']
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4448)
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4448)
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr88.10']
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,420 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,421 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:45,421 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:45,421 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:45,421 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:45,422 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4445)], kws=[('dtype', Var(dtype, arrayobj.py:4445))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263765B7450>
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4445)], kws=[('dtype', Var(dtype, arrayobj.py:4445))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $90return_value.11 = cast(value=arr)
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $90return_value.11
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [(<numba.core.ir.Assign object at 0x000002637645EF90>,
                                 0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000002637645D8D0>,
                                  0)],
             '$50load_method.8': [(<numba.core.ir.Assign object at 0x0000026376498890>,
                                   0)],
             '$76call.9': [(<numba.core.ir.Assign object at 0x0000026376493B10>,
                            0)],
             '$90return_value.11': [(<numba.core.ir.Assign object at 0x0000026376492F10>,
                                     0)],
             'arr': [(<numba.core.ir.Assign object at 0x00000263764EFB90>, 0)],
             'dtype': [(<numba.core.ir.Assign object at 0x0000026376454950>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x000002637646BAD0>,
                        0)]})
2024-07-16 10:44:45,434 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4377)
           2	COPY_FREE_VARS(arg=1, lineno=4377)
           4	RESUME(arg=0, lineno=4377)
           6	LOAD_GLOBAL(arg=1, lineno=4378)
          18	LOAD_FAST(arg=0, lineno=4378)
          20	LOAD_FAST(arg=1, lineno=4378)
          22	LOAD_DEREF(arg=2, lineno=4378)
          24	PRECALL(arg=3, lineno=4378)
          28	CALL(arg=3, lineno=4378)
          38	RETURN_VALUE(arg=None, lineno=4378)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4377)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4377)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=RESUME(arg=0, lineno=4377)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4378)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4378)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0']
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4378)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4378)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=PRECALL(arg=3, lineno=4378)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=CALL(arg=3, lineno=4378)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4378)
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$28call.5']
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:45,434 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,448 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,448 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:45,448 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:45,449 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:45,449 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:45,449 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(int32, 2d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($22load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263765DDF10>
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22load_deref.4 = freevar(retty: array(int32, 2d, C))
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($22load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38return_value.6 = cast(value=$28call.5)
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $38return_value.6
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [(<numba.core.ir.Assign object at 0x00000263764EEF10>,
                                  0)],
             '$28call.5': [(<numba.core.ir.Assign object at 0x000002637644EFD0>,
                            0)],
             '$38return_value.6': [(<numba.core.ir.Assign object at 0x0000026376437B50>,
                                    0)],
             '$6load_global.0': [(<numba.core.ir.Assign object at 0x00000263765B5690>,
                                  0)],
             'dtype': [(<numba.core.ir.Assign object at 0x00000263765B6050>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x00000263765B5CD0>,
                        0)]})
2024-07-16 10:44:45,455 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4253)
           2	RESUME(arg=0, lineno=4253)
           4	LOAD_FAST(arg=0, lineno=4256)
           6	LOAD_METHOD(arg=0, lineno=4256)
          28	LOAD_FAST(arg=1, lineno=4256)
          30	LOAD_FAST(arg=2, lineno=4256)
          32	PRECALL(arg=2, lineno=4256)
          36	CALL(arg=2, lineno=4256)
          46	RETURN_VALUE(arg=None, lineno=4256)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4253)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4253)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4256)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_METHOD(arg=0, lineno=4256)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arrtype4.0']
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4256)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2']
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=4256)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$size28.3']
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=PRECALL(arg=2, lineno=4256)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$size28.3', '$align30.4']
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=CALL(arg=2, lineno=4256)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$size28.3', '$align30.4']
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4256)
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$36call.5']
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:45,473 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$arrtype4.0'}), (6, {'item': '$arrtype4.0', 'res': '$6load_method.2'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'res': '$size28.3'}), (30, {'res': '$align30.4'}), (32, {}), (34, {}), (36, {'func': '$6load_method.2', 'args': ['$size28.3', '$align30.4'], 'kw_names': None, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'retval': '$36call.5', 'castval': '$46return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:45,473 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $6load_method.2 = getattr(value=arrtype, attr=_allocate) ['$6load_method.2', 'arrtype']
    $36call.5 = call $6load_method.2(size, align, func=$6load_method.2, args=[Var(size, arrayobj.py:4253), Var(align, arrayobj.py:4253)], kws=(), vararg=None, varkwarg=None, target=None) ['$36call.5', '$6load_method.2', 'align', 'size']
    $46return_value.6 = cast(value=$36call.5) ['$36call.5', '$46return_value.6']
    return $46return_value.6                 ['$46return_value.6']

2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x0000026376636950>
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arrtype = arg(0, name=arrtype)
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; on stmt: size = arg(1, name=size)
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; on stmt: align = arg(2, name=align)
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_method.2 = getattr(value=arrtype, attr=_allocate)
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $36call.5 = call $6load_method.2(size, align, func=$6load_method.2, args=[Var(size, arrayobj.py:4253), Var(align, arrayobj.py:4253)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $46return_value.6 = cast(value=$36call.5)
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $46return_value.6
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$36call.5': [(<numba.core.ir.Assign object at 0x0000026376635A90>,
                            0)],
             '$46return_value.6': [(<numba.core.ir.Assign object at 0x0000026376635D90>,
                                    0)],
             '$6load_method.2': [(<numba.core.ir.Assign object at 0x0000026376635390>,
                                  0)],
             'align': [(<numba.core.ir.Assign object at 0x0000026376634F90>,
                        0)],
             'arrtype': [(<numba.core.ir.Assign object at 0x0000026376634D90>,
                          0)],
             'size': [(<numba.core.ir.Assign object at 0x0000026376634E90>,
                       0)]})
2024-07-16 10:44:45,486 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4248)
           2	RESUME(arg=0, lineno=4248)
           4	LOAD_GLOBAL(arg=1, lineno=4249)
          16	LOAD_FAST(arg=1, lineno=4249)
          18	LOAD_FAST(arg=2, lineno=4249)
          20	PRECALL(arg=2, lineno=4249)
          24	CALL(arg=2, lineno=4249)
          34	RETURN_VALUE(arg=None, lineno=4249)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4248)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4248)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4249)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4249)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=4249)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$allocsize16.2']
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=PRECALL(arg=2, lineno=4249)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$allocsize16.2', '$align18.3']
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=CALL(arg=2, lineno=4249)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$allocsize16.2', '$align18.3']
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=4249)
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$24call.4']
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:45,486 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:45,499 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:45,499 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:45,499 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,500 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,500 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:45,500 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:45,500 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:45,500 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$allocsize16.2'}), (18, {'res': '$align18.3'}), (20, {}), (22, {}), (24, {'func': '$4load_global.0', 'args': ['$allocsize16.2', '$align18.3'], 'kw_names': None, 'res': '$24call.4'}), (26, {}), (28, {}), (30, {}), (32, {}), (34, {'retval': '$24call.4', 'castval': '$34return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:45,500 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$4load_global.0']
    $24call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4248), Var(align, arrayobj.py:4248)], kws=(), vararg=None, varkwarg=None, target=None) ['$24call.4', '$4load_global.0', 'align', 'allocsize']
    $34return_value.5 = cast(value=$24call.4) ['$24call.4', '$34return_value.5']
    return $34return_value.5                 ['$34return_value.5']

2024-07-16 10:44:45,509 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:45,509 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000002637665CCD0>
2024-07-16 10:44:45,516 ; numba.core.ssa                                               ; DEBUG   ; on stmt: cls = arg(0, name=cls)
2024-07-16 10:44:45,516 ; numba.core.ssa                                               ; DEBUG   ; on stmt: allocsize = arg(1, name=allocsize)
2024-07-16 10:44:45,516 ; numba.core.ssa                                               ; DEBUG   ; on stmt: align = arg(2, name=align)
2024-07-16 10:44:45,516 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2024-07-16 10:44:45,516 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $24call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4248), Var(align, arrayobj.py:4248)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,517 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34return_value.5 = cast(value=$24call.4)
2024-07-16 10:44:45,517 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $34return_value.5
2024-07-16 10:44:45,518 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$24call.4': [(<numba.core.ir.Assign object at 0x0000026376653E10>,
                            0)],
             '$34return_value.5': [(<numba.core.ir.Assign object at 0x000002637665C0D0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x0000026376653710>,
                                  0)],
             'align': [(<numba.core.ir.Assign object at 0x00000263766534D0>,
                        0)],
             'allocsize': [(<numba.core.ir.Assign object at 0x00000263766533D0>,
                            0)],
             'cls': [(<numba.core.ir.Assign object at 0x00000263766532D0>, 0)]})
2024-07-16 10:44:45,518 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4436)
           2	RESUME(arg=0, lineno=4436)
           4	LOAD_GLOBAL(arg=1, lineno=4437)
          16	LOAD_FAST(arg=0, lineno=4437)
          18	PRECALL(arg=1, lineno=4437)
          22	CALL(arg=1, lineno=4437)
          32	POP_TOP(arg=None, lineno=4437)
          34	LOAD_CONST(arg=0, lineno=4437)
          36	RETURN_VALUE(arg=None, lineno=4437)
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4436)
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4436)
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4437)
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4437)
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=PRECALL(arg=1, lineno=4437)
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=CALL(arg=1, lineno=4437)
2024-07-16 10:44:45,658 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=POP_TOP(arg=None, lineno=4437)
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$22call.3']
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=4437)
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=4437)
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const34.4']
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:45,664 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:45,665 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:45,665 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,665 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,665 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:45,665 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:45,666 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:45,666 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$self16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$self16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (34, {'res': '$const34.4'}), (36, {'retval': '$const34.4', 'castval': '$36return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:45,666 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4436)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'self']
    $const34.4 = const(NoneType, None)       ['$const34.4']
    $36return_value.5 = cast(value=$const34.4) ['$36return_value.5', '$const34.4']
    return $36return_value.5                 ['$36return_value.5']

2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263766CDB90>
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; on stmt: self = arg(0, name=self)
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4436)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const34.4 = const(NoneType, None)
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $36return_value.5 = cast(value=$const34.4)
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $36return_value.5
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22call.3': [(<numba.core.ir.Assign object at 0x00000263766CC850>,
                            0)],
             '$36return_value.5': [(<numba.core.ir.Assign object at 0x00000263766CCCD0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x00000263766CC3D0>,
                                  0)],
             '$const34.4': [(<numba.core.ir.Assign object at 0x00000263766CCAD0>,
                             0)],
             'self': [(<numba.core.ir.Assign object at 0x00000263766CC190>,
                       0)]})
2024-07-16 10:44:45,671 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4445)
           2	RESUME(arg=0, lineno=4445)
           4	LOAD_GLOBAL(arg=1, lineno=4446)
          16	LOAD_ATTR(arg=1, lineno=4446)
          26	LOAD_FAST(arg=0, lineno=4446)
          28	LOAD_FAST(arg=1, lineno=4446)
          30	KW_NAMES(arg=1, lineno=4446)
          32	PRECALL(arg=2, lineno=4446)
          36	CALL(arg=2, lineno=4446)
          46	STORE_FAST(arg=2, lineno=4446)
          48	LOAD_FAST(arg=2, lineno=4447)
          50	LOAD_METHOD(arg=2, lineno=4447)
          72	PRECALL(arg=0, lineno=4447)
          76	CALL(arg=0, lineno=4447)
          86	POP_TOP(arg=None, lineno=4447)
          88	LOAD_FAST(arg=2, lineno=4448)
          90	RETURN_VALUE(arg=None, lineno=4448)
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4445)
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4445)
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4446)
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4446)
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4446)
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2']
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4446)
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2024-07-16 10:44:45,777 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4446)
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=PRECALL(arg=2, lineno=4446)
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=CALL(arg=2, lineno=4446)
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4446)
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$36call.5']
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4447)
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4447)
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr48.6']
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=PRECALL(arg=0, lineno=4447)
2024-07-16 10:44:45,783 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-07-16 10:44:45,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=76, inst=CALL(arg=0, lineno=4447)
2024-07-16 10:44:45,784 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-07-16 10:44:45,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=86, inst=POP_TOP(arg=None, lineno=4447)
2024-07-16 10:44:45,784 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$76call.9']
2024-07-16 10:44:45,784 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4448)
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4448)
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr88.10']
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:45,785 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:45,785 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4445)], kws=[('dtype', Var(dtype, arrayobj.py:4445))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2024-07-16 10:44:45,791 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x0000026376788E50>
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4445)], kws=[('dtype', Var(dtype, arrayobj.py:4445))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $90return_value.11 = cast(value=arr)
2024-07-16 10:44:45,799 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $90return_value.11
2024-07-16 10:44:45,801 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [(<numba.core.ir.Assign object at 0x0000026376782E50>,
                                 0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x0000026376782B50>,
                                  0)],
             '$50load_method.8': [(<numba.core.ir.Assign object at 0x0000026376783CD0>,
                                   0)],
             '$76call.9': [(<numba.core.ir.Assign object at 0x0000026376788190>,
                            0)],
             '$90return_value.11': [(<numba.core.ir.Assign object at 0x0000026376788610>,
                                     0)],
             'arr': [(<numba.core.ir.Assign object at 0x00000263767835D0>, 0)],
             'dtype': [(<numba.core.ir.Assign object at 0x00000263767828D0>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x00000263767827D0>,
                        0)]})
2024-07-16 10:44:45,801 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4377)
           2	COPY_FREE_VARS(arg=1, lineno=4377)
           4	RESUME(arg=0, lineno=4377)
           6	LOAD_GLOBAL(arg=1, lineno=4378)
          18	LOAD_FAST(arg=0, lineno=4378)
          20	LOAD_FAST(arg=1, lineno=4378)
          22	LOAD_DEREF(arg=2, lineno=4378)
          24	PRECALL(arg=3, lineno=4378)
          28	CALL(arg=3, lineno=4378)
          38	RETURN_VALUE(arg=None, lineno=4378)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4377)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4377)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=RESUME(arg=0, lineno=4377)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4378)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4378)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0']
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4378)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4378)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=PRECALL(arg=3, lineno=4378)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=CALL(arg=3, lineno=4378)
2024-07-16 10:44:45,801 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-07-16 10:44:45,807 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4378)
2024-07-16 10:44:45,807 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$28call.5']
2024-07-16 10:44:45,807 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:45,807 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:45,807 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:45,807 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:45,807 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,807 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,809 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:45,809 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:45,809 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:45,809 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:45,809 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(float32, 2d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($22load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2024-07-16 10:44:45,809 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:45,809 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000002637678A890>
2024-07-16 10:44:45,809 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-07-16 10:44:45,809 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-07-16 10:44:45,809 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2024-07-16 10:44:45,809 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22load_deref.4 = freevar(retty: array(float32, 2d, C))
2024-07-16 10:44:45,809 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($22load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,809 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38return_value.6 = cast(value=$28call.5)
2024-07-16 10:44:45,816 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $38return_value.6
2024-07-16 10:44:45,816 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [(<numba.core.ir.Assign object at 0x00000263764F1D10>,
                                  0)],
             '$28call.5': [(<numba.core.ir.Assign object at 0x0000026376792110>,
                            0)],
             '$38return_value.6': [(<numba.core.ir.Assign object at 0x0000026376792350>,
                                    0)],
             '$6load_global.0': [(<numba.core.ir.Assign object at 0x00000263767919D0>,
                                  0)],
             'dtype': [(<numba.core.ir.Assign object at 0x0000026376791750>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x0000026376791650>,
                        0)]})
2024-07-16 10:44:45,816 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:45,888 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4436)
           2	RESUME(arg=0, lineno=4436)
           4	LOAD_GLOBAL(arg=1, lineno=4437)
          16	LOAD_FAST(arg=0, lineno=4437)
          18	PRECALL(arg=1, lineno=4437)
          22	CALL(arg=1, lineno=4437)
          32	POP_TOP(arg=None, lineno=4437)
          34	LOAD_CONST(arg=0, lineno=4437)
          36	RETURN_VALUE(arg=None, lineno=4437)
2024-07-16 10:44:45,888 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:45,888 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:45,888 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:45,888 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4436)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4436)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4437)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4437)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=PRECALL(arg=1, lineno=4437)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=CALL(arg=1, lineno=4437)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=POP_TOP(arg=None, lineno=4437)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$22call.3']
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=4437)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=4437)
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const34.4']
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:45,889 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$self16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$self16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (34, {'res': '$const34.4'}), (36, {'retval': '$const34.4', 'castval': '$36return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:45,889 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4436)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'self']
    $const34.4 = const(NoneType, None)       ['$const34.4']
    $36return_value.5 = cast(value=$const34.4) ['$36return_value.5', '$const34.4']
    return $36return_value.5                 ['$36return_value.5']

2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x0000026376742950>
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; on stmt: self = arg(0, name=self)
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4436)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const34.4 = const(NoneType, None)
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $36return_value.5 = cast(value=$const34.4)
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $36return_value.5
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22call.3': [(<numba.core.ir.Assign object at 0x0000026376740410>,
                            0)],
             '$36return_value.5': [(<numba.core.ir.Assign object at 0x0000026376740910>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x0000026376743350>,
                                  0)],
             '$const34.4': [(<numba.core.ir.Assign object at 0x00000263767434D0>,
                             0)],
             'self': [(<numba.core.ir.Assign object at 0x0000026376743090>,
                       0)]})
2024-07-16 10:44:45,889 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4445)
           2	RESUME(arg=0, lineno=4445)
           4	LOAD_GLOBAL(arg=1, lineno=4446)
          16	LOAD_ATTR(arg=1, lineno=4446)
          26	LOAD_FAST(arg=0, lineno=4446)
          28	LOAD_FAST(arg=1, lineno=4446)
          30	KW_NAMES(arg=1, lineno=4446)
          32	PRECALL(arg=2, lineno=4446)
          36	CALL(arg=2, lineno=4446)
          46	STORE_FAST(arg=2, lineno=4446)
          48	LOAD_FAST(arg=2, lineno=4447)
          50	LOAD_METHOD(arg=2, lineno=4447)
          72	PRECALL(arg=0, lineno=4447)
          76	CALL(arg=0, lineno=4447)
          86	POP_TOP(arg=None, lineno=4447)
          88	LOAD_FAST(arg=2, lineno=4448)
          90	RETURN_VALUE(arg=None, lineno=4448)
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4445)
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4445)
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4446)
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4446)
2024-07-16 10:44:46,017 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4446)
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2']
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4446)
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4446)
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=PRECALL(arg=2, lineno=4446)
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=CALL(arg=2, lineno=4446)
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4446)
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$36call.5']
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4447)
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,031 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4447)
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr48.6']
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=PRECALL(arg=0, lineno=4447)
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=76, inst=CALL(arg=0, lineno=4447)
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$50.7', '$50load_method.8']
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=86, inst=POP_TOP(arg=None, lineno=4447)
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$76call.9']
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4448)
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4448)
2024-07-16 10:44:46,033 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr88.10']
2024-07-16 10:44:46,034 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,034 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,034 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:46,034 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:46,035 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,035 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,035 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:46,035 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:46,035 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,035 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,035 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4445)], kws=[('dtype', Var(dtype, arrayobj.py:4445))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2024-07-16 10:44:46,047 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,048 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767E8050>
2024-07-16 10:44:46,048 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-07-16 10:44:46,048 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-07-16 10:44:46,049 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,049 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2024-07-16 10:44:46,049 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4445)], kws=[('dtype', Var(dtype, arrayobj.py:4445))], vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,049 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2024-07-16 10:44:46,049 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,049 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $90return_value.11 = cast(value=arr)
2024-07-16 10:44:46,049 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $90return_value.11
2024-07-16 10:44:46,050 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [(<numba.core.ir.Assign object at 0x00000263767D2510>,
                                 0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x00000263767D2C50>,
                                  0)],
             '$50load_method.8': [(<numba.core.ir.Assign object at 0x00000263764F3ED0>,
                                   0)],
             '$76call.9': [(<numba.core.ir.Assign object at 0x00000263767D9290>,
                            0)],
             '$90return_value.11': [(<numba.core.ir.Assign object at 0x00000263767D96D0>,
                                     0)],
             'arr': [(<numba.core.ir.Assign object at 0x00000263767D0B50>, 0)],
             'dtype': [(<numba.core.ir.Assign object at 0x00000263767D2F10>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x00000263767D3050>,
                        0)]})
2024-07-16 10:44:46,050 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4377)
           2	COPY_FREE_VARS(arg=1, lineno=4377)
           4	RESUME(arg=0, lineno=4377)
           6	LOAD_GLOBAL(arg=1, lineno=4378)
          18	LOAD_FAST(arg=0, lineno=4378)
          20	LOAD_FAST(arg=1, lineno=4378)
          22	LOAD_DEREF(arg=2, lineno=4378)
          24	PRECALL(arg=3, lineno=4378)
          28	CALL(arg=3, lineno=4378)
          38	RETURN_VALUE(arg=None, lineno=4378)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4377)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4377)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=RESUME(arg=0, lineno=4377)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4378)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4378)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0']
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4378)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4378)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=PRECALL(arg=3, lineno=4378)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=CALL(arg=3, lineno=4378)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4378)
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$28call.5']
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:46,052 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:46,057 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,057 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,057 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:46,057 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:46,057 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,057 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,057 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(float64, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($22load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767D9ED0>
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(0, name=shape)
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22load_deref.4 = freevar(retty: array(float64, 1d, C))
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($22load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38return_value.6 = cast(value=$28call.5)
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $38return_value.6
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [(<numba.core.ir.Assign object at 0x00000263767DAAD0>,
                                  0)],
             '$28call.5': [(<numba.core.ir.Assign object at 0x00000263767DACD0>,
                            0)],
             '$38return_value.6': [(<numba.core.ir.Assign object at 0x00000263767DA250>,
                                    0)],
             '$6load_global.0': [(<numba.core.ir.Assign object at 0x00000263767DB3D0>,
                                  0)],
             'dtype': [(<numba.core.ir.Assign object at 0x00000263767DB550>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x00000263767DB250>,
                        0)]})
2024-07-16 10:44:46,057 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4436)
           2	RESUME(arg=0, lineno=4436)
           4	LOAD_GLOBAL(arg=1, lineno=4437)
          16	LOAD_FAST(arg=0, lineno=4437)
          18	PRECALL(arg=1, lineno=4437)
          22	CALL(arg=1, lineno=4437)
          32	POP_TOP(arg=None, lineno=4437)
          34	LOAD_CONST(arg=0, lineno=4437)
          36	RETURN_VALUE(arg=None, lineno=4437)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4436)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4436)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4437)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4437)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=PRECALL(arg=1, lineno=4437)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=22, inst=CALL(arg=1, lineno=4437)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$self16.2']
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=POP_TOP(arg=None, lineno=4437)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$22call.3']
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=4437)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=4437)
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const34.4']
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,128 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$self16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$self16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (34, {'res': '$const34.4'}), (36, {'retval': '$const34.4', 'castval': '$36return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,128 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4436)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'self']
    $const34.4 = const(NoneType, None)       ['$const34.4']
    $36return_value.5 = cast(value=$const34.4) ['$36return_value.5', '$const34.4']
    return $36return_value.5                 ['$36return_value.5']

2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767FD610>
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; on stmt: self = arg(0, name=self)
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4436)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const34.4 = const(NoneType, None)
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $36return_value.5 = cast(value=$const34.4)
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $36return_value.5
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$22call.3': [(<numba.core.ir.Assign object at 0x0000026376810B90>,
                            0)],
             '$36return_value.5': [(<numba.core.ir.Assign object at 0x0000026376810350>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x0000026376811210>,
                                  0)],
             '$const34.4': [(<numba.core.ir.Assign object at 0x0000026376810910>,
                             0)],
             'self': [(<numba.core.ir.Assign object at 0x0000026376811550>,
                       0)]})
2024-07-16 10:44:46,135 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:46,253 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=3508)
           2	RESUME(arg=0, lineno=3508)
           4	LOAD_GLOBAL(arg=1, lineno=3509)
          16	LOAD_ATTR(arg=1, lineno=3509)
          26	LOAD_GLOBAL(arg=1, lineno=3509)
          38	LOAD_ATTR(arg=2, lineno=3509)
          48	LOAD_FAST(arg=0, lineno=3509)
          50	PRECALL(arg=1, lineno=3509)
          54	CALL(arg=1, lineno=3509)
          64	PRECALL(arg=1, lineno=3509)
          68	CALL(arg=1, lineno=3509)
          78	STORE_FAST(arg=0, lineno=3509)
          80	LOAD_FAST(arg=0, lineno=3510)
          82	LOAD_ATTR(arg=3, lineno=3510)
          92	STORE_FAST(arg=2, lineno=3510)
          94	LOAD_FAST(arg=1, lineno=3511)
          96	STORE_FAST(arg=3, lineno=3511)
          98	LOAD_FAST(arg=3, lineno=3513)
         100	LOAD_FAST(arg=2, lineno=3513)
         102	UNARY_NEGATIVE(arg=None, lineno=3513)
         104	COMPARE_OP(arg=0, lineno=3513)
         110	POP_JUMP_FORWARD_IF_TRUE(arg=6, lineno=3513)
         112	LOAD_FAST(arg=3, lineno=3513)
         114	LOAD_FAST(arg=2, lineno=3513)
         116	COMPARE_OP(arg=5, lineno=3513)
         122	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=3513)
>        124	LOAD_GLOBAL(arg=9, lineno=3514)
         136	LOAD_CONST(arg=1, lineno=3514)
         138	PRECALL(arg=1, lineno=3514)
         142	CALL(arg=1, lineno=3514)
         152	RAISE_VARARGS(arg=1, lineno=3514)
>        154	LOAD_FAST(arg=3, lineno=3518)
         156	LOAD_CONST(arg=2, lineno=3518)
         158	COMPARE_OP(arg=0, lineno=3518)
         164	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=3518)
         166	LOAD_FAST(arg=3, lineno=3519)
         168	LOAD_FAST(arg=2, lineno=3519)
         170	BINARY_OP(arg=13, lineno=3519)
         174	STORE_FAST(arg=3, lineno=3519)
>        176	LOAD_GLOBAL(arg=1, lineno=3521)
         188	LOAD_ATTR(arg=5, lineno=3521)
         198	LOAD_FAST(arg=0, lineno=3521)
         200	LOAD_CONST(arg=0, lineno=3521)
         202	LOAD_FAST(arg=3, lineno=3521)
         204	BUILD_SLICE(arg=2, lineno=3521)
         206	BINARY_SUBSCR(arg=None, lineno=3521)
         216	LOAD_FAST(arg=0, lineno=3521)
         218	LOAD_FAST(arg=3, lineno=3521)
         220	LOAD_CONST(arg=3, lineno=3521)
         222	BINARY_OP(arg=0, lineno=3521)
         226	LOAD_CONST(arg=0, lineno=3521)
         228	BUILD_SLICE(arg=2, lineno=3521)
         230	BINARY_SUBSCR(arg=None, lineno=3521)
         240	BUILD_TUPLE(arg=2, lineno=3521)
         242	PRECALL(arg=1, lineno=3521)
         246	CALL(arg=1, lineno=3521)
         256	RETURN_VALUE(arg=None, lineno=3521)
2024-07-16 10:44:46,253 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,253 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,253 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,253 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=3508)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=3508)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=38, inst=LOAD_ATTR(arg=2, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$null$26.4', '$26load_global.3']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$null$26.4', '$38load_attr.5']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=PRECALL(arg=1, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$null$26.4', '$38load_attr.5', '$arr48.6']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=54, inst=CALL(arg=1, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$null$26.4', '$38load_attr.5', '$arr48.6']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=64, inst=PRECALL(arg=1, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$54call.7']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=68, inst=CALL(arg=1, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$16load_attr.2', '$54call.7']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=78, inst=STORE_FAST(arg=0, lineno=3509)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$68call.8']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=3510)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=82, inst=LOAD_ATTR(arg=3, lineno=3510)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$arr80.9']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=92, inst=STORE_FAST(arg=2, lineno=3510)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$82load_attr.10']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=3511)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=96, inst=STORE_FAST(arg=3, lineno=3511)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$obj94.11']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=3513)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=3513)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos98.12']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=102, inst=UNARY_NEGATIVE(arg=None, lineno=3513)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos98.12', '$N100.13']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=104, inst=COMPARE_OP(arg=0, lineno=3513)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos98.12', '$102unary_negative.14']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=110, inst=POP_JUMP_FORWARD_IF_TRUE(arg=6, lineno=3513)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$104compare_op.15']
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=112, stack=(), blockstack=(), npush=0), Edge(pc=124, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=112 nstack_initial=0)
2024-07-16 10:44:46,256 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=112, inst=LOAD_FAST(arg=3, lineno=3513)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=114, inst=LOAD_FAST(arg=2, lineno=3513)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos112.0']
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=116, inst=COMPARE_OP(arg=5, lineno=3513)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos112.0', '$N114.1']
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=122, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=3513)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$116compare_op.2']
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=124 nstack_initial=0)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=124, inst=LOAD_GLOBAL(arg=9, lineno=3514)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=136, inst=LOAD_CONST(arg=1, lineno=3514)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$124.1', '$124load_global.0']
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=138, inst=PRECALL(arg=1, lineno=3514)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$124.1', '$124load_global.0', '$const136.2']
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=142, inst=CALL(arg=1, lineno=3514)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$124.1', '$124load_global.0', '$const136.2']
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=152, inst=RAISE_VARARGS(arg=1, lineno=3514)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$142call.3']
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=154 nstack_initial=0)])
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=154 nstack_initial=0)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=154, inst=LOAD_FAST(arg=3, lineno=3518)
2024-07-16 10:44:46,262 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,266 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=156, inst=LOAD_CONST(arg=2, lineno=3518)
2024-07-16 10:44:46,266 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos154.0']
2024-07-16 10:44:46,266 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=158, inst=COMPARE_OP(arg=0, lineno=3518)
2024-07-16 10:44:46,266 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos154.0', '$const156.1']
2024-07-16 10:44:46,266 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=164, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=3518)
2024-07-16 10:44:46,266 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$158compare_op.2']
2024-07-16 10:44:46,267 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=166, stack=(), blockstack=(), npush=0), Edge(pc=176, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,267 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=166 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
2024-07-16 10:44:46,267 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=166 nstack_initial=0)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=166, inst=LOAD_FAST(arg=3, lineno=3519)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=168, inst=LOAD_FAST(arg=2, lineno=3519)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos166.0']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=170, inst=BINARY_OP(arg=13, lineno=3519)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$pos166.0', '$N168.1']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=174, inst=STORE_FAST(arg=3, lineno=3519)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$binop_iadd170.2']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=176 nstack_initial=0)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=176, inst=LOAD_GLOBAL(arg=1, lineno=3521)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=188, inst=LOAD_ATTR(arg=5, lineno=3521)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$176load_global.0']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=198, inst=LOAD_FAST(arg=0, lineno=3521)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=200, inst=LOAD_CONST(arg=0, lineno=3521)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$arr198.3']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=202, inst=LOAD_FAST(arg=3, lineno=3521)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$arr198.3', '$const200.4']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=204, inst=BUILD_SLICE(arg=2, lineno=3521)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$arr198.3', '$const200.4', '$pos202.5']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=206, inst=BINARY_SUBSCR(arg=None, lineno=3521)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$arr198.3', '$204build_slice.7']
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=3521)
2024-07-16 10:44:46,268 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=218, inst=LOAD_FAST(arg=3, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=220, inst=LOAD_CONST(arg=3, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$pos218.10']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=222, inst=BINARY_OP(arg=0, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$pos218.10', '$const220.11']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=226, inst=LOAD_CONST(arg=0, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$binop_add222.12']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=228, inst=BUILD_SLICE(arg=2, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$binop_add222.12', '$const226.13']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=230, inst=BINARY_SUBSCR(arg=None, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$arr216.9', '$228build_slice.15']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=240, inst=BUILD_TUPLE(arg=2, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$206binary_subscr.8', '$230binary_subscr.16']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=242, inst=PRECALL(arg=1, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$240build_tuple.17']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=246, inst=CALL(arg=1, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$176.1', '$188load_attr.2', '$240build_tuple.17']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=256, inst=RETURN_VALUE(arg=None, lineno=3521)
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$246call.18']
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=176 nstack_initial=0)])
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=166 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set()})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'idx': 0, 'res': '$26load_global.3'}), (28, {}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'item': '$26load_global.3', 'res': '$38load_attr.5'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'res': '$arr48.6'}), (50, {}), (52, {}), (54, {'func': '$38load_attr.5', 'args': ['$arr48.6'], 'kw_names': None, 'res': '$54call.7'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {'func': '$16load_attr.2', 'args': ['$54call.7'], 'kw_names': None, 'res': '$68call.8'}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'value': '$68call.8'}), (80, {'res': '$arr80.9'}), (82, {'item': '$arr80.9', 'res': '$82load_attr.10'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82load_attr.10'}), (94, {'res': '$obj94.11'}), (96, {'value': '$obj94.11'}), (98, {'res': '$pos98.12'}), (100, {'res': '$N100.13'}), (102, {'value': '$N100.13', 'res': '$102unary_negative.14'}), (104, {'lhs': '$pos98.12', 'rhs': '$102unary_negative.14', 'res': '$104compare_op.15'}), (106, {}), (108, {}), (110, {'pred': '$104compare_op.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: (), 124: ()})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$pos112.0'}), (114, {'res': '$N114.1'}), (116, {'lhs': '$pos112.0', 'rhs': '$N114.1', 'res': '$116compare_op.2'}), (118, {}), (120, {}), (122, {'pred': '$116compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 154: ()})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'idx': 4, 'res': '$124load_global.0'}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {}), (136, {'res': '$const136.2'}), (138, {}), (140, {}), (142, {'func': '$124load_global.0', 'args': ['$const136.2'], 'kw_names': None, 'res': '$142call.3'}), (144, {}), (146, {}), (148, {}), (150, {}), (152, {'exc': '$142call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$pos154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$pos154.0', 'rhs': '$const156.1', 'res': '$158compare_op.2'}), (160, {}), (162, {}), (164, {'pred': '$158compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={166: (), 176: ()})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=166 nstack_initial=0):
AdaptBlockInfo(insts=((166, {'res': '$pos166.0'}), (168, {'res': '$N168.1'}), (170, {'op': '+=', 'lhs': '$pos166.0', 'rhs': '$N168.1', 'res': '$binop_iadd170.2'}), (172, {}), (174, {'value': '$binop_iadd170.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: ()})
2024-07-16 10:44:46,271 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'idx': 0, 'res': '$176load_global.0'}), (178, {}), (180, {}), (182, {}), (184, {}), (186, {}), (188, {'item': '$176load_global.0', 'res': '$188load_attr.2'}), (190, {}), (192, {}), (194, {}), (196, {}), (198, {'res': '$arr198.3'}), (200, {'res': '$const200.4'}), (202, {'res': '$pos202.5'}), (204, {'start': '$const200.4', 'stop': '$pos202.5', 'step': None, 'res': '$204build_slice.7', 'slicevar': '$204build_slice.6'}), (206, {'index': '$204build_slice.7', 'target': '$arr198.3', 'res': '$206binary_subscr.8'}), (208, {}), (210, {}), (212, {}), (214, {}), (216, {'res': '$arr216.9'}), (218, {'res': '$pos218.10'}), (220, {'res': '$const220.11'}), (222, {'op': '+', 'lhs': '$pos218.10', 'rhs': '$const220.11', 'res': '$binop_add222.12'}), (224, {}), (226, {'res': '$const226.13'}), (228, {'start': '$binop_add222.12', 'stop': '$const226.13', 'step': None, 'res': '$228build_slice.15', 'slicevar': '$228build_slice.14'}), (230, {'index': '$228build_slice.15', 'target': '$arr216.9', 'res': '$230binary_subscr.16'}), (232, {}), (234, {}), (236, {}), (238, {}), (240, {'items': ['$206binary_subscr.8', '$230binary_subscr.16'], 'res': '$240build_tuple.17'}), (242, {}), (244, {}), (246, {'func': '$188load_attr.2', 'args': ['$240build_tuple.17'], 'kw_names': None, 'res': '$246call.18'}), (248, {}), (250, {}), (252, {}), (254, {}), (256, {'retval': '$246call.18', 'castval': '$256return_value.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,271 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    arr = arg(0, name=arr)                   ['arr']
    obj = arg(1, name=obj)                   ['obj']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=ravel) ['$16load_attr.2', '$4load_global.0']
    $26load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$26load_global.3']
    $38load_attr.5 = getattr(value=$26load_global.3, attr=asarray) ['$26load_global.3', '$38load_attr.5']
    $54call.7 = call $38load_attr.5(arr, func=$38load_attr.5, args=[Var(arr, arraymath.py:3508)], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_attr.5', '$54call.7', 'arr']
    arr.1 = call $16load_attr.2($54call.7, func=$16load_attr.2, args=[Var($54call.7, arraymath.py:3509)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$54call.7', 'arr.1']
    N = getattr(value=arr.1, attr=size)      ['N', 'arr.1']
    pos = obj                                ['obj', 'pos']
    $102unary_negative.14 = unary(fn=<built-in function neg>, value=N) ['$102unary_negative.14', 'N']
    $104compare_op.15 = pos < $102unary_negative.14 ['$102unary_negative.14', '$104compare_op.15', 'pos']
    bool110 = global(bool: <class 'bool'>)   ['bool110']
    $110pred = call bool110($104compare_op.15, func=bool110, args=(Var($104compare_op.15, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None) ['$104compare_op.15', '$110pred', 'bool110']
    branch $110pred, 124, 112                ['$110pred']
label 112:
    $116compare_op.2 = pos >= N              ['$116compare_op.2', 'N', 'pos']
    bool122 = global(bool: <class 'bool'>)   ['bool122']
    $122pred = call bool122($116compare_op.2, func=bool122, args=(Var($116compare_op.2, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None) ['$116compare_op.2', '$122pred', 'bool122']
    branch $122pred, 124, 154                ['$122pred']
label 124:
    $124load_global.0 = global(IndexError: <class 'IndexError'>) ['$124load_global.0']
    $const136.2 = const(str, obj must be less than the len(arr)) ['$const136.2']
    $142call.3 = call $124load_global.0($const136.2, func=$124load_global.0, args=[Var($const136.2, arraymath.py:3514)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_global.0', '$142call.3', '$const136.2']
    raise $142call.3                         ['$142call.3']
label 154:
    $const156.1 = const(int, 0)              ['$const156.1']
    $158compare_op.2 = pos < $const156.1     ['$158compare_op.2', '$const156.1', 'pos']
    bool164 = global(bool: <class 'bool'>)   ['bool164']
    $164pred = call bool164($158compare_op.2, func=bool164, args=(Var($158compare_op.2, arraymath.py:3518),), kws=(), vararg=None, varkwarg=None, target=None) ['$158compare_op.2', '$164pred', 'bool164']
    branch $164pred, 166, 176                ['$164pred']
label 166:
    $binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd170.2', 'N', 'pos']
    pos = $binop_iadd170.2                   ['$binop_iadd170.2', 'pos']
    jump 176                                 []
label 176:
    $176load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$176load_global.0']
    $188load_attr.2 = getattr(value=$176load_global.0, attr=concatenate) ['$176load_global.0', '$188load_attr.2']
    $const200.4 = const(NoneType, None)      ['$const200.4']
    $204build_slice.6 = global(slice: <class 'slice'>) ['$204build_slice.6']
    $204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3521), Var(pos, arraymath.py:3511)), kws=(), vararg=None, varkwarg=None, target=None) ['$204build_slice.6', '$204build_slice.7', '$const200.4', 'pos']
    $206binary_subscr.8 = getitem(value=arr.1, index=$204build_slice.7, fn=<built-in function getitem>) ['$204build_slice.7', '$206binary_subscr.8', 'arr.1']
    $const220.11 = const(int, 1)             ['$const220.11']
    $binop_add222.12 = pos + $const220.11    ['$binop_add222.12', '$const220.11', 'pos']
    $const226.13 = const(NoneType, None)     ['$const226.13']
    $228build_slice.14 = global(slice: <class 'slice'>) ['$228build_slice.14']
    $228build_slice.15 = call $228build_slice.14($binop_add222.12, $const226.13, func=$228build_slice.14, args=(Var($binop_add222.12, arraymath.py:3521), Var($const226.13, arraymath.py:3521)), kws=(), vararg=None, varkwarg=None, target=None) ['$228build_slice.14', '$228build_slice.15', '$binop_add222.12', '$const226.13']
    $230binary_subscr.16 = getitem(value=arr.1, index=$228build_slice.15, fn=<built-in function getitem>) ['$228build_slice.15', '$230binary_subscr.16', 'arr.1']
    $240build_tuple.17 = build_tuple(items=[Var($206binary_subscr.8, arraymath.py:3521), Var($230binary_subscr.16, arraymath.py:3521)]) ['$206binary_subscr.8', '$230binary_subscr.16', '$240build_tuple.17']
    $246call.18 = call $188load_attr.2($240build_tuple.17, func=$188load_attr.2, args=[Var($240build_tuple.17, arraymath.py:3521)], kws=(), vararg=None, varkwarg=None, target=None) ['$188load_attr.2', '$240build_tuple.17', '$246call.18']
    $256return_value.19 = cast(value=$246call.18) ['$246call.18', '$256return_value.19']
    return $256return_value.19               ['$256return_value.19']

2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767430D0>
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = arg(0, name=arr)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: obj = arg(1, name=obj)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=ravel)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $26load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38load_attr.5 = getattr(value=$26load_global.3, attr=asarray)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $54call.7 = call $38load_attr.5(arr, func=$38load_attr.5, args=[Var(arr, arraymath.py:3508)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr.1 = call $16load_attr.2($54call.7, func=$16load_attr.2, args=[Var($54call.7, arraymath.py:3509)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: N = getattr(value=arr.1, attr=size)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = obj
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102unary_negative.14 = unary(fn=<built-in function neg>, value=N)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $104compare_op.15 = pos < $102unary_negative.14
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool110 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $110pred = call bool110($104compare_op.15, func=bool110, args=(Var($104compare_op.15, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $110pred, 124, 112
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 112
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767430D0>
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116compare_op.2 = pos >= N
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool122 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $122pred = call bool122($116compare_op.2, func=bool122, args=(Var($116compare_op.2, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $122pred, 124, 154
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 124
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767430D0>
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $124load_global.0 = global(IndexError: <class 'IndexError'>)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const136.2 = const(str, obj must be less than the len(arr))
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $142call.3 = call $124load_global.0($const136.2, func=$124load_global.0, args=[Var($const136.2, arraymath.py:3514)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,301 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'IndexError'>('obj must be less than the len(arr)')
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 154
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767430D0>
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const156.1 = const(int, 0)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $158compare_op.2 = pos < $const156.1
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool164 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $164pred = call bool164($158compare_op.2, func=bool164, args=(Var($158compare_op.2, arraymath.py:3518),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $164pred, 166, 176
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 166
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767430D0>
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = $binop_iadd170.2
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 176
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 176
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767430D0>
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $176load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $188load_attr.2 = getattr(value=$176load_global.0, attr=concatenate)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.4 = const(NoneType, None)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.6 = global(slice: <class 'slice'>)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3521), Var(pos, arraymath.py:3511)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206binary_subscr.8 = getitem(value=arr.1, index=$204build_slice.7, fn=<built-in function getitem>)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const220.11 = const(int, 1)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add222.12 = pos + $const220.11
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const226.13 = const(NoneType, None)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.14 = global(slice: <class 'slice'>)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.15 = call $228build_slice.14($binop_add222.12, $const226.13, func=$228build_slice.14, args=(Var($binop_add222.12, arraymath.py:3521), Var($const226.13, arraymath.py:3521)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $230binary_subscr.16 = getitem(value=arr.1, index=$228build_slice.15, fn=<built-in function getitem>)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_tuple.17 = build_tuple(items=[Var($206binary_subscr.8, arraymath.py:3521), Var($230binary_subscr.16, arraymath.py:3521)])
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246call.18 = call $188load_attr.2($240build_tuple.17, func=$188load_attr.2, args=[Var($240build_tuple.17, arraymath.py:3521)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $256return_value.19 = cast(value=$246call.18)
2024-07-16 10:44:46,310 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $256return_value.19
2024-07-16 10:44:46,316 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$102unary_negative.14': [(<numba.core.ir.Assign object at 0x00000263767EABD0>,
                                        0)],
             '$104compare_op.15': [(<numba.core.ir.Assign object at 0x000002637673E950>,
                                    0)],
             '$110pred': [(<numba.core.ir.Assign object at 0x000002637673E810>,
                           0)],
             '$116compare_op.2': [(<numba.core.ir.Assign object at 0x000002637673EB90>,
                                   112)],
             '$122pred': [(<numba.core.ir.Assign object at 0x000002637673C3D0>,
                           112)],
             '$124load_global.0': [(<numba.core.ir.Assign object at 0x000002637673C510>,
                                    124)],
             '$142call.3': [(<numba.core.ir.Assign object at 0x000002637673E2D0>,
                             124)],
             '$158compare_op.2': [(<numba.core.ir.Assign object at 0x000002637673DC90>,
                                   154)],
             '$164pred': [(<numba.core.ir.Assign object at 0x000002637673D9D0>,
                           154)],
             '$16load_attr.2': [(<numba.core.ir.Assign object at 0x00000263767E9ED0>,
                                 0)],
             '$176load_global.0': [(<numba.core.ir.Assign object at 0x000002637673D410>,
                                    176)],
             '$188load_attr.2': [(<numba.core.ir.Assign object at 0x000002637673D010>,
                                  176)],
             '$204build_slice.6': [(<numba.core.ir.Assign object at 0x0000026376806650>,
                                    176)],
             '$204build_slice.7': [(<numba.core.ir.Assign object at 0x0000026376807C90>,
                                    176)],
             '$206binary_subscr.8': [(<numba.core.ir.Assign object at 0x0000026376807D90>,
                                      176)],
             '$228build_slice.14': [(<numba.core.ir.Assign object at 0x0000026376807150>,
                                     176)],
             '$228build_slice.15': [(<numba.core.ir.Assign object at 0x0000026376806E10>,
                                     176)],
             '$230binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000263768069D0>,
                                       176)],
             '$240build_tuple.17': [(<numba.core.ir.Assign object at 0x0000026376806C10>,
                                     176)],
             '$246call.18': [(<numba.core.ir.Assign object at 0x00000263768064D0>,
                              176)],
             '$256return_value.19': [(<numba.core.ir.Assign object at 0x0000026376805710>,
                                      176)],
             '$26load_global.3': [(<numba.core.ir.Assign object at 0x00000263767EBB10>,
                                   0)],
             '$38load_attr.5': [(<numba.core.ir.Assign object at 0x00000263767EA6D0>,
                                 0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x00000263767DA210>,
                                  0)],
             '$54call.7': [(<numba.core.ir.Assign object at 0x00000263767EA890>,
                            0)],
             '$binop_add222.12': [(<numba.core.ir.Assign object at 0x0000026376807790>,
                                   176)],
             '$binop_iadd170.2': [(<numba.core.ir.Assign object at 0x000002637673CD50>,
                                   166)],
             '$const136.2': [(<numba.core.ir.Assign object at 0x000002637673C090>,
                              124)],
             '$const156.1': [(<numba.core.ir.Assign object at 0x000002637673E450>,
                              154)],
             '$const200.4': [(<numba.core.ir.Assign object at 0x000002637673CB90>,
                              176)],
             '$const220.11': [(<numba.core.ir.Assign object at 0x0000026376807F90>,
                               176)],
             '$const226.13': [(<numba.core.ir.Assign object at 0x0000026376807B10>,
                               176)],
             'N': [(<numba.core.ir.Assign object at 0x00000263767EBD50>, 0)],
             'arr': [(<numba.core.ir.Assign object at 0x000002637672CE50>, 0)],
             'arr.1': [(<numba.core.ir.Assign object at 0x00000263767EAB50>,
                        0)],
             'bool110': [(<numba.core.ir.Assign object at 0x000002637673F090>,
                          0)],
             'bool122': [(<numba.core.ir.Assign object at 0x000002637673F190>,
                          112)],
             'bool164': [(<numba.core.ir.Assign object at 0x000002637673DA50>,
                          154)],
             'obj': [(<numba.core.ir.Assign object at 0x00000263767D90D0>, 0)],
             'pos': [(<numba.core.ir.Assign object at 0x00000263767EB910>, 0),
                     (<numba.core.ir.Assign object at 0x000002637673D710>,
                      166)]})
2024-07-16 10:44:46,316 ; numba.core.ssa                                               ; DEBUG   ; SSA violators {'pos'}
2024-07-16 10:44:46,316 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var pos
2024-07-16 10:44:46,316 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,316 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263767D9150>
2024-07-16 10:44:46,318 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = arg(0, name=arr)
2024-07-16 10:44:46,318 ; numba.core.ssa                                               ; DEBUG   ; on stmt: obj = arg(1, name=obj)
2024-07-16 10:44:46,318 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,318 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=ravel)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $26load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38load_attr.5 = getattr(value=$26load_global.3, attr=asarray)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $54call.7 = call $38load_attr.5(arr, func=$38load_attr.5, args=[Var(arr, arraymath.py:3508)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr.1 = call $16load_attr.2($54call.7, func=$16load_attr.2, args=[Var($54call.7, arraymath.py:3509)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: N = getattr(value=arr.1, attr=size)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = obj
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; first assign: pos
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; replaced with: pos = obj
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102unary_negative.14 = unary(fn=<built-in function neg>, value=N)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $104compare_op.15 = pos < $102unary_negative.14
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool110 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $110pred = call bool110($104compare_op.15, func=bool110, args=(Var($104compare_op.15, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $110pred, 124, 112
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 112
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263767D9150>
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116compare_op.2 = pos >= N
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool122 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $122pred = call bool122($116compare_op.2, func=bool122, args=(Var($116compare_op.2, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $122pred, 124, 154
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 124
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263767D9150>
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $124load_global.0 = global(IndexError: <class 'IndexError'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const136.2 = const(str, obj must be less than the len(arr))
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $142call.3 = call $124load_global.0($const136.2, func=$124load_global.0, args=[Var($const136.2, arraymath.py:3514)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'IndexError'>('obj must be less than the len(arr)')
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 154
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263767D9150>
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const156.1 = const(int, 0)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $158compare_op.2 = pos < $const156.1
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool164 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $164pred = call bool164($158compare_op.2, func=bool164, args=(Var($158compare_op.2, arraymath.py:3518),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $164pred, 166, 176
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 166
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263767D9150>
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = $binop_iadd170.2
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; replaced with: pos.1 = $binop_iadd170.2
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 176
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 176
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263767D9150>
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $176load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $188load_attr.2 = getattr(value=$176load_global.0, attr=concatenate)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.4 = const(NoneType, None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.6 = global(slice: <class 'slice'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3521), Var(pos, arraymath.py:3511)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206binary_subscr.8 = getitem(value=arr.1, index=$204build_slice.7, fn=<built-in function getitem>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const220.11 = const(int, 1)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add222.12 = pos + $const220.11
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const226.13 = const(NoneType, None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.14 = global(slice: <class 'slice'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.15 = call $228build_slice.14($binop_add222.12, $const226.13, func=$228build_slice.14, args=(Var($binop_add222.12, arraymath.py:3521), Var($const226.13, arraymath.py:3521)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $230binary_subscr.16 = getitem(value=arr.1, index=$228build_slice.15, fn=<built-in function getitem>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_tuple.17 = build_tuple(items=[Var($206binary_subscr.8, arraymath.py:3521), Var($230binary_subscr.16, arraymath.py:3521)])
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246call.18 = call $188load_attr.2($240build_tuple.17, func=$188load_attr.2, args=[Var($240build_tuple.17, arraymath.py:3521)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $256return_value.19 = cast(value=$246call.18)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $256return_value.19
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026376805550>],
             166: [<numba.core.ir.Assign object at 0x0000026376827AD0>]})
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376827B10>
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr = arg(0, name=arr)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: obj = arg(1, name=obj)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=ravel)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $26load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $38load_attr.5 = getattr(value=$26load_global.3, attr=asarray)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $54call.7 = call $38load_attr.5(arr, func=$38load_attr.5, args=[Var(arr, arraymath.py:3508)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arr.1 = call $16load_attr.2($54call.7, func=$16load_attr.2, args=[Var($54call.7, arraymath.py:3509)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: N = getattr(value=arr.1, attr=size)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos = obj
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102unary_negative.14 = unary(fn=<built-in function neg>, value=N)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $104compare_op.15 = pos < $102unary_negative.14
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$104compare_op.15 = pos < $102unary_negative.14
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool110 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $110pred = call bool110($104compare_op.15, func=bool110, args=(Var($104compare_op.15, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $110pred, 124, 112
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 112
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376827B10>
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116compare_op.2 = pos >= N
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$116compare_op.2 = pos >= N
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 112
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; idom 0 from label 112
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool122 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,319 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $122pred = call bool122($116compare_op.2, func=bool122, args=(Var($116compare_op.2, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $122pred, 124, 154
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 124
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376827B10>
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $124load_global.0 = global(IndexError: <class 'IndexError'>)
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const136.2 = const(str, obj must be less than the len(arr))
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $142call.3 = call $124load_global.0($const136.2, func=$124load_global.0, args=[Var($const136.2, arraymath.py:3514)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'IndexError'>('obj must be less than the len(arr)')
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 154
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376827B10>
2024-07-16 10:44:46,331 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const156.1 = const(int, 0)
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $158compare_op.2 = pos < $const156.1
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$158compare_op.2 = pos < $const156.1
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 154
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; idom 112 from label 154
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 112
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 112
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; idom 0 from label 112
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-07-16 10:44:46,333 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool164 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $164pred = call bool164($158compare_op.2, func=bool164, args=(Var($158compare_op.2, arraymath.py:3518),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $164pred, 166, 176
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 166
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376827B10>
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$binop_iadd170.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=pos, rhs=N, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 166
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; idom 154 from label 166
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 154
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 154
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; idom 112 from label 154
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 112
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 112
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; idom 0 from label 112
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: pos.1 = $binop_iadd170.2
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 176
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 176
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376827B10>
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $176load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\jablonski\\AppData\\Local\\anaconda3\\Lib\\site-packages\\numpy\\__init__.py'>)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $188load_attr.2 = getattr(value=$176load_global.0, attr=concatenate)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const200.4 = const(NoneType, None)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.6 = global(slice: <class 'slice'>)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3521), Var(pos, arraymath.py:3511)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$204build_slice.7 = call $204build_slice.6($const200.4, pos, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3521), Var(pos, arraymath.py:3511)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 176
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; insert phi node pos.2 = phi(incoming_values=[], incoming_blocks=[]) at 176
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 154
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 154
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; idom 112 from label 154
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 112
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 112
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; idom 0 from label 112
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; incoming_def pos = obj
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 166
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; incoming_def pos.1 = $binop_iadd170.2
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $204build_slice.7 = call $204build_slice.6($const200.4, pos.2, func=$204build_slice.6, args=(Var($const200.4, arraymath.py:3521), Var(pos.2, arraymath.py:3521)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $206binary_subscr.8 = getitem(value=arr.1, index=$204build_slice.7, fn=<built-in function getitem>)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const220.11 = const(int, 1)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_add222.12 = pos + $const220.11
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; find_def var='pos' stmt=$binop_add222.12 = pos + $const220.11
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_add222.12 = pos.2 + $const220.11
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const226.13 = const(NoneType, None)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.14 = global(slice: <class 'slice'>)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $228build_slice.15 = call $228build_slice.14($binop_add222.12, $const226.13, func=$228build_slice.14, args=(Var($binop_add222.12, arraymath.py:3521), Var($const226.13, arraymath.py:3521)), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $230binary_subscr.16 = getitem(value=arr.1, index=$228build_slice.15, fn=<built-in function getitem>)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $240build_tuple.17 = build_tuple(items=[Var($206binary_subscr.8, arraymath.py:3521), Var($230binary_subscr.16, arraymath.py:3521)])
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $246call.18 = call $188load_attr.2($240build_tuple.17, func=$188load_attr.2, args=[Var($240build_tuple.17, arraymath.py:3521)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $256return_value.19 = cast(value=$246call.18)
2024-07-16 10:44:46,334 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $256return_value.19
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=4273)
           2	RESUME(arg=0, lineno=4273)
           4	LOAD_FAST(arg=0, lineno=4274)
           6	RETURN_VALUE(arg=None, lineno=4274)
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=4273)
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=4273)
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4274)
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=4274)
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$a4.0']
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,351 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'retval': '$a4.0', 'castval': '$6return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,351 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $6return_value.1 = cast(value=a)         ['$6return_value.1', 'a']
    return $6return_value.1                  ['$6return_value.1']

2024-07-16 10:44:46,357 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,357 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x0000026376825B50>
2024-07-16 10:44:46,357 ; numba.core.ssa                                               ; DEBUG   ; on stmt: a = arg(0, name=a)
2024-07-16 10:44:46,357 ; numba.core.ssa                                               ; DEBUG   ; on stmt: dtype = arg(1, name=dtype)
2024-07-16 10:44:46,357 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6return_value.1 = cast(value=a)
2024-07-16 10:44:46,357 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $6return_value.1
2024-07-16 10:44:46,357 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$6return_value.1': [(<numba.core.ir.Assign object at 0x0000026376866350>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x0000026376865ED0>, 0)],
             'dtype': [(<numba.core.ir.Assign object at 0x0000026376865FD0>,
                        0)]})
2024-07-16 10:44:46,357 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=5876)
           2	RESUME(arg=0, lineno=5876)
           4	LOAD_GLOBAL(arg=1, lineno=5877)
          16	LOAD_FAST(arg=0, lineno=5877)
          18	LOAD_FAST(arg=1, lineno=5877)
          20	PRECALL(arg=2, lineno=5877)
          24	CALL(arg=2, lineno=5877)
          34	RETURN_VALUE(arg=None, lineno=5877)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=5876)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=5876)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=5877)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=5877)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0']
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=5877)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$arrays16.2']
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=20, inst=PRECALL(arg=2, lineno=5877)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$arrays16.2', '$axis18.3']
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=CALL(arg=2, lineno=5877)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$4.1', '$4load_global.0', '$arrays16.2', '$axis18.3']
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=5877)
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$24call.4']
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,385 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$arrays16.2'}), (18, {'res': '$axis18.3'}), (20, {}), (22, {}), (24, {'func': '$4load_global.0', 'args': ['$arrays16.2', '$axis18.3'], 'kw_names': None, 'res': '$24call.4'}), (26, {}), (28, {}), (30, {}), (32, {}), (34, {'retval': '$24call.4', 'castval': '$34return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,385 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    arrays = arg(0, name=arrays)             ['arrays']
    axis = arg(1, name=axis)                 ['axis']
    $4load_global.0 = global(np_concatenate: <intrinsic np_concatenate>) ['$4load_global.0']
    $24call.4 = call $4load_global.0(arrays, axis, func=$4load_global.0, args=[Var(arrays, arrayobj.py:5876), Var(axis, arrayobj.py:5876)], kws=(), vararg=None, varkwarg=None, target=None) ['$24call.4', '$4load_global.0', 'arrays', 'axis']
    $34return_value.5 = cast(value=$24call.4) ['$24call.4', '$34return_value.5']
    return $34return_value.5                 ['$34return_value.5']

2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000002637687BBD0>
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; on stmt: arrays = arg(0, name=arrays)
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; on stmt: axis = arg(1, name=axis)
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $4load_global.0 = global(np_concatenate: <intrinsic np_concatenate>)
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $24call.4 = call $4load_global.0(arrays, axis, func=$4load_global.0, args=[Var(arrays, arrayobj.py:5876), Var(axis, arrayobj.py:5876)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $34return_value.5 = cast(value=$24call.4)
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $34return_value.5
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$24call.4': [(<numba.core.ir.Assign object at 0x0000026376878910>,
                            0)],
             '$34return_value.5': [(<numba.core.ir.Assign object at 0x0000026376878A90>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x0000026376878150>,
                                  0)],
             'arrays': [(<numba.core.ir.Assign object at 0x0000026376878ED0>,
                         0)],
             'axis': [(<numba.core.ir.Assign object at 0x000002637687A850>,
                       0)]})
2024-07-16 10:44:46,385 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:46,491 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=2251)
           2	RESUME(arg=0, lineno=2251)
           4	LOAD_FAST(arg=0, lineno=2252)
           6	LOAD_METHOD(arg=0, lineno=2252)
          28	PRECALL(arg=0, lineno=2252)
          32	CALL(arg=0, lineno=2252)
          42	RETURN_VALUE(arg=None, lineno=2252)
2024-07-16 10:44:46,491 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,491 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=2251)
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=2251)
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2252)
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_METHOD(arg=0, lineno=2252)
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$a4.0']
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=PRECALL(arg=0, lineno=2252)
2024-07-16 10:44:46,492 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2']
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=32, inst=CALL(arg=0, lineno=2252)
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2']
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=2252)
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$32call.3']
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:46,493 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,494 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,494 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:46,494 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:46,494 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,494 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'item': '$a4.0', 'res': '$6load_method.2'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'func': '$6load_method.2', 'args': [], 'kw_names': None, 'res': '$32call.3'}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {'retval': '$32call.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,495 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    a = arg(0, name=a)                       ['a']
    $6load_method.2 = getattr(value=a, attr=ravel) ['$6load_method.2', 'a']
    $32call.3 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$32call.3', '$6load_method.2']
    $42return_value.4 = cast(value=$32call.3) ['$32call.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2024-07-16 10:44:46,505 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,505 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263767CE290>
2024-07-16 10:44:46,505 ; numba.core.ssa                                               ; DEBUG   ; on stmt: a = arg(0, name=a)
2024-07-16 10:44:46,506 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_method.2 = getattr(value=a, attr=ravel)
2024-07-16 10:44:46,506 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $32call.3 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,506 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42return_value.4 = cast(value=$32call.3)
2024-07-16 10:44:46,506 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $42return_value.4
2024-07-16 10:44:46,506 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$32call.3': [(<numba.core.ir.Assign object at 0x00000263766D60D0>,
                            0)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x00000263766D6290>,
                                    0)],
             '$6load_method.2': [(<numba.core.ir.Assign object at 0x00000263766D5CD0>,
                                  0)],
             'a': [(<numba.core.ir.Assign object at 0x00000263766D5090>, 0)]})
2024-07-16 10:44:46,506 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:46,514 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=2229)
           2	RESUME(arg=0, lineno=2229)
           4	LOAD_FAST(arg=0, lineno=2231)
           6	LOAD_METHOD(arg=0, lineno=2231)
          28	LOAD_FAST(arg=0, lineno=2231)
          30	LOAD_ATTR(arg=1, lineno=2231)
          40	PRECALL(arg=1, lineno=2231)
          44	CALL(arg=1, lineno=2231)
          54	RETURN_VALUE(arg=None, lineno=2231)
2024-07-16 10:44:46,514 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,514 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,514 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=2229)
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=2229)
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2231)
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=LOAD_METHOD(arg=0, lineno=2231)
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$ary4.0']
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=2231)
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2']
2024-07-16 10:44:46,515 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=LOAD_ATTR(arg=1, lineno=2231)
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$ary28.3']
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=40, inst=PRECALL(arg=1, lineno=2231)
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$30load_attr.4']
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=44, inst=CALL(arg=1, lineno=2231)
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$6.1', '$6load_method.2', '$30load_attr.4']
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=2231)
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$44call.5']
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,516 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-07-16 10:44:46,517 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {}
2024-07-16 10:44:46,517 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,517 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>, {})
2024-07-16 10:44:46,517 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {}
2024-07-16 10:44:46,517 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>, {})
2024-07-16 10:44:46,517 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,517 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$ary4.0'}), (6, {'item': '$ary4.0', 'res': '$6load_method.2'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'res': '$ary28.3'}), (30, {'item': '$ary28.3', 'res': '$30load_attr.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'func': '$6load_method.2', 'args': ['$30load_attr.4'], 'kw_names': None, 'res': '$44call.5'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {'retval': '$44call.5', 'castval': '$54return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,518 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    ary = arg(0, name=ary)                   ['ary']
    $6load_method.2 = getattr(value=ary, attr=reshape) ['$6load_method.2', 'ary']
    $30load_attr.4 = getattr(value=ary, attr=size) ['$30load_attr.4', 'ary']
    $44call.5 = call $6load_method.2($30load_attr.4, func=$6load_method.2, args=[Var($30load_attr.4, arrayobj.py:2231)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_attr.4', '$44call.5', '$6load_method.2']
    $54return_value.6 = cast(value=$44call.5) ['$44call.5', '$54return_value.6']
    return $54return_value.6                 ['$54return_value.6']

2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x000002637672DE90>
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ary = arg(0, name=ary)
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $6load_method.2 = getattr(value=ary, attr=reshape)
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30load_attr.4 = getattr(value=ary, attr=size)
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44call.5 = call $6load_method.2($30load_attr.4, func=$6load_method.2, args=[Var($30load_attr.4, arrayobj.py:2231)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $54return_value.6 = cast(value=$44call.5)
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $54return_value.6
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$30load_attr.4': [(<numba.core.ir.Assign object at 0x000002637672AF90>,
                                 0)],
             '$44call.5': [(<numba.core.ir.Assign object at 0x000002637672AF50>,
                            0)],
             '$54return_value.6': [(<numba.core.ir.Assign object at 0x000002637672A910>,
                                    0)],
             '$6load_method.2': [(<numba.core.ir.Assign object at 0x00000263766EA450>,
                                  0)],
             'ary': [(<numba.core.ir.Assign object at 0x00000263766EAAD0>, 0)]})
2024-07-16 10:44:46,519 ; numba.core.ssa                                               ; DEBUG   ; SSA violators set()
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; bytecode dump:
>          0	NOP(arg=None, lineno=2045)
           2	RESUME(arg=0, lineno=2045)
           4	LOAD_CONST(arg=1, lineno=2046)
           6	STORE_FAST(arg=2, lineno=2046)
           8	LOAD_CONST(arg=2, lineno=2047)
          10	STORE_FAST(arg=3, lineno=2047)
          12	LOAD_GLOBAL(arg=1, lineno=2048)
          24	LOAD_FAST(arg=1, lineno=2048)
          26	PRECALL(arg=1, lineno=2048)
          30	CALL(arg=1, lineno=2048)
          40	GET_ITER(arg=None, lineno=2048)
>         42	FOR_ITER(arg=24, lineno=2048)
          44	UNPACK_SEQUENCE(arg=2, lineno=2048)
          48	STORE_FAST(arg=4, lineno=2048)
          50	STORE_FAST(arg=5, lineno=2048)
          52	LOAD_FAST(arg=5, lineno=2049)
          54	LOAD_CONST(arg=1, lineno=2049)
          56	COMPARE_OP(arg=0, lineno=2049)
          62	POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=2049)
          64	LOAD_FAST(arg=2, lineno=2050)
          66	LOAD_CONST(arg=2, lineno=2050)
          68	BINARY_OP(arg=13, lineno=2050)
          72	STORE_FAST(arg=2, lineno=2050)
          74	LOAD_FAST(arg=4, lineno=2051)
          76	STORE_FAST(arg=6, lineno=2051)
          78	JUMP_BACKWARD(arg=19, lineno=2051)
>         80	LOAD_FAST(arg=3, lineno=2053)
          82	LOAD_FAST(arg=5, lineno=2053)
          84	BINARY_OP(arg=18, lineno=2053)
          88	STORE_FAST(arg=3, lineno=2053)
          90	JUMP_BACKWARD(arg=25, lineno=2053)
>         92	LOAD_FAST(arg=2, lineno=2055)
          94	LOAD_CONST(arg=1, lineno=2055)
          96	COMPARE_OP(arg=2, lineno=2055)
         102	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=2055)
         104	LOAD_FAST(arg=0, lineno=2056)
         106	LOAD_FAST(arg=3, lineno=2056)
         108	COMPARE_OP(arg=3, lineno=2056)
         114	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=2056)
         116	LOAD_GLOBAL(arg=3, lineno=2057)
         128	LOAD_CONST(arg=3, lineno=2057)
         130	PRECALL(arg=1, lineno=2057)
         134	CALL(arg=1, lineno=2057)
         144	RAISE_VARARGS(arg=1, lineno=2057)
>        146	LOAD_CONST(arg=0, lineno=2056)
         148	RETURN_VALUE(arg=None, lineno=2056)
>        150	LOAD_FAST(arg=2, lineno=2059)
         152	LOAD_CONST(arg=2, lineno=2059)
         154	COMPARE_OP(arg=2, lineno=2059)
         160	POP_JUMP_FORWARD_IF_FALSE(arg=53, lineno=2059)
         162	LOAD_FAST(arg=3, lineno=2061)
         164	LOAD_CONST(arg=1, lineno=2061)
         166	COMPARE_OP(arg=2, lineno=2061)
         172	POP_JUMP_FORWARD_IF_FALSE(arg=9, lineno=2061)
         174	LOAD_CONST(arg=1, lineno=2062)
         176	STORE_FAST(arg=7, lineno=2062)
         178	LOAD_FAST(arg=0, lineno=2063)
         180	LOAD_CONST(arg=1, lineno=2063)
         182	COMPARE_OP(arg=2, lineno=2063)
         188	STORE_FAST(arg=8, lineno=2063)
         190	JUMP_FORWARD(arg=14, lineno=2063)
>        192	LOAD_FAST(arg=0, lineno=2065)
         194	LOAD_FAST(arg=3, lineno=2065)
         196	BINARY_OP(arg=2, lineno=2065)
         200	STORE_FAST(arg=7, lineno=2065)
         202	LOAD_FAST(arg=0, lineno=2066)
         204	LOAD_FAST(arg=3, lineno=2066)
         206	BINARY_OP(arg=6, lineno=2066)
         210	LOAD_CONST(arg=1, lineno=2066)
         212	COMPARE_OP(arg=2, lineno=2066)
         218	STORE_FAST(arg=8, lineno=2066)
>        220	LOAD_FAST(arg=8, lineno=2067)
         222	POP_JUMP_FORWARD_IF_TRUE(arg=15, lineno=2067)
         224	LOAD_GLOBAL(arg=3, lineno=2068)
         236	LOAD_CONST(arg=3, lineno=2068)
         238	PRECALL(arg=1, lineno=2068)
         242	CALL(arg=1, lineno=2068)
         252	RAISE_VARARGS(arg=1, lineno=2068)
>        254	LOAD_FAST(arg=7, lineno=2069)
         256	LOAD_FAST(arg=1, lineno=2069)
         258	LOAD_FAST(arg=6, lineno=2069)
         260	STORE_SUBSCR(arg=None, lineno=2069)
         264	LOAD_CONST(arg=0, lineno=2069)
         266	RETURN_VALUE(arg=None, lineno=2069)
>        268	LOAD_GLOBAL(arg=3, lineno=2072)
         280	LOAD_CONST(arg=4, lineno=2072)
         282	PRECALL(arg=1, lineno=2072)
         286	CALL(arg=1, lineno=2072)
         296	RAISE_VARARGS(arg=1, lineno=2072)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=0, inst=NOP(arg=None, lineno=2045)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=2, inst=RESUME(arg=0, lineno=2045)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2046)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=6, inst=STORE_FAST(arg=2, lineno=2046)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const4.0']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=2047)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=10, inst=STORE_FAST(arg=3, lineno=2047)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const8.1']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$12.3', '$12load_global.2']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=26, inst=PRECALL(arg=1, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$12.3', '$12load_global.2', '$shape24.4']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=30, inst=CALL(arg=1, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$12.3', '$12load_global.2', '$shape24.4']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=40, inst=GET_ITER(arg=None, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$30call.5']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=42, stack=('$40get_iter.6',), blockstack=(), npush=0)]
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=42 nstack_initial=1)])
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi42.0']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=42 nstack_initial=1)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=42, inst=FOR_ITER(arg=24, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi42.0']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=('$phi42.0', '$42for_iter.2'), blockstack=(), npush=0)]
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=44 nstack_initial=2)])
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=92 nstack_initial=0)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=2055)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=94, inst=LOAD_CONST(arg=1, lineno=2055)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$num_neg_value92.0']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=96, inst=COMPARE_OP(arg=2, lineno=2055)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$num_neg_value92.0', '$const94.1']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=102, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=2055)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$96compare_op.2']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=44 nstack_initial=2), State(pc_initial=104 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi44.0', '$phi44.1']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=44 nstack_initial=2)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=44, inst=UNPACK_SEQUENCE(arg=2, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$phi44.1']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=48, inst=STORE_FAST(arg=4, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$44unpack_sequence.3', '$44unpack_sequence.2']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=50, inst=STORE_FAST(arg=5, lineno=2048)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$44unpack_sequence.3']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=2049)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=2049)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$s52.5']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=56, inst=COMPARE_OP(arg=0, lineno=2049)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$s52.5', '$const54.6']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=62, inst=POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=2049)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi44.0', '$56compare_op.7']
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=64, stack=('$phi44.0',), blockstack=(), npush=0), Edge(pc=80, stack=('$phi44.0',), blockstack=(), npush=0)]
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=150 nstack_initial=0), State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1)])
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=104 nstack_initial=0)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=2056)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=2056)
2024-07-16 10:44:46,540 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize104.0']
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=108, inst=COMPARE_OP(arg=3, lineno=2056)
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize104.0', '$known_size106.1']
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=114, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=2056)
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$108compare_op.2']
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=116, stack=(), blockstack=(), npush=0), Edge(pc=146, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=150 nstack_initial=0)
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=150, inst=LOAD_FAST(arg=2, lineno=2059)
2024-07-16 10:44:46,548 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,549 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=152, inst=LOAD_CONST(arg=2, lineno=2059)
2024-07-16 10:44:46,549 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$num_neg_value150.0']
2024-07-16 10:44:46,549 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=154, inst=COMPARE_OP(arg=2, lineno=2059)
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$num_neg_value150.0', '$const152.1']
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=160, inst=POP_JUMP_FORWARD_IF_FALSE(arg=53, lineno=2059)
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$154compare_op.2']
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=162, stack=(), blockstack=(), npush=0), Edge(pc=268, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0)])
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi64.0']
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=64 nstack_initial=1)
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=2050)
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0']
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=2050)
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0', '$num_neg_value64.1']
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=68, inst=BINARY_OP(arg=13, lineno=2050)
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0', '$num_neg_value64.1', '$const66.2']
2024-07-16 10:44:46,550 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=72, inst=STORE_FAST(arg=2, lineno=2050)
2024-07-16 10:44:46,551 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0', '$binop_iadd68.3']
2024-07-16 10:44:46,551 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=2051)
2024-07-16 10:44:46,551 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0']
2024-07-16 10:44:46,551 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=76, inst=STORE_FAST(arg=6, lineno=2051)
2024-07-16 10:44:46,551 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0', '$ax74.4']
2024-07-16 10:44:46,551 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=78, inst=JUMP_BACKWARD(arg=19, lineno=2051)
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi64.0']
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=42, stack=('$phi64.0',), blockstack=(), npush=0)]
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1)])
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; stack: ['$phi80.0']
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=2053)
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0']
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=2053)
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0', '$known_size80.1']
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=84, inst=BINARY_OP(arg=18, lineno=2053)
2024-07-16 10:44:46,552 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0', '$known_size80.1', '$s82.2']
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=88, inst=STORE_FAST(arg=3, lineno=2053)
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0', '$binop_imul84.3']
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=90, inst=JUMP_BACKWARD(arg=25, lineno=2053)
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$phi80.0']
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=42, stack=('$phi80.0',), blockstack=(), npush=0)]
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=116 nstack_initial=0)
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=116, inst=LOAD_GLOBAL(arg=3, lineno=2057)
2024-07-16 10:44:46,553 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=128, inst=LOAD_CONST(arg=3, lineno=2057)
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$116.1', '$116load_global.0']
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=130, inst=PRECALL(arg=1, lineno=2057)
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$116.1', '$116load_global.0', '$const128.2']
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=134, inst=CALL(arg=1, lineno=2057)
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$116.1', '$116load_global.0', '$const128.2']
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=144, inst=RAISE_VARARGS(arg=1, lineno=2057)
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$134call.3']
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,554 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=146 nstack_initial=0)
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=146, inst=LOAD_CONST(arg=0, lineno=2056)
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=148, inst=RETURN_VALUE(arg=None, lineno=2056)
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const146.0']
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=162 nstack_initial=0)
2024-07-16 10:44:46,555 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=162, inst=LOAD_FAST(arg=3, lineno=2061)
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=2061)
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$known_size162.0']
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=166, inst=COMPARE_OP(arg=2, lineno=2061)
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$known_size162.0', '$const164.1']
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=172, inst=POP_JUMP_FORWARD_IF_FALSE(arg=9, lineno=2061)
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$166compare_op.2']
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=174, stack=(), blockstack=(), npush=0), Edge(pc=192, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,556 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=268 nstack_initial=0)
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=268, inst=LOAD_GLOBAL(arg=3, lineno=2072)
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=280, inst=LOAD_CONST(arg=4, lineno=2072)
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$268.1', '$268load_global.0']
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=282, inst=PRECALL(arg=1, lineno=2072)
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$268.1', '$268load_global.0', '$const280.2']
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=286, inst=CALL(arg=1, lineno=2072)
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$268.1', '$268load_global.0', '$const280.2']
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=296, inst=RAISE_VARARGS(arg=1, lineno=2072)
2024-07-16 10:44:46,557 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$286call.3']
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=174 nstack_initial=0)
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=174, inst=LOAD_CONST(arg=1, lineno=2062)
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=176, inst=STORE_FAST(arg=7, lineno=2062)
2024-07-16 10:44:46,558 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const174.0']
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=2063)
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=180, inst=LOAD_CONST(arg=1, lineno=2063)
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize178.1']
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=182, inst=COMPARE_OP(arg=2, lineno=2063)
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize178.1', '$const180.2']
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=188, inst=STORE_FAST(arg=8, lineno=2063)
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$182compare_op.3']
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=190, inst=JUMP_FORWARD(arg=14, lineno=2063)
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=220 nstack_initial=0)])
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=192 nstack_initial=0)
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=192, inst=LOAD_FAST(arg=0, lineno=2065)
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,559 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=194, inst=LOAD_FAST(arg=3, lineno=2065)
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize192.0']
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=196, inst=BINARY_OP(arg=2, lineno=2065)
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize192.0', '$known_size194.1']
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=200, inst=STORE_FAST(arg=7, lineno=2065)
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$binop_floordiv196.2']
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=2066)
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=204, inst=LOAD_FAST(arg=3, lineno=2066)
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize202.3']
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=206, inst=BINARY_OP(arg=6, lineno=2066)
2024-07-16 10:44:46,560 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$origsize202.3', '$known_size204.4']
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=210, inst=LOAD_CONST(arg=1, lineno=2066)
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$binop_mod206.5']
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=212, inst=COMPARE_OP(arg=2, lineno=2066)
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$binop_mod206.5', '$const210.6']
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=218, inst=STORE_FAST(arg=8, lineno=2066)
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$212compare_op.7']
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=220 nstack_initial=0)])
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=220 nstack_initial=0)
2024-07-16 10:44:46,561 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=220, inst=LOAD_FAST(arg=8, lineno=2067)
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=222, inst=POP_JUMP_FORWARD_IF_TRUE(arg=15, lineno=2067)
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$ok220.0']
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[Edge(pc=224, stack=(), blockstack=(), npush=0), Edge(pc=254, stack=(), blockstack=(), npush=0)]
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=224 nstack_initial=0), State(pc_initial=254 nstack_initial=0)])
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=224 nstack_initial=0), State(pc_initial=254 nstack_initial=0)])
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=224 nstack_initial=0)
2024-07-16 10:44:46,562 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=224, inst=LOAD_GLOBAL(arg=3, lineno=2068)
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=236, inst=LOAD_CONST(arg=3, lineno=2068)
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$224.1', '$224load_global.0']
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=238, inst=PRECALL(arg=1, lineno=2068)
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$224.1', '$224load_global.0', '$const236.2']
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=242, inst=CALL(arg=1, lineno=2068)
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$null$224.1', '$224load_global.0', '$const236.2']
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=252, inst=RAISE_VARARGS(arg=1, lineno=2068)
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$242call.3']
2024-07-16 10:44:46,563 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; pending: deque([State(pc_initial=254 nstack_initial=0)])
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; stack: []
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; state.pc_initial: State(pc_initial=254 nstack_initial=0)
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=254, inst=LOAD_FAST(arg=7, lineno=2069)
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=256, inst=LOAD_FAST(arg=1, lineno=2069)
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$inferred254.0']
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=258, inst=LOAD_FAST(arg=6, lineno=2069)
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$inferred254.0', '$shape256.1']
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=2069)
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$inferred254.0', '$shape256.1', '$neg_ax258.2']
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=264, inst=LOAD_CONST(arg=0, lineno=2069)
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; stack []
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; dispatch pc=266, inst=RETURN_VALUE(arg=None, lineno=2069)
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; stack ['$const264.3']
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; end state. edges=[]
2024-07-16 10:44:46,564 ; numba.core.byteflow                                          ; DEBUG   ; -------------------------Prune PHIs-------------------------
2024-07-16 10:44:46,566 ; numba.core.byteflow                                          ; DEBUG   ; Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=1): {'$phi42.0'},
             State(pc_initial=44 nstack_initial=2): {'$phi44.1'},
             State(pc_initial=64 nstack_initial=1): set(),
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=162 nstack_initial=0): set(),
             State(pc_initial=174 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=220 nstack_initial=0): set(),
             State(pc_initial=224 nstack_initial=0): set(),
             State(pc_initial=254 nstack_initial=0): set(),
             State(pc_initial=268 nstack_initial=0): set()})
2024-07-16 10:44:46,567 ; numba.core.byteflow                                          ; DEBUG   ; defmap: {'$phi42.0': State(pc_initial=0 nstack_initial=0),
 '$phi44.1': State(pc_initial=42 nstack_initial=1)}
2024-07-16 10:44:46,568 ; numba.core.byteflow                                          ; DEBUG   ; phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi44.0': {('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi80.0': {('$phi44.0', State(pc_initial=44 nstack_initial=2))}})
2024-07-16 10:44:46,569 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-07-16 10:44:46,569 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-07-16 10:44:46,570 ; numba.core.byteflow                                          ; DEBUG   ; changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-07-16 10:44:46,570 ; numba.core.byteflow                                          ; DEBUG   ; keep phismap: {'$phi42.0': {('$40get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi44.1': {('$42for_iter.2', State(pc_initial=42 nstack_initial=1))}}
2024-07-16 10:44:46,571 ; numba.core.byteflow                                          ; DEBUG   ; new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi42.0': '$40get_iter.6'},
             State(pc_initial=42 nstack_initial=1): {'$phi44.1': '$42for_iter.2'}})
2024-07-16 10:44:46,571 ; numba.core.byteflow                                          ; DEBUG   ; ----------------------DONE Prune PHIs-----------------------
2024-07-16 10:44:46,571 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$const4.0'}), (6, {'value': '$const4.0'}), (8, {'res': '$const8.1'}), (10, {'value': '$const8.1'}), (12, {'idx': 0, 'res': '$12load_global.2'}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {'res': '$shape24.4'}), (26, {}), (28, {}), (30, {'func': '$12load_global.2', 'args': ['$shape24.4'], 'kw_names': None, 'res': '$30call.5'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {'value': '$30call.5', 'res': '$40get_iter.6'})), outgoing_phis={'$phi42.0': '$40get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$40get_iter.6',)})
2024-07-16 10:44:46,571 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=42 nstack_initial=1):
AdaptBlockInfo(insts=((42, {'iterator': '$phi42.0', 'pair': '$42for_iter.1', 'indval': '$42for_iter.2', 'pred': '$42for_iter.3'}),), outgoing_phis={'$phi44.1': '$42for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 44: ('$phi42.0', '$42for_iter.2')})
2024-07-16 10:44:46,571 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=44 nstack_initial=2):
AdaptBlockInfo(insts=((44, {'iterable': '$phi44.1', 'stores': ['$44unpack_sequence.2', '$44unpack_sequence.3'], 'tupleobj': '$44unpack_sequence.4'}), (46, {}), (48, {'value': '$44unpack_sequence.2'}), (50, {'value': '$44unpack_sequence.3'}), (52, {'res': '$s52.5'}), (54, {'res': '$const54.6'}), (56, {'lhs': '$s52.5', 'rhs': '$const54.6', 'res': '$56compare_op.7'}), (58, {}), (60, {}), (62, {'pred': '$56compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi44.0',), 80: ('$phi44.0',)})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'res': '$num_neg_value64.1'}), (66, {'res': '$const66.2'}), (68, {'op': '+=', 'lhs': '$num_neg_value64.1', 'rhs': '$const66.2', 'res': '$binop_iadd68.3'}), (70, {}), (72, {'value': '$binop_iadd68.3'}), (74, {'res': '$ax74.4'}), (76, {'value': '$ax74.4'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$phi64.0',)})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$known_size80.1'}), (82, {'res': '$s82.2'}), (84, {'op': '*=', 'lhs': '$known_size80.1', 'rhs': '$s82.2', 'res': '$binop_imul84.3'}), (86, {}), (88, {'value': '$binop_imul84.3'}), (90, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$phi80.0',)})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$num_neg_value92.0'}), (94, {'res': '$const94.1'}), (96, {'lhs': '$num_neg_value92.0', 'rhs': '$const94.1', 'res': '$96compare_op.2'}), (98, {}), (100, {}), (102, {'pred': '$96compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 150: ()})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$origsize104.0'}), (106, {'res': '$known_size106.1'}), (108, {'lhs': '$origsize104.0', 'rhs': '$known_size106.1', 'res': '$108compare_op.2'}), (110, {}), (112, {}), (114, {'pred': '$108compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: (), 146: ()})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'idx': 1, 'res': '$116load_global.0'}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {'res': '$const128.2'}), (130, {}), (132, {}), (134, {'func': '$116load_global.0', 'args': ['$const128.2'], 'kw_names': None, 'res': '$134call.3'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {'exc': '$134call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$const146.0'}), (148, {'retval': '$const146.0', 'castval': '$148return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$num_neg_value150.0'}), (152, {'res': '$const152.1'}), (154, {'lhs': '$num_neg_value150.0', 'rhs': '$const152.1', 'res': '$154compare_op.2'}), (156, {}), (158, {}), (160, {'pred': '$154compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={162: (), 268: ()})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=162 nstack_initial=0):
AdaptBlockInfo(insts=((162, {'res': '$known_size162.0'}), (164, {'res': '$const164.1'}), (166, {'lhs': '$known_size162.0', 'rhs': '$const164.1', 'res': '$166compare_op.2'}), (168, {}), (170, {}), (172, {'pred': '$166compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={174: (), 192: ()})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=((174, {'res': '$const174.0'}), (176, {'value': '$const174.0'}), (178, {'res': '$origsize178.1'}), (180, {'res': '$const180.2'}), (182, {'lhs': '$origsize178.1', 'rhs': '$const180.2', 'res': '$182compare_op.3'}), (184, {}), (186, {}), (188, {'value': '$182compare_op.3'}), (190, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: ()})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$origsize192.0'}), (194, {'res': '$known_size194.1'}), (196, {'op': '//', 'lhs': '$origsize192.0', 'rhs': '$known_size194.1', 'res': '$binop_floordiv196.2'}), (198, {}), (200, {'value': '$binop_floordiv196.2'}), (202, {'res': '$origsize202.3'}), (204, {'res': '$known_size204.4'}), (206, {'op': '%', 'lhs': '$origsize202.3', 'rhs': '$known_size204.4', 'res': '$binop_mod206.5'}), (208, {}), (210, {'res': '$const210.6'}), (212, {'lhs': '$binop_mod206.5', 'rhs': '$const210.6', 'res': '$212compare_op.7'}), (214, {}), (216, {}), (218, {'value': '$212compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: ()})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=220 nstack_initial=0):
AdaptBlockInfo(insts=((220, {'res': '$ok220.0'}), (222, {'pred': '$ok220.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: (), 254: ()})
2024-07-16 10:44:46,572 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=224 nstack_initial=0):
AdaptBlockInfo(insts=((224, {'idx': 1, 'res': '$224load_global.0'}), (226, {}), (228, {}), (230, {}), (232, {}), (234, {}), (236, {'res': '$const236.2'}), (238, {}), (240, {}), (242, {'func': '$224load_global.0', 'args': ['$const236.2'], 'kw_names': None, 'res': '$242call.3'}), (244, {}), (246, {}), (248, {}), (250, {}), (252, {'exc': '$242call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,573 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=254 nstack_initial=0):
AdaptBlockInfo(insts=((254, {'res': '$inferred254.0'}), (256, {'res': '$shape256.1'}), (258, {'res': '$neg_ax258.2'}), (260, {'target': '$shape256.1', 'index': '$neg_ax258.2', 'value': '$inferred254.0'}), (262, {}), (264, {'res': '$const264.3'}), (266, {'retval': '$const264.3', 'castval': '$266return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,573 ; numba.core.byteflow                                          ; DEBUG   ; block_infos State(pc_initial=268 nstack_initial=0):
AdaptBlockInfo(insts=((268, {'idx': 1, 'res': '$268load_global.0'}), (270, {}), (272, {}), (274, {}), (276, {}), (278, {}), (280, {'res': '$const280.2'}), (282, {}), (284, {}), (286, {'func': '$268load_global.0', 'args': ['$const280.2'], 'kw_names': None, 'res': '$286call.3'}), (288, {}), (290, {}), (292, {}), (294, {}), (296, {'exc': '$286call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-07-16 10:44:46,575 ; numba.core.interpreter                                       ; DEBUG   ; label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    $12load_global.2 = global(enumerate: <class 'enumerate'>) ['$12load_global.2']
    $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.2', '$30call.5', 'shape']
    $40get_iter.6 = getiter(value=$30call.5) ['$30call.5', '$40get_iter.6']
    $phi42.0 = $40get_iter.6                 ['$40get_iter.6', '$phi42.0']
    jump 42                                  []
label 42:
    $42for_iter.1 = iternext(value=$phi42.0) ['$42for_iter.1', '$phi42.0']
    $42for_iter.2 = pair_first(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.2']
    $42for_iter.3 = pair_second(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.3']
    $phi44.1 = $42for_iter.2                 ['$42for_iter.2', '$phi44.1']
    branch $42for_iter.3, 44, 92             ['$42for_iter.3']
label 44:
    $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2) ['$44unpack_sequence.4', '$phi44.1']
    $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.2', '$44unpack_sequence.4']
    $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.3', '$44unpack_sequence.4']
    ax = $44unpack_sequence.2                ['$44unpack_sequence.2', 'ax']
    s = $44unpack_sequence.3                 ['$44unpack_sequence.3', 's']
    $const54.6 = const(int, 0)               ['$const54.6']
    $56compare_op.7 = s < $const54.6         ['$56compare_op.7', '$const54.6', 's']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.7', '$62pred', 'bool62']
    branch $62pred, 64, 80                   ['$62pred']
label 64:
    $const66.2 = const(int, 1)               ['$const66.2']
    $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd68.3', '$const66.2', 'num_neg_value']
    num_neg_value = $binop_iadd68.3          ['$binop_iadd68.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 42                                  []
label 80:
    $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul84.3', 'known_size', 's']
    known_size = $binop_imul84.3             ['$binop_imul84.3', 'known_size']
    jump 42                                  []
label 92:
    $const94.1 = const(int, 0)               ['$const94.1']
    $96compare_op.2 = num_neg_value == $const94.1 ['$96compare_op.2', '$const94.1', 'num_neg_value']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None) ['$102pred', '$96compare_op.2', 'bool102']
    branch $102pred, 104, 150                ['$102pred']
label 104:
    $108compare_op.2 = origsize != known_size ['$108compare_op.2', 'known_size', 'origsize']
    bool114 = global(bool: <class 'bool'>)   ['bool114']
    $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None) ['$108compare_op.2', '$114pred', 'bool114']
    branch $114pred, 116, 146                ['$114pred']
label 116:
    $116load_global.0 = global(ValueError: <class 'ValueError'>) ['$116load_global.0']
    $const128.2 = const(str, total size of new array must be unchanged) ['$const128.2']
    $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_global.0', '$134call.3', '$const128.2']
    raise $134call.3                         ['$134call.3']
label 146:
    $const146.0 = const(NoneType, None)      ['$const146.0']
    $148return_value.1 = cast(value=$const146.0) ['$148return_value.1', '$const146.0']
    return $148return_value.1                ['$148return_value.1']
label 150:
    $const152.1 = const(int, 1)              ['$const152.1']
    $154compare_op.2 = num_neg_value == $const152.1 ['$154compare_op.2', '$const152.1', 'num_neg_value']
    bool160 = global(bool: <class 'bool'>)   ['bool160']
    $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None) ['$154compare_op.2', '$160pred', 'bool160']
    branch $160pred, 162, 268                ['$160pred']
label 162:
    $const164.1 = const(int, 0)              ['$const164.1']
    $166compare_op.2 = known_size == $const164.1 ['$166compare_op.2', '$const164.1', 'known_size']
    bool172 = global(bool: <class 'bool'>)   ['bool172']
    $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None) ['$166compare_op.2', '$172pred', 'bool172']
    branch $172pred, 174, 192                ['$172pred']
label 174:
    inferred = const(int, 0)                 ['inferred']
    $const180.2 = const(int, 0)              ['$const180.2']
    ok = origsize == $const180.2             ['$const180.2', 'ok', 'origsize']
    jump 220                                 []
label 192:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $binop_mod206.5 = origsize % known_size  ['$binop_mod206.5', 'known_size', 'origsize']
    $const210.6 = const(int, 0)              ['$const210.6']
    ok = $binop_mod206.5 == $const210.6      ['$binop_mod206.5', '$const210.6', 'ok']
    jump 220                                 []
label 220:
    bool222 = global(bool: <class 'bool'>)   ['bool222']
    $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:2063),), kws=(), vararg=None, varkwarg=None, target=None) ['$222pred', 'bool222', 'ok']
    branch $222pred, 254, 224                ['$222pred']
label 224:
    $224load_global.0 = global(ValueError: <class 'ValueError'>) ['$224load_global.0']
    $const236.2 = const(str, total size of new array must be unchanged) ['$const236.2']
    $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None) ['$224load_global.0', '$242call.3', '$const236.2']
    raise $242call.3                         ['$242call.3']
label 254:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    $const264.3 = const(NoneType, None)      ['$const264.3']
    $266return_value.4 = cast(value=$const264.3) ['$266return_value.4', '$const264.3']
    return $266return_value.4                ['$266return_value.4']
label 268:
    $268load_global.0 = global(ValueError: <class 'ValueError'>) ['$268load_global.0']
    $const280.2 = const(str, multiple negative shape values) ['$const280.2']
    $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None) ['$268load_global.0', '$286call.3', '$const280.2']
    raise $286call.3                         ['$286call.3']

2024-07-16 10:44:46,598 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 0
2024-07-16 10:44:46,598 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 42
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,599 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,600 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,600 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,600 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,600 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,600 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 44
2024-07-16 10:44:46,600 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 64
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 80
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = $binop_imul84.3
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 92
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 104
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 116
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 146
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 150
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 162
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 174
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 192
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 220
2024-07-16 10:44:46,601 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:2063),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 224
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 254
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 268
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block analysis pass on 269
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._GatherDefsHandler object at 0x00000263768BEAD0>
2024-07-16 10:44:46,609 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,614 ; numba.core.ssa                                               ; DEBUG   ; defs defaultdict(<class 'list'>,
            {'$102pred': [(<numba.core.ir.Assign object at 0x00000263768BFB50>,
                           92)],
             '$108compare_op.2': [(<numba.core.ir.Assign object at 0x00000263768B4190>,
                                   104)],
             '$114pred': [(<numba.core.ir.Assign object at 0x00000263768B4590>,
                           104)],
             '$116load_global.0': [(<numba.core.ir.Assign object at 0x00000263768B4790>,
                                    116)],
             '$12load_global.2': [(<numba.core.ir.Assign object at 0x00000263768BC550>,
                                   0)],
             '$134call.3': [(<numba.core.ir.Assign object at 0x00000263768B4B90>,
                             116)],
             '$148return_value.1': [(<numba.core.ir.Assign object at 0x00000263768B5110>,
                                     146)],
             '$154compare_op.2': [(<numba.core.ir.Assign object at 0x00000263768B56D0>,
                                   150)],
             '$160pred': [(<numba.core.ir.Assign object at 0x00000263768B5AD0>,
                           150)],
             '$166compare_op.2': [(<numba.core.ir.Assign object at 0x00000263768B6090>,
                                   162)],
             '$172pred': [(<numba.core.ir.Assign object at 0x00000263768B6450>,
                           162)],
             '$222pred': [(<numba.core.ir.Assign object at 0x00000263768C0550>,
                           220)],
             '$224load_global.0': [(<numba.core.ir.Assign object at 0x00000263768C07D0>,
                                    224)],
             '$242call.3': [(<numba.core.ir.Assign object at 0x00000263768C0C50>,
                             224)],
             '$266return_value.4': [(<numba.core.ir.Assign object at 0x00000263768C1810>,
                                     254)],
             '$268load_global.0': [(<numba.core.ir.Assign object at 0x00000263768C1950>,
                                    268)],
             '$286call.3': [(<numba.core.ir.Assign object at 0x00000263768C1DD0>,
                             268)],
             '$30call.5': [(<numba.core.ir.Assign object at 0x00000263768BC850>,
                            0)],
             '$40get_iter.6': [(<numba.core.ir.Assign object at 0x00000263768BCA50>,
                                0)],
             '$42for_iter.1': [(<numba.core.ir.Assign object at 0x00000263768BCC90>,
                                42)],
             '$42for_iter.2': [(<numba.core.ir.Assign object at 0x00000263768BCD50>,
                                42)],
             '$42for_iter.3': [(<numba.core.ir.Assign object at 0x00000263768BCE50>,
                                42)],
             '$44unpack_sequence.2': [(<numba.core.ir.Assign object at 0x00000263768BD290>,
                                       44)],
             '$44unpack_sequence.3': [(<numba.core.ir.Assign object at 0x00000263768BD390>,
                                       44)],
             '$44unpack_sequence.4': [(<numba.core.ir.Assign object at 0x00000263768BD190>,
                                       44)],
             '$56compare_op.7': [(<numba.core.ir.Assign object at 0x00000263768BDB90>,
                                  44)],
             '$62pred': [(<numba.core.ir.Assign object at 0x00000263768BDF50>,
                          44)],
             '$96compare_op.2': [(<numba.core.ir.Assign object at 0x00000263768BF790>,
                                  92)],
             '$binop_iadd68.3': [(<numba.core.ir.Assign object at 0x00000263768BE550>,
                                  64)],
             '$binop_imul84.3': [(<numba.core.ir.Assign object at 0x00000263768BF050>,
                                  80)],
             '$binop_mod206.5': [(<numba.core.ir.Assign object at 0x00000263768B7B90>,
                                  192)],
             '$const128.2': [(<numba.core.ir.Assign object at 0x00000263768B49D0>,
                              116)],
             '$const146.0': [(<numba.core.ir.Assign object at 0x00000263768B4ED0>,
                              146)],
             '$const152.1': [(<numba.core.ir.Assign object at 0x00000263768B54D0>,
                              150)],
             '$const164.1': [(<numba.core.ir.Assign object at 0x00000263768B5ED0>,
                              162)],
             '$const180.2': [(<numba.core.ir.Assign object at 0x00000263768B6BD0>,
                              174)],
             '$const210.6': [(<numba.core.ir.Assign object at 0x00000263768B7D90>,
                              192)],
             '$const236.2': [(<numba.core.ir.Assign object at 0x00000263768C0A50>,
                              224)],
             '$const264.3': [(<numba.core.ir.Assign object at 0x00000263768C1590>,
                              254)],
             '$const280.2': [(<numba.core.ir.Assign object at 0x00000263768C1B50>,
                              268)],
             '$const54.6': [(<numba.core.ir.Assign object at 0x00000263768BD9D0>,
                             44)],
             '$const66.2': [(<numba.core.ir.Assign object at 0x00000263768BE350>,
                             64)],
             '$const94.1': [(<numba.core.ir.Assign object at 0x00000263768BF590>,
                             92)],
             '$phi42.0': [(<numba.core.ir.Assign object at 0x0000026376892590>,
                           0)],
             '$phi44.1': [(<numba.core.ir.Assign object at 0x00000263768BCED0>,
                           42)],
             'ax': [(<numba.core.ir.Assign object at 0x00000263768BD4D0>, 44)],
             'bool102': [(<numba.core.ir.Assign object at 0x00000263768BF990>,
                          92)],
             'bool114': [(<numba.core.ir.Assign object at 0x00000263768B43D0>,
                          104)],
             'bool160': [(<numba.core.ir.Assign object at 0x00000263768B5910>,
                          150)],
             'bool172': [(<numba.core.ir.Assign object at 0x00000263768B6290>,
                          162)],
             'bool222': [(<numba.core.ir.Assign object at 0x00000263768C0390>,
                          220)],
             'bool62': [(<numba.core.ir.Assign object at 0x00000263768BDDD0>,
                         44)],
             'inferred': [(<numba.core.ir.Assign object at 0x00000263768B66D0>,
                           174),
                          (<numba.core.ir.Assign object at 0x00000263768B7590>,
                           192)],
             'known_size': [(<numba.core.ir.Assign object at 0x00000263768910D0>,
                             0),
                            (<numba.core.ir.Assign object at 0x00000263768BF0D0>,
                             80)],
             'neg_ax': [(<numba.core.ir.Assign object at 0x00000263768BEA10>,
                         64)],
             'num_neg_value': [(<numba.core.ir.Assign object at 0x0000026376893A90>,
                                0),
                               (<numba.core.ir.Assign object at 0x00000263768BE6D0>,
                                64)],
             'ok': [(<numba.core.ir.Assign object at 0x00000263768B6DD0>, 174),
                    (<numba.core.ir.Assign object at 0x00000263768B7F90>, 192)],
             'origsize': [(<numba.core.ir.Assign object at 0x0000026376891A90>,
                           0)],
             's': [(<numba.core.ir.Assign object at 0x00000263768BD650>, 44)],
             'shape': [(<numba.core.ir.Assign object at 0x0000026376891990>,
                        0)]})
2024-07-16 10:44:46,615 ; numba.core.ssa                                               ; DEBUG   ; SSA violators {'num_neg_value', 'ok', 'known_size', 'neg_ax', 'inferred'}
2024-07-16 10:44:46,615 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var num_neg_value
2024-07-16 10:44:46,615 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,615 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,615 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; first assign: num_neg_value
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; replaced with: num_neg_value = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = $binop_iadd68.3
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; replaced with: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = $binop_imul84.3
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:2063),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BC150>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000263768BF210>],
             64: [<numba.core.ir.Assign object at 0x0000026376892210>]})
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,616 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,630 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,631 ; numba.core.ssa                                               ; DEBUG   ; find_def var='num_neg_value' stmt=$binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,631 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 64
2024-07-16 10:44:46,631 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 64
2024-07-16 10:44:46,631 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-07-16 10:44:46,631 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-07-16 10:44:46,632 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-07-16 10:44:46,632 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,632 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 42
2024-07-16 10:44:46,632 ; numba.core.ssa                                               ; DEBUG   ; insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 42
2024-07-16 10:44:46,632 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-07-16 10:44:46,632 ; numba.core.ssa                                               ; DEBUG   ; incoming_def num_neg_value = const(int, 0)
2024-07-16 10:44:46,632 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 269
2024-07-16 10:44:46,632 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 269
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 269
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 64
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; incoming_def num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 80
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 80
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 80
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,633 ; numba.core.ssa                                               ; DEBUG   ; incoming_def num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046)], incoming_blocks=[0])
2024-07-16 10:44:46,634 ; numba.core.ssa                                               ; DEBUG   ; incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,634 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,634 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,634 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,634 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = $binop_imul84.3
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value == $const94.1
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; find_def var='num_neg_value' stmt=$96compare_op.2 = num_neg_value == $const94.1
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value == $const152.1
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; find_def var='num_neg_value' stmt=$154compare_op.2 = num_neg_value == $const152.1
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:2063),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9950>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var ok
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046), Var(num_neg_value.3, arrayobj.py:2050)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,635 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,646 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = $binop_imul84.3
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,647 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,649 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; first assign: ok
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; replaced with: ok = origsize == $const180.2
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; replaced with: ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:2063),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376893D50>
2024-07-16 10:44:46,651 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {174: [<numba.core.ir.Assign object at 0x0000026376893AD0>],
             192: [<numba.core.ir.Assign object at 0x00000263768B9C90>]})
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046), Var(num_neg_value.3, arrayobj.py:2050)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = $binop_imul84.3
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-07-16 10:44:46,656 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,662 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,662 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,662 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,662 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,662 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,662 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,662 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,662 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,663 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,665 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,665 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,665 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,665 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,666 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:2063),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,667 ; numba.core.ssa                                               ; DEBUG   ; find_def var='ok' stmt=$222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:2063),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,667 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 220
2024-07-16 10:44:46,667 ; numba.core.ssa                                               ; DEBUG   ; insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 220
2024-07-16 10:44:46,667 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 192
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; incoming_def ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 174
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; incoming_def ok = origsize == $const180.2
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:2067),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FF550>
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var known_size
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; first assign: known_size
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; replaced with: known_size = const(int, 1)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,668 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046), Var(num_neg_value.3, arrayobj.py:2050)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = $binop_imul84.3
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; replaced with: known_size.1 = $binop_imul84.3
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,672 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,678 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,679 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,679 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,679 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,679 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,679 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,679 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2066), Var(ok, arrayobj.py:2063)], incoming_blocks=[192, 174])
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:2067),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,680 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768B99D0>
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000263768B88D0>],
             80: [<numba.core.ir.Assign object at 0x0000026376890DD0>]})
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,683 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046), Var(num_neg_value.3, arrayobj.py:2050)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,684 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=$binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 80
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 80
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 42
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 42
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; incoming_def known_size = const(int, 1)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 269
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 269
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 269
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 64
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 64
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 64
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; incoming_def known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2047)], incoming_blocks=[0])
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 80
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; incoming_def known_size.1 = $binop_imul84.3
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; incoming_def known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:2053), Var(known_size.1, arrayobj.py:2053)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=$108compare_op.2 = origsize != known_size
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 104
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 104
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $108compare_op.2 = origsize != known_size.2
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size == $const164.1
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=$166compare_op.2 = known_size == $const164.1
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 162
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 150 from label 162
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 150
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $166compare_op.2 = known_size.2 == $const164.1
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=inferred = origsize // known_size
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 192
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 162 from label 192
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 162
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 162
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 150 from label 162
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 150
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; replaced with: inferred = origsize // known_size.2
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def var='known_size' stmt=$binop_mod206.5 = origsize % known_size
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 192
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; idom 162 from label 192
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 162
2024-07-16 10:44:46,685 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 162
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; idom 150 from label 162
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 150
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; replaced with: $binop_mod206.5 = origsize % known_size.2
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2066), Var(ok, arrayobj.py:2063)], incoming_blocks=[192, 174])
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:2067),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,699 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x0000026376893F10>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var neg_ax
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2047), Var(known_size.3, arrayobj.py:2053)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046), Var(num_neg_value.3, arrayobj.py:2050)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; first assign: neg_ax
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; replaced with: neg_ax = ax
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,702 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size.2
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2066), Var(ok, arrayobj.py:2063)], incoming_blocks=[192, 174])
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:2067),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,710 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,715 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,715 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x0000026376890CD0>
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:2053), Var(known_size.1, arrayobj.py:2053)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {64: [<numba.core.ir.Assign object at 0x0000026376892150>]})
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,716 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2047), Var(known_size.3, arrayobj.py:2053)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046), Var(num_neg_value.3, arrayobj.py:2050)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size.2
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2066), Var(ok, arrayobj.py:2063)], incoming_blocks=[192, 174])
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:2067),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax] = inferred
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def var='neg_ax' stmt=shape[neg_ax] = inferred
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 254
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; idom 220 from label 254
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 220
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 220
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; idom 162 from label 220
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 162
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 162
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; idom 150 from label 162
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 150
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 150
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; idom 92 from label 150
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 92
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 92
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 92
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 42
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; insert phi node neg_ax.1 = phi(incoming_values=[], incoming_blocks=[]) at 42
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 0
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 0
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; incoming_def <class 'numba.core.ssa.UndefinedVariable'>
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 269
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 269
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; insert phi node neg_ax.2 = phi(incoming_values=[], incoming_blocks=[]) at 269
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 64
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; incoming_def neg_ax = ax
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 80
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 80
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; idom 44 from label 80
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 44
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 44
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; idom 42 from label 44
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 42
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; incoming_def neg_ax.1 = phi(incoming_values=[Undefined], incoming_blocks=[0])
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; incoming_def neg_ax.2 = phi(incoming_values=[Var(neg_ax, arrayobj.py:2051), Var(neg_ax.1, arrayobj.py:2069)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; replaced with: shape[neg_ax.1] = inferred
2024-07-16 10:44:46,717 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263768B9FD0>
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:2053), Var(known_size.1, arrayobj.py:2053)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,731 ; numba.core.ssa                                               ; DEBUG   ; Fix SSA violator on var inferred
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,733 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax.1 = phi(incoming_values=[Undefined, Var(neg_ax.2, arrayobj.py:2069)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2047), Var(known_size.3, arrayobj.py:2053)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046), Var(num_neg_value.3, arrayobj.py:2050)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; first assign: inferred
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; replaced with: inferred = const(int, 0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = origsize // known_size.2
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; replaced with: inferred.1 = origsize // known_size.2
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2066), Var(ok, arrayobj.py:2063)], incoming_blocks=[192, 174])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:2067),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax.1] = inferred
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FreshVarHandler object at 0x00000263768BA150>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax.2 = phi(incoming_values=[Var(neg_ax, arrayobj.py:2051), Var(neg_ax.1, arrayobj.py:2069)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:2053), Var(known_size.1, arrayobj.py:2053)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Replaced assignments: defaultdict(<class 'list'>,
            {174: [<numba.core.ir.Assign object at 0x00000263768D8850>],
             192: [<numba.core.ir.Assign object at 0x00000263768DA190>]})
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 0
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: origsize = arg(0, name=origsize)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape = arg(1, name=shape)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value = const(int, 0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size = const(int, 1)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:2045)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $40get_iter.6 = getiter(value=$30call.5)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi42.0 = $40get_iter.6
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 42
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax.1 = phi(incoming_values=[Undefined, Var(neg_ax.2, arrayobj.py:2069)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2047), Var(known_size.3, arrayobj.py:2053)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2046), Var(num_neg_value.3, arrayobj.py:2050)], incoming_blocks=[0, 269])
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2024-07-16 10:44:46,734 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2024-07-16 10:44:46,747 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2024-07-16 10:44:46,747 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $phi44.1 = $42for_iter.2
2024-07-16 10:44:46,747 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $42for_iter.3, 44, 92
2024-07-16 10:44:46,747 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 44
2024-07-16 10:44:46,747 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,747 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2024-07-16 10:44:46,747 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,748 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-07-16 10:44:46,748 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ax = $44unpack_sequence.2
2024-07-16 10:44:46,748 ; numba.core.ssa                                               ; DEBUG   ; on stmt: s = $44unpack_sequence.3
2024-07-16 10:44:46,748 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const54.6 = const(int, 0)
2024-07-16 10:44:46,748 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $56compare_op.7 = s < $const54.6
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool62 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:2049),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $62pred, 64, 80
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 64
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const66.2 = const(int, 1)
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.1 = $binop_iadd68.3
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax = ax
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 80
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.1 = $binop_imul84.3
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 269
2024-07-16 10:44:46,749 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 92
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const94.1 = const(int, 0)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $96compare_op.2 = num_neg_value.2 == $const94.1
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool102 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:2055),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $102pred, 104, 150
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 104
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $108compare_op.2 = origsize != known_size.2
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool114 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $114pred, 116, 146
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 116
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:2057)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 146
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const146.0 = const(NoneType, None)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $148return_value.1 = cast(value=$const146.0)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $148return_value.1
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 150
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const152.1 = const(int, 1)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $154compare_op.2 = num_neg_value.2 == $const152.1
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool160 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:2059),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $160pred, 162, 268
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 162
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const164.1 = const(int, 0)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $166compare_op.2 = known_size.2 == $const164.1
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool172 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:2061),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $172pred, 174, 192
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 174
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred = const(int, 0)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const180.2 = const(int, 0)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok = origsize == $const180.2
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 192
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: inferred.1 = origsize // known_size.2
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $binop_mod206.5 = origsize % known_size.2
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const210.6 = const(int, 0)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.1 = $binop_mod206.5 == $const210.6
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 220
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 220
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2066), Var(ok, arrayobj.py:2063)], incoming_blocks=[192, 174])
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: bool222 = global(bool: <class 'bool'>)
2024-07-16 10:44:46,751 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:2067),), kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: branch $222pred, 254, 224
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 224
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:2068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 254
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: shape[neg_ax.1] = inferred
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; find_def var='inferred' stmt=shape[neg_ax.1] = inferred
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 254
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; idom 220 from label 254
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 220
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_top label 220
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 220
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 192
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; incoming_def inferred.1 = origsize // known_size.2
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; find_def_from_bottom label 174
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; incoming_def inferred = const(int, 0)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; replaced with: shape[neg_ax.1] = inferred.2
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const264.3 = const(NoneType, None)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $266return_value.4 = cast(value=$const264.3)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: return $266return_value.4
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 268
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $const280.2 = const(str, multiple negative shape values)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2072)], kws=(), vararg=None, varkwarg=None, target=None)
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; ==== SSA block rewrite pass on 269
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; Running <numba.core.ssa._FixSSAVars object at 0x00000263767FC110>
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: neg_ax.2 = phi(incoming_values=[Var(neg_ax, arrayobj.py:2051), Var(neg_ax.1, arrayobj.py:2069)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:2053), Var(known_size.1, arrayobj.py:2053)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:2050), Var(num_neg_value.2, arrayobj.py:2050)], incoming_blocks=[64, 80])
2024-07-16 10:44:46,758 ; numba.core.ssa                                               ; DEBUG   ; on stmt: jump 42
2024-07-16 10:44:48,187 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Selenium Manager binary found at: C:\Users\jablonski\AppData\Local\anaconda3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe
2024-07-16 10:44:48,188 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Executing process: C:\Users\jablonski\AppData\Local\anaconda3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe --browser firefox --debug --language-binding python --output json
2024-07-16 10:44:48,739 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; geckodriver not found in PATH
2024-07-16 10:44:48,739 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; firefox detected at C:\Program Files\Mozilla Firefox\firefox.exe
2024-07-16 10:44:48,741 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Running command: wmic datafile where name='C:\\Program Files\\Mozilla Firefox\\firefox.exe' get Version /value
2024-07-16 10:44:48,741 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Output: "\r\r\n\r\r\nVersion=127.0.2.8941\r\r\n\r\r\n\r\r\n\r"
2024-07-16 10:44:48,741 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Detected browser: firefox 127.0.2.8941
2024-07-16 10:44:48,741 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Required driver: geckodriver 0.34.0
2024-07-16 10:44:48,741 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; geckodriver 0.34.0 already in the cache
2024-07-16 10:44:48,741 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Driver path: C:\Users\jablonski\.cache\selenium\geckodriver\win64\0.34.0\geckodriver.exe
2024-07-16 10:44:48,741 ; selenium.webdriver.common.selenium_manager                   ; DEBUG   ; Browser path: C:\Program Files\Mozilla Firefox\firefox.exe
2024-07-16 10:44:48,748 ; selenium.webdriver.common.service                            ; DEBUG   ; Started executable: `C:\Users\jablonski\.cache\selenium\geckodriver\win64\0.34.0\geckodriver.exe` in a child process with pid: 5024 using 0 to output -3
2024-07-16 10:44:49,767 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; POST http://localhost:55821/session {'capabilities': {'firstMatch': [{}], 'alwaysMatch': {'browserName': 'firefox', 'acceptInsecureCerts': True, 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, 'browserVersion': None, 'moz:firefoxOptions': {'binary': 'C:\\Program Files\\Mozilla Firefox\\firefox.exe', 'args': ['--headless']}}}}
2024-07-16 10:44:49,771 ; urllib3.connectionpool                                       ; DEBUG   ; Starting new HTTP connection (1): localhost:55821
2024-07-16 10:44:54,759 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:55821 "POST /session HTTP/1.1" 200 0
2024-07-16 10:44:54,759 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":{"sessionId":"b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5","capabilities":{"acceptInsecureCerts":true,"browserName":"firefox","browserVersion":"127.0.2","moz:accessibilityChecks":false,"moz:buildID":"20240624183754","moz:debuggerAddress":"127.0.0.1:55822","moz:geckodriverVersion":"0.34.0","moz:headless":true,"moz:platformVersion":"10.0","moz:processID":19396,"moz:profile":"C:\\Users\\JABLON~1\\AppData\\Local\\Temp\\rust_mozprofilea99qQa","moz:shutdownTimeout":60000,"moz:webdriverClick":true,"moz:windowless":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0"}}} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '843', 'date': 'Tue, 16 Jul 2024 08:44:51 GMT'})
2024-07-16 10:44:54,759 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-07-16 10:44:55,191 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; POST http://localhost:55821/session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5/url {'url': 'file:///C:\\Users\\JABLON~1\\AppData\\Local\\Temp\\folium__fide7m4.html'}
2024-07-16 10:44:57,099 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:55821 "POST /session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5/url HTTP/1.1" 200 0
2024-07-16 10:44:57,100 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '14', 'date': 'Tue, 16 Jul 2024 08:44:54 GMT'})
2024-07-16 10:44:57,100 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-07-16 10:44:57,101 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; POST http://localhost:55821/session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5/window/fullscreen {}
2024-07-16 10:44:57,679 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:55821 "POST /session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5/window/fullscreen HTTP/1.1" 200 0
2024-07-16 10:44:57,680 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":{"x":0,"y":0,"width":1366,"height":768}} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '49', 'date': 'Tue, 16 Jul 2024 08:44:57 GMT'})
2024-07-16 10:44:57,681 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-07-16 10:45:02,682 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; POST http://localhost:55821/session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5/element {'using': 'css selector', 'value': '.folium-map'}
2024-07-16 10:45:02,704 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:55821 "POST /session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5/element HTTP/1.1" 200 0
2024-07-16 10:45:02,704 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":{"element-6066-11e4-a52e-4f735466cecf":"e5e1d4f4-f9cb-4c6d-8e4b-9a1298e1d08a"}} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '88', 'date': 'Tue, 16 Jul 2024 08:45:02 GMT'})
2024-07-16 10:45:02,706 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-07-16 10:45:02,706 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; GET http://localhost:55821/session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5/element/e5e1d4f4-f9cb-4c6d-8e4b-9a1298e1d08a/screenshot {}
2024-07-16 10:45:02,850 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:55821 "GET /session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5/element/e5e1d4f4-f9cb-4c6d-8e4b-9a1298e1d08a/screenshot HTTP/1.1" 200 0
2024-07-16 10:45:02,850 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":""} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '857008', 'date': 'Tue, 16 Jul 2024 08:45:02 GMT'})
2024-07-16 10:45:02,884 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-07-16 10:45:02,892 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; DELETE http://localhost:55821/session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5 {}
2024-07-16 10:45:04,300 ; urllib3.connectionpool                                       ; DEBUG   ; http://localhost:55821 "DELETE /session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5 HTTP/1.1" 200 0
2024-07-16 10:45:04,300 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '14', 'date': 'Tue, 16 Jul 2024 08:45:02 GMT'})
2024-07-16 10:45:04,300 ; selenium.webdriver.remote.remote_connection                  ; DEBUG   ; Finished Request
2024-07-16 10:45:10,439 ; PIL.PngImagePlugin                                           ; DEBUG   ; STREAM b'IHDR' 16 13
2024-07-16 10:45:10,439 ; PIL.PngImagePlugin                                           ; DEBUG   ; STREAM b'IDAT' 41 8192
2024-07-16 10:45:10,718 ; PIL.Image                                                    ; DEBUG   ; Importing BlpImagePlugin
2024-07-16 10:45:10,723 ; PIL.Image                                                    ; DEBUG   ; Importing BmpImagePlugin
2024-07-16 10:45:10,723 ; PIL.Image                                                    ; DEBUG   ; Importing BufrStubImagePlugin
2024-07-16 10:45:10,726 ; PIL.Image                                                    ; DEBUG   ; Importing CurImagePlugin
2024-07-16 10:45:10,727 ; PIL.Image                                                    ; DEBUG   ; Importing DcxImagePlugin
2024-07-16 10:45:10,733 ; PIL.Image                                                    ; DEBUG   ; Importing DdsImagePlugin
2024-07-16 10:45:10,744 ; PIL.Image                                                    ; DEBUG   ; Importing EpsImagePlugin
2024-07-16 10:45:10,747 ; PIL.Image                                                    ; DEBUG   ; Importing FitsImagePlugin
2024-07-16 10:45:10,747 ; PIL.Image                                                    ; DEBUG   ; Importing FliImagePlugin
2024-07-16 10:45:10,751 ; PIL.Image                                                    ; DEBUG   ; Importing FpxImagePlugin
2024-07-16 10:45:10,755 ; PIL.Image                                                    ; DEBUG   ; Image: failed to import FpxImagePlugin: No module named 'olefile'
2024-07-16 10:45:10,755 ; PIL.Image                                                    ; DEBUG   ; Importing FtexImagePlugin
2024-07-16 10:45:10,757 ; PIL.Image                                                    ; DEBUG   ; Importing GbrImagePlugin
2024-07-16 10:45:10,759 ; PIL.Image                                                    ; DEBUG   ; Importing GifImagePlugin
2024-07-16 10:45:10,759 ; PIL.Image                                                    ; DEBUG   ; Importing GribStubImagePlugin
2024-07-16 10:45:10,761 ; PIL.Image                                                    ; DEBUG   ; Importing Hdf5StubImagePlugin
2024-07-16 10:45:10,763 ; PIL.Image                                                    ; DEBUG   ; Importing IcnsImagePlugin
2024-07-16 10:45:10,769 ; PIL.Image                                                    ; DEBUG   ; Importing IcoImagePlugin
2024-07-16 10:45:10,772 ; PIL.Image                                                    ; DEBUG   ; Importing ImImagePlugin
2024-07-16 10:45:10,773 ; PIL.Image                                                    ; DEBUG   ; Importing ImtImagePlugin
2024-07-16 10:45:10,775 ; PIL.Image                                                    ; DEBUG   ; Importing IptcImagePlugin
2024-07-16 10:45:10,778 ; PIL.Image                                                    ; DEBUG   ; Importing JpegImagePlugin
2024-07-16 10:45:10,779 ; PIL.Image                                                    ; DEBUG   ; Importing Jpeg2KImagePlugin
2024-07-16 10:45:10,779 ; PIL.Image                                                    ; DEBUG   ; Importing McIdasImagePlugin
2024-07-16 10:45:10,780 ; PIL.Image                                                    ; DEBUG   ; Importing MicImagePlugin
2024-07-16 10:45:10,786 ; PIL.Image                                                    ; DEBUG   ; Image: failed to import MicImagePlugin: No module named 'olefile'
2024-07-16 10:45:10,786 ; PIL.Image                                                    ; DEBUG   ; Importing MpegImagePlugin
2024-07-16 10:45:10,789 ; PIL.Image                                                    ; DEBUG   ; Importing MpoImagePlugin
2024-07-16 10:45:10,796 ; PIL.Image                                                    ; DEBUG   ; Importing MspImagePlugin
2024-07-16 10:45:10,799 ; PIL.Image                                                    ; DEBUG   ; Importing PalmImagePlugin
2024-07-16 10:45:10,803 ; PIL.Image                                                    ; DEBUG   ; Importing PcdImagePlugin
2024-07-16 10:45:10,805 ; PIL.Image                                                    ; DEBUG   ; Importing PcxImagePlugin
2024-07-16 10:45:10,805 ; PIL.Image                                                    ; DEBUG   ; Importing PdfImagePlugin
2024-07-16 10:45:10,816 ; PIL.Image                                                    ; DEBUG   ; Importing PixarImagePlugin
2024-07-16 10:45:10,819 ; PIL.Image                                                    ; DEBUG   ; Importing PngImagePlugin
2024-07-16 10:45:10,819 ; PIL.Image                                                    ; DEBUG   ; Importing PpmImagePlugin
2024-07-16 10:45:10,819 ; PIL.Image                                                    ; DEBUG   ; Importing PsdImagePlugin
2024-07-16 10:45:10,822 ; PIL.Image                                                    ; DEBUG   ; Importing QoiImagePlugin
2024-07-16 10:45:10,823 ; PIL.Image                                                    ; DEBUG   ; Importing SgiImagePlugin
2024-07-16 10:45:10,825 ; PIL.Image                                                    ; DEBUG   ; Importing SpiderImagePlugin
2024-07-16 10:45:10,827 ; PIL.Image                                                    ; DEBUG   ; Importing SunImagePlugin
2024-07-16 10:45:10,828 ; PIL.Image                                                    ; DEBUG   ; Importing TgaImagePlugin
2024-07-16 10:45:10,830 ; PIL.Image                                                    ; DEBUG   ; Importing TiffImagePlugin
2024-07-16 10:45:10,831 ; PIL.Image                                                    ; DEBUG   ; Importing WebPImagePlugin
2024-07-16 10:45:10,851 ; PIL.Image                                                    ; DEBUG   ; Importing WmfImagePlugin
2024-07-16 10:45:10,853 ; PIL.Image                                                    ; DEBUG   ; Importing XbmImagePlugin
2024-07-16 10:45:10,856 ; PIL.Image                                                    ; DEBUG   ; Importing XpmImagePlugin
2024-07-16 10:45:10,858 ; PIL.Image                                                    ; DEBUG   ; Importing XVThumbImagePlugin
"} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '857008', 'date': 'Tue, 16 Jul 2024 08:45:02 GMT'})
Finished Request
DELETE http://localhost:55821/session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5 {}
http://localhost:55821 "DELETE /session/b09d4d50-8ea3-42bb-9ed1-eaeda34e5af5 HTTP/1.1" 200 0
Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'content-type': 'application/json; charset=utf-8', 'cache-control': 'no-cache', 'content-length': '14', 'date': 'Tue, 16 Jul 2024 08:45:02 GMT'})
Finished Request
STREAM b'IHDR' 16 13
STREAM b'IDAT' 41 8192
Importing BlpImagePlugin
Importing BmpImagePlugin
Importing BufrStubImagePlugin
Importing CurImagePlugin
Importing DcxImagePlugin
Importing DdsImagePlugin
Importing EpsImagePlugin
Importing FitsImagePlugin
Importing FliImagePlugin
Importing FpxImagePlugin
Image: failed to import FpxImagePlugin: No module named 'olefile'
Importing FtexImagePlugin
Importing GbrImagePlugin
Importing GifImagePlugin
Importing GribStubImagePlugin
Importing Hdf5StubImagePlugin
Importing IcnsImagePlugin
Importing IcoImagePlugin
Importing ImImagePlugin
Importing ImtImagePlugin
Importing IptcImagePlugin
Importing JpegImagePlugin
Importing Jpeg2KImagePlugin
Importing McIdasImagePlugin
Importing MicImagePlugin
Image: failed to import MicImagePlugin: No module named 'olefile'
Importing MpegImagePlugin
Importing MpoImagePlugin
Importing MspImagePlugin
Importing PalmImagePlugin
Importing PcdImagePlugin
Importing PcxImagePlugin
Importing PdfImagePlugin
Importing PixarImagePlugin
Importing PngImagePlugin
Importing PpmImagePlugin
Importing PsdImagePlugin
Importing QoiImagePlugin
Importing SgiImagePlugin
Importing SpiderImagePlugin
Importing SunImagePlugin
Importing TgaImagePlugin
Importing TiffImagePlugin
Importing WebPImagePlugin
Importing WmfImagePlugin
Importing XbmImagePlugin
Importing XpmImagePlugin
Importing XVThumbImagePlugin
