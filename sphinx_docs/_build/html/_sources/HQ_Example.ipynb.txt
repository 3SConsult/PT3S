{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "84751c6b-9b52-4253-a48e-c9017815b468",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "52ca4068-fc2f-4495-a123-57d5411ac6fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import subprocess\n",
    "import venv\n",
    "import setuptools\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e032842f-1969-4dba-a79a-95a21eb42353",
   "metadata": {},
   "source": [
    "# Ex7 Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "060a5ba8-369c-4ca3-b8dc-9c53b16ed97d",
   "metadata": {},
   "source": [
    "## 4D vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ed36511-3cf1-4e28-898b-474b02242587",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_rows = len(dfROHR)\n",
    "\n",
    "# Generate 4D vectors\n",
    "def generate_similar_vectors(num_rows, dimensions=4, variation=5):\n",
    "    base_vector = np.random.randint(0, 100, size=dimensions)\n",
    "    base_vector = (base_vector / base_vector.sum() * 100).astype(int)\n",
    "    vectors = [base_vector]\n",
    "    for _ in range(1, num_rows):\n",
    "        new_vector = vectors[-1] + np.random.randint(-variation, variation+1, size=dimensions)\n",
    "        new_vector = np.clip(new_vector, 0, 100)  \n",
    "        new_vector = (new_vector / new_vector.sum() * 100).astype(int) \n",
    "        vectors.append(new_vector)\n",
    "    return vectors\n",
    "\n",
    "vector4 = generate_similar_vectors(num_rows)\n",
    "dfROHR['vector4'] = vector4\n",
    "\n",
    "#dfROHR[['geometry', 'vector4']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ad60b99-631a-4c98-880b-05732376b622",
   "metadata": {},
   "outputs": [],
   "source": [
    "colors_4 = [\n",
    "    np.array([255, 0, 0]),    # Red\n",
    "    np.array([0, 0, 255]),    # Blue\n",
    "    np.array([0, 255, 0]),    # Green\n",
    "    np.array([255, 255, 0])   # Yellow\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17174d15-dad8-4037-bac3-e14574d85aa4",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=Rm.DINA3q)\n",
    "ncd.plot_src_spectrum(ax, dfROHR,'vector4', colors_4)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "678ec3f6-9913-4c36-8d31-23d12daeccfd",
   "metadata": {},
   "source": [
    "# Testing Examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "365ff152-31d8-440e-b555-2a200eba04e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Das Skript Example0.ipynb wurde erfolgreich ausgeführt.\n",
      "Das Skript Example1.ipynb wurde erfolgreich ausgeführt.\n",
      "Das Skript Example2.ipynb wurde erfolgreich ausgeführt.\n",
      "Fehler beim Ausführen des Skripts Planungsbeispiel.ipynb.\n"
     ]
    }
   ],
   "source": [
    "examples = ['Example0.ipynb', 'Example1.ipynb', 'Example2.ipynb','Planungsbeispiel.ipynb']\n",
    "\n",
    "for example in examples:\n",
    "    try:\n",
    "        result = subprocess.run(['python', example], check=True)\n",
    "        print(f'Das Skript {example} wurde erfolgreich ausgeführt.')\n",
    "    except subprocess.CalledProcessError:\n",
    "        print(f'Fehler beim Ausführen des Skripts {example}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8b7960f-a9e7-416f-89ba-e6c95f67cbc4",
   "metadata": {},
   "source": [
    "# Overwriting MX with Blank Files"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5e6d0114-0530-4799-b7c5-844cddd3ec42",
   "metadata": {},
   "source": [
    "Mx1 and Xml are not overwritten and not to be deleted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6d93a6c7-1ae6-4be9-9ad2-c4e632cf5df6",
   "metadata": {},
   "outputs": [],
   "source": [
    " files = [\"M-1-0-1.1.MX3\", \"M-1-0-1.1.MXS\", \"M-1-0-1.1.vec.h5\", \"M-1-0-1.ilog\", \"M-1-0-1.log\", \"M-1-0-1.MX2\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5b13fb84-81f6-4bea-a9e5-bc09833a2faa",
   "metadata": {},
   "outputs": [],
   "source": [
    "def delete_files(directory):\n",
    "    # Iterate over each file\n",
    "    for file in files:\n",
    "        # Construct the full file path\n",
    "        file_path = os.path.join(directory, file)\n",
    "        \n",
    "        # Check if the file exists\n",
    "        if os.path.isfile(file_path):\n",
    "            # Delete the file\n",
    "            os.remove(file_path)\n",
    "            print(f\"File {file} has been deleted.\")\n",
    "        else:\n",
    "            print(f\"File {file} does not exist.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28a4ac0c-6786-4110-97a1-461ff3eae70c",
   "metadata": {},
   "source": [
    "## Example1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54c4debc-71ba-4e94-8fd7-770a86dacfc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File M-1-0-1.1.MX3 has been deleted.\n",
      "File M-1-0-1.1.MXS has been deleted.\n",
      "File M-1-0-1.1.vec.h5 has been deleted.\n",
      "File M-1-0-1.ilog does not exist.\n",
      "File M-1-0-1.log has been deleted.\n",
      "File M-1-0-1.MX2 has been deleted.\n"
     ]
    }
   ],
   "source": [
    "directory = r\"C:\\Users\\jablonski\\3S\\PT3S\\Examples\\WDExample1\\B1\\V0\\BZ1\"\n",
    "delete_files(directory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6cadc2e-a2b9-4d33-a4f8-7338ab983279",
   "metadata": {},
   "source": [
    "## Example2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1da14500-0f6b-4c9e-820a-b3ae3eea1500",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File M-1-0-1.1.MX3 has been deleted.\n",
      "File M-1-0-1.1.MXS has been deleted.\n",
      "File M-1-0-1.1.vec.h5 has been deleted.\n",
      "File M-1-0-1.ilog does not exist.\n",
      "File M-1-0-1.log has been deleted.\n",
      "File M-1-0-1.MX2 has been deleted.\n"
     ]
    }
   ],
   "source": [
    "directory = r\"C:\\Users\\jablonski\\3S\\PT3S\\Examples\\WDExample2\\B1\\V0\\BZ1\"\n",
    "delete_files(directory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd928b30-da7a-4b47-a658-dcfa39c6ce5b",
   "metadata": {},
   "source": [
    "## Example3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7c69cd3b-6719-4b44-bd06-6e4b3b92a77e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File M-1-0-1.1.MX3 has been deleted.\n",
      "File M-1-0-1.1.MXS has been deleted.\n",
      "File M-1-0-1.1.vec.h5 has been deleted.\n",
      "File M-1-0-1.ilog has been deleted.\n",
      "File M-1-0-1.log has been deleted.\n",
      "File M-1-0-1.MX2 has been deleted.\n"
     ]
    }
   ],
   "source": [
    "directory = r\"C:\\Users\\jablonski\\3S\\PT3S\\Examples\\WDExample3\\B1\\V0\\BZ1\"\n",
    "delete_files(directory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9822673c-b84d-4a8c-879d-1533afab0fa3",
   "metadata": {},
   "source": [
    "## Overwritting as blanks"
   ]
  },
  {
   "cell_type": "raw",
   "id": "9d3b9d80-d458-47cd-9534-988d5aade18b",
   "metadata": {},
   "source": [
    "directory = r\"C:\\Users\\jablonski\\3S\\PT3S\\Examples\\WDExample1\\B1\\V0\\BZ1\"\n",
    "\n",
    "for file in files:\n",
    "    file_path = os.path.join(directory, file)\n",
    "    \n",
    "    open(file_path, 'w').close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "234da8e3-e72d-45f3-ae86-c0aa09085938",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using tolist(): [[1, 2, 3, 4, 5], [5, 15, 25, 35, 45], [10, 20, 30, 40, 50]]\n",
      "Using to_list(): [[1, 2, 3, 4, 5], [5, 15, 25, 35, 45], [10, 20, 30, 40, 50]]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Create a DataFrame\n",
    "df = pd.DataFrame({\n",
    "    'A': [1, 2, 3, 4, 5],\n",
    "    'B': [5, 15, 25, 35, 45],\n",
    "    'C': [10, 20, 30, 40, 50]\n",
    "})\n",
    "\n",
    "# Get the column names\n",
    "mColNames = df.columns.tolist()\n",
    "\n",
    "# Using tolist()\n",
    "arrays_tolist = []\n",
    "for col in mColNames:\n",
    "    arrays_tolist.append(df[col].values.tolist())\n",
    "print(\"Using tolist():\", arrays_tolist)\n",
    "\n",
    "# Using to_list()\n",
    "arrays_to_list = []\n",
    "for col in mColNames:\n",
    "    arrays_to_list.append(df[col].to_list())\n",
    "print(\"Using to_list():\", arrays_to_list)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4835b662-e1a5-4cf0-987f-78df5f4f94a5",
   "metadata": {},
   "source": [
    "# Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e1312026-5343-4c9a-bba7-b4a84713fc03",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    from PT3S import dxAndMxHelperFcts\n",
    "except:\n",
    "    import dxAndMxHelperFcts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "85f0ea42-bc9a-4c73-8e2b-6205b044553d",
   "metadata": {},
   "outputs": [],
   "source": [
    "dbFilename=\"Example1\"\n",
    "dbFile=os.path.join(os.path.dirname(os.path.abspath(dxAndMxHelperFcts.__file__))\n",
    "                    +'/Examples/'\n",
    "                    +dbFilename\n",
    "                    +'.db3'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "bafc1a45-40d5-48d7-8e04-006d1a904f24",
   "metadata": {},
   "outputs": [],
   "source": [
    "m=dxAndMxHelperFcts.readDxAndMx(dbFile=dbFile                                 \n",
    "                                ,preventPklDump=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "aa9de4d4-302b-4222-bb13-ab576237d938",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('STAT', 'ROHR~*~*~*~A', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00')), ('TIME', 'ROHR~*~*~*~A', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00')), ('TMIN', 'ROHR~*~*~*~A', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00')), ('TMAX', 'ROHR~*~*~*~A', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00')), ('STAT', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00')), ('TIME', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00')), ('TMIN', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00')), ('TMAX', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00')), ('STAT', 'ROHR~*~*~*~DWVERL', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00')), ('TIME', 'ROHR~*~*~*~DWVERL', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))]\n"
     ]
    }
   ],
   "source": [
    "print([col for col in m.V3_ROHR.columns if isinstance(col, tuple)][:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "770afa4f-a150-4dbb-a123-55b8cacc2b6c",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"('TIME', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"('TIME', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))\"",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[67], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m m\u001b[38;5;241m.\u001b[39mV3_ROHR[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m(\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTIME\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mROHR~*~*~*~DTTR\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, Timestamp(\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2023-02-12 23:00:00\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m), Timestamp(\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2023-02-12 23:00:00\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:4102\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   4100\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   4101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 4102\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[0;32m   4103\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   4104\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[0;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[0;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[0;32m   3810\u001b[0m     ):\n\u001b[0;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[1;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: \"('TIME', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))\""
     ]
    }
   ],
   "source": [
    "m.V3_ROHR[\"('TIME', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "1eccedfb-b64f-4b6e-9a13-a8da7aa28f63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       0.013439\n",
      "1       0.025363\n",
      "2       0.017844\n",
      "3       0.002976\n",
      "4       0.003263\n",
      "         ...    \n",
      "519    26.078106\n",
      "520    17.345263\n",
      "521    20.641092\n",
      "522     0.002895\n",
      "523      0.00293\n",
      "Name: (TIME, ROHR~*~*~*~DTTR, 2023-02-12 23:00:00, 2023-02-12 23:00:00), Length: 524, dtype: object\n"
     ]
    }
   ],
   "source": [
    "column_name = ('TIME', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))\n",
    "column_data = m.V3_ROHR[column_name]\n",
    "print(column_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "8f92fb8f-6b8f-4e21-9eb2-bf2114c408d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "m.V3_ROHR.columns = [str(col) for col in m.V3_ROHR.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "241a6415-5992-49eb-8f3f-6140befc2d8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['pk', 'fkDE', 'rk', 'tk', 'fkKI', 'fkKK', 'fkDTRO_ROWD', 'fkLTGR',\n",
      "       'fkSTRASSE', 'L',\n",
      "       ...\n",
      "       '('TMIN', 'KNOT~*~*~*~T', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k',\n",
      "       '('TMAX', 'KNOT~*~*~*~T', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k',\n",
      "       '('STAT', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))_k',\n",
      "       '('TIME', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))_k',\n",
      "       '('TMIN', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k',\n",
      "       '('TMAX', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k',\n",
      "       'QMAVAbs', 'VAVAbs', 'PHRAbs', 'JVAbs'],\n",
      "      dtype='object', length=216)\n"
     ]
    }
   ],
   "source": [
    "print(m.V3_ROHR.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "153bf2b6-9d17-42e6-a642-afff49a765b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      89.710541\n",
       "1      89.515259\n",
       "2      89.480652\n",
       "3      89.474884\n",
       "4      89.468567\n",
       "         ...    \n",
       "519         10.0\n",
       "520         10.0\n",
       "521         10.0\n",
       "522    79.993561\n",
       "523    59.885498\n",
       "Name: ('TMIN', 'KNOT~*~*~*~T', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k, Length: 524, dtype: object"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.V3_ROHR[\"('TMIN', 'KNOT~*~*~*~T', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "f5b98f65-2ff6-4821-8d15-37c54a3bb9c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       0.013439\n",
       "1       0.025363\n",
       "2       0.017844\n",
       "3       0.002976\n",
       "4       0.003263\n",
       "         ...    \n",
       "519    26.078106\n",
       "520    17.345263\n",
       "521    20.641092\n",
       "522     0.002895\n",
       "523      0.00293\n",
       "Name: ('TIME', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00')), Length: 524, dtype: object"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.V3_ROHR[\"('TIME', 'ROHR~*~*~*~DTTR', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "a5ff1d16-83e7-4126-bf98-be9065b711d1",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'L_ROHRVEC'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'L_ROHRVEC'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[73], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m m\u001b[38;5;241m.\u001b[39mV3_ROHRVEC[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mL_ROHRVEC\u001b[39m\u001b[38;5;124m'\u001b[39m]\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:4102\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   4100\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   4101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 4102\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[0;32m   4103\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   4104\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[0;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[0;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[0;32m   3810\u001b[0m     ):\n\u001b[0;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[1;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'L_ROHRVEC'"
     ]
    }
   ],
   "source": [
    "m.V3_ROHRVEC['L_ROHRVEC']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "a6565d37-1992-4f5c-880f-fc768712c3c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      5691533564979419761\n",
       "1      5691533564979419761\n",
       "2      5048873293262650113\n",
       "3      5715081934973525403\n",
       "4      5413647981880727734\n",
       "              ...         \n",
       "532    4621030304810285220\n",
       "533    5046251450517706156\n",
       "534    5478012163155701568\n",
       "535    4968402990875758821\n",
       "536    4814824415166736381\n",
       "Name: pk_ROHRVEC, Length: 537, dtype: object"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.V3_AGSNVEC['pk_ROHRVEC']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "05d296be-3735-4d97-90e6-a6a688d4848d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pk</th>\n",
       "      <th>fkDE</th>\n",
       "      <th>rk</th>\n",
       "      <th>tk</th>\n",
       "      <th>fkKI</th>\n",
       "      <th>fkKK</th>\n",
       "      <th>fkDTRO_ROWD</th>\n",
       "      <th>fkLTGR</th>\n",
       "      <th>fkSTRASSE</th>\n",
       "      <th>L</th>\n",
       "      <th>...</th>\n",
       "      <th>('TMAX', 'KNOT~*~*~*~T', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k</th>\n",
       "      <th>('STAT', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))_k</th>\n",
       "      <th>('TIME', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))_k</th>\n",
       "      <th>('TMIN', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k</th>\n",
       "      <th>('TMAX', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k</th>\n",
       "      <th>QMAVAbs</th>\n",
       "      <th>VAVAbs</th>\n",
       "      <th>PHRAbs</th>\n",
       "      <th>JVAbs</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5442010239090746007</td>\n",
       "      <td>5306805303452857793</td>\n",
       "      <td>5442010239090746007</td>\n",
       "      <td>5442010239090746007</td>\n",
       "      <td>5669301360686511351</td>\n",
       "      <td>5397948523091900401</td>\n",
       "      <td>4684070986837856878</td>\n",
       "      <td>4779752876656844188</td>\n",
       "      <td>5644881417512616095</td>\n",
       "      <td>36.429348</td>\n",
       "      <td>...</td>\n",
       "      <td>89.844849</td>\n",
       "      <td>965.873657</td>\n",
       "      <td>965.873657</td>\n",
       "      <td>965.793091</td>\n",
       "      <td>965.873657</td>\n",
       "      <td>52.848595</td>\n",
       "      <td>0.752813</td>\n",
       "      <td>0.010414</td>\n",
       "      <td>0.285856</td>\n",
       "      <td>LINESTRING (713620.268 5578828.419, 713602.295...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4917786378639043296</td>\n",
       "      <td>5306805303452857793</td>\n",
       "      <td>4917786378639043296</td>\n",
       "      <td>4917786378639043296</td>\n",
       "      <td>5397948523091900401</td>\n",
       "      <td>5239335112004772156</td>\n",
       "      <td>5103141232976878720</td>\n",
       "      <td>4779752876656844188</td>\n",
       "      <td>5644881417512616095</td>\n",
       "      <td>57.217808</td>\n",
       "      <td>...</td>\n",
       "      <td>89.739197</td>\n",
       "      <td>965.990784</td>\n",
       "      <td>965.990845</td>\n",
       "      <td>965.856506</td>\n",
       "      <td>965.990845</td>\n",
       "      <td>29.705210</td>\n",
       "      <td>0.626863</td>\n",
       "      <td>0.014643</td>\n",
       "      <td>0.255914</td>\n",
       "      <td>LINESTRING (713602.295 5578860.106, 713574.062...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4762482310382009633</td>\n",
       "      <td>5306805303452857793</td>\n",
       "      <td>4762482310382009633</td>\n",
       "      <td>4762482310382009633</td>\n",
       "      <td>5239335112004772156</td>\n",
       "      <td>5298886695042021307</td>\n",
       "      <td>5103141232976878720</td>\n",
       "      <td>4779752876656844188</td>\n",
       "      <td>5644881417512616095</td>\n",
       "      <td>40.994816</td>\n",
       "      <td>...</td>\n",
       "      <td>89.720581</td>\n",
       "      <td>966.011597</td>\n",
       "      <td>966.011597</td>\n",
       "      <td>965.867676</td>\n",
       "      <td>966.011597</td>\n",
       "      <td>30.252146</td>\n",
       "      <td>0.637748</td>\n",
       "      <td>0.010845</td>\n",
       "      <td>0.264538</td>\n",
       "      <td>LINESTRING (713574.062 5578909.873, 713553.840...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4987229536643024523</td>\n",
       "      <td>5306805303452857793</td>\n",
       "      <td>4987229536643024523</td>\n",
       "      <td>4987229536643024523</td>\n",
       "      <td>5298886695042021307</td>\n",
       "      <td>4993257270457791438</td>\n",
       "      <td>5103141232976878720</td>\n",
       "      <td>4779752876656844188</td>\n",
       "      <td>5644881417512616095</td>\n",
       "      <td>6.833079</td>\n",
       "      <td>...</td>\n",
       "      <td>89.717468</td>\n",
       "      <td>966.015015</td>\n",
       "      <td>966.015076</td>\n",
       "      <td>965.869507</td>\n",
       "      <td>966.015076</td>\n",
       "      <td>30.252146</td>\n",
       "      <td>0.637153</td>\n",
       "      <td>0.001804</td>\n",
       "      <td>0.264079</td>\n",
       "      <td>LINESTRING (713553.840 5578945.533, 713553.394...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5722206630503885118</td>\n",
       "      <td>5306805303452857793</td>\n",
       "      <td>5722206630503885118</td>\n",
       "      <td>5722206630503885118</td>\n",
       "      <td>4993257270457791438</td>\n",
       "      <td>5317865645994989592</td>\n",
       "      <td>5103141232976878720</td>\n",
       "      <td>4779752876656844188</td>\n",
       "      <td>5644881417512616095</td>\n",
       "      <td>7.493101</td>\n",
       "      <td>...</td>\n",
       "      <td>89.71405</td>\n",
       "      <td>966.018799</td>\n",
       "      <td>966.01886</td>\n",
       "      <td>965.871582</td>\n",
       "      <td>966.01886</td>\n",
       "      <td>30.252146</td>\n",
       "      <td>0.637151</td>\n",
       "      <td>0.001979</td>\n",
       "      <td>0.264080</td>\n",
       "      <td>LINESTRING (713553.394 5578952.352, 713556.294...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 217 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    pk                 fkDE                   rk  \\\n",
       "0  5442010239090746007  5306805303452857793  5442010239090746007   \n",
       "1  4917786378639043296  5306805303452857793  4917786378639043296   \n",
       "2  4762482310382009633  5306805303452857793  4762482310382009633   \n",
       "3  4987229536643024523  5306805303452857793  4987229536643024523   \n",
       "4  5722206630503885118  5306805303452857793  5722206630503885118   \n",
       "\n",
       "                    tk                 fkKI                 fkKK  \\\n",
       "0  5442010239090746007  5669301360686511351  5397948523091900401   \n",
       "1  4917786378639043296  5397948523091900401  5239335112004772156   \n",
       "2  4762482310382009633  5239335112004772156  5298886695042021307   \n",
       "3  4987229536643024523  5298886695042021307  4993257270457791438   \n",
       "4  5722206630503885118  4993257270457791438  5317865645994989592   \n",
       "\n",
       "           fkDTRO_ROWD               fkLTGR            fkSTRASSE          L  \\\n",
       "0  4684070986837856878  4779752876656844188  5644881417512616095  36.429348   \n",
       "1  5103141232976878720  4779752876656844188  5644881417512616095  57.217808   \n",
       "2  5103141232976878720  4779752876656844188  5644881417512616095  40.994816   \n",
       "3  5103141232976878720  4779752876656844188  5644881417512616095   6.833079   \n",
       "4  5103141232976878720  4779752876656844188  5644881417512616095   7.493101   \n",
       "\n",
       "   ...  \\\n",
       "0  ...   \n",
       "1  ...   \n",
       "2  ...   \n",
       "3  ...   \n",
       "4  ...   \n",
       "\n",
       "   ('TMAX', 'KNOT~*~*~*~T', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k  \\\n",
       "0                                          89.844849                                                \n",
       "1                                          89.739197                                                \n",
       "2                                          89.720581                                                \n",
       "3                                          89.717468                                                \n",
       "4                                           89.71405                                                \n",
       "\n",
       "   ('STAT', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))_k  \\\n",
       "0                                         965.873657                                                  \n",
       "1                                         965.990784                                                  \n",
       "2                                         966.011597                                                  \n",
       "3                                         966.015015                                                  \n",
       "4                                         966.018799                                                  \n",
       "\n",
       "   ('TIME', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-12 23:00:00'))_k  \\\n",
       "0                                         965.873657                                                  \n",
       "1                                         965.990845                                                  \n",
       "2                                         966.011597                                                  \n",
       "3                                         966.015076                                                  \n",
       "4                                          966.01886                                                  \n",
       "\n",
       "   ('TMIN', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k  \\\n",
       "0                                         965.793091                                                  \n",
       "1                                         965.856506                                                  \n",
       "2                                         965.867676                                                  \n",
       "3                                         965.869507                                                  \n",
       "4                                         965.871582                                                  \n",
       "\n",
       "   ('TMAX', 'KNOT~*~*~*~RHO', Timestamp('2023-02-12 23:00:00'), Timestamp('2023-02-13 23:00:00'))_k  \\\n",
       "0                                         965.873657                                                  \n",
       "1                                         965.990845                                                  \n",
       "2                                         966.011597                                                  \n",
       "3                                         966.015076                                                  \n",
       "4                                          966.01886                                                  \n",
       "\n",
       "     QMAVAbs    VAVAbs    PHRAbs     JVAbs  \\\n",
       "0  52.848595  0.752813  0.010414  0.285856   \n",
       "1  29.705210  0.626863  0.014643  0.255914   \n",
       "2  30.252146  0.637748  0.010845  0.264538   \n",
       "3  30.252146  0.637153  0.001804  0.264079   \n",
       "4  30.252146  0.637151  0.001979  0.264080   \n",
       "\n",
       "                                            geometry  \n",
       "0  LINESTRING (713620.268 5578828.419, 713602.295...  \n",
       "1  LINESTRING (713602.295 5578860.106, 713574.062...  \n",
       "2  LINESTRING (713574.062 5578909.873, 713553.840...  \n",
       "3  LINESTRING (713553.840 5578945.533, 713553.394...  \n",
       "4  LINESTRING (713553.394 5578952.352, 713556.294...  \n",
       "\n",
       "[5 rows x 217 columns]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.gdf_ROHR.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "8508b8df-5c81-482a-a54a-9d83d0809927",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<networkx.classes.graph.Graph at 0x21e52fd4d90>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "1f997cfc-3554-4603-addc-5a263925a18a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<networkx.classes.digraph.DiGraph at 0x21e52f915d0>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.GSig\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "ff4d1e46-ffb4-48f2-ab71-f80fdd5bf4e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(m.nodeposDctNx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "bfb2fe4c-5c0f-4e80-aa45-18ff6d5efaeb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['G', 'GSig', 'nodeposDctNx']\n"
     ]
    }
   ],
   "source": [
    "print([attr for attr in dir(m) if not attr.startswith('_') and isinstance(getattr(m, attr), (nx.Graph, nx.DiGraph, dict))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "472f015f-14a2-40d0-b754-720b884a34d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "d29695db-59bc-4ab4-8253-bd22b0fd0c95",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'dxWithMx' object has no attribute 'SirCalcExeFile'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[88], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m m\u001b[38;5;241m.\u001b[39mSirCalcExeFile\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'dxWithMx' object has no attribute 'SirCalcExeFile'"
     ]
    }
   ],
   "source": [
    "m.SirCalcExeFile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "11cbb66d-f488-4555-bbab-99b055c3cfa6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'c:\\\\users\\\\jablonski\\\\3s\\\\pt3s\\\\Examples\\\\WDExample1\\\\B1\\\\V0\\\\BZ1\\\\M-1-0-1.XML'"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.SirCalcXmlFile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "a6773231-60e5-432f-9ddd-752b983a4a46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['SirCalcXmlFile', 'flowMVEC', 'wDirMx']\n"
     ]
    }
   ],
   "source": [
    "print([attr for attr in dir(m) if not attr.startswith('_') and isinstance(getattr(m, attr), str)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "2c02dccd-6fc6-4b2a-8b8c-8df4b7954f0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'V-K03S': (618.4237903880421, 638.1904287301004),\n",
       " 'V-K13S': (600.4505828450201, 669.8773546600714),\n",
       " 'V-K23S': (572.2176099140197, 719.6445816401392),\n",
       " 'V-K33S': (551.9960539049935, 755.3049741405994),\n",
       " 'V-K43S': (551.5499178139726, 762.1234737606719),\n",
       " 'V-K53S': (554.4503922000295, 769.0324395308271),\n",
       " 'V-K63S': (561.4695709510706, 773.5021225800738),\n",
       " 'V-K73S': (642.2075970680453, 792.4816140606999),\n",
       " 'V-K83S': (645.8851219060598, 795.1463997606188),\n",
       " 'V-K93S': (646.7693835659884, 800.259361660108),\n",
       " 'V-K103S': (645.653864772059, 804.0557000907138),\n",
       " 'V-K113S': (637.1169627290219, 823.4190117800608),\n",
       " 'V-K123S': (624.1977416090667, 846.2798269903287),\n",
       " 'V-K133S': (608.7959473930532, 870.075985589996),\n",
       " 'V-K143S': (581.0165404230356, 899.9643079703674),\n",
       " 'V-K153S': (392.34606027498376, 703.6505574807525),\n",
       " 'V-K163S': (466.14256979804486, 780.4353418201208),\n",
       " 'V-K173S': (583.7145736420061, 902.7008779905736),\n",
       " 'V-K183S': (628.8310988950543, 948.3685959307477),\n",
       " 'V-K193S': (668.0439131170278, 980.9939087107778),\n",
       " 'V-K203S': (736.4525505449856, 1029.6738881208003),\n",
       " 'V-K213S': (791.3856170120416, 1063.0686045102775),\n",
       " 'V-K223S': (831.0029509690357, 1079.9898092700168),\n",
       " 'V-K233S': (262.62274547701236, 852.7113555604592),\n",
       " 'V-K243S': (302.1212926330045, 812.6826590504497),\n",
       " 'V-K253S': (309.1206822760869, 804.2019797805697),\n",
       " 'V-K263S': (330.60293996997643, 781.7857658602297),\n",
       " 'V-K273S': (373.15479551197495, 727.7511069802567),\n",
       " 'V-K283S': (467.3981267850613, 589.6655518505722),\n",
       " 'V-K293S': (473.9532112480374, 589.9187354100868),\n",
       " 'V-K303S': (490.334415334044, 599.2863627299666),\n",
       " 'V-K313S': (507.94947043899447, 605.8088746005669),\n",
       " 'V-K323S': (538.7954641659744, 614.6132045704871),\n",
       " 'V-K333S': (551.4912546590203, 618.4990240605548),\n",
       " 'V-K343S': (668.6417665500194, 653.06608451996),\n",
       " 'V-K353S': (73.6692098780768, 387.17141333036125),\n",
       " 'V-K363S': (76.45832693006378, 400.4109825408086),\n",
       " 'V-K373S': (81.5399896610761, 411.9502019705251),\n",
       " 'V-K383S': (88.28073696000502, 419.99323155079037),\n",
       " 'V-K393S': (95.09078398905694, 424.5428943801671),\n",
       " 'V-K403S': (107.80502512201201, 428.6955647803843),\n",
       " 'V-K413S': (164.92130878102034, 441.7506501702592),\n",
       " 'V-K423S': (176.2678255380597, 445.1692302701995),\n",
       " 'V-K433S': (195.43076564604416, 451.86431223060936),\n",
       " 'V-K443S': (212.03276977699716, 460.5495810704306),\n",
       " 'V-K453S': (235.58830476808362, 475.34934344049543),\n",
       " 'V-K463S': (255.20511139603332, 492.54032097011805),\n",
       " 'V-K473S': (282.0882594099967, 527.8946833405644),\n",
       " 'V-K483S': (179.48069248301908, 431.2359778806567),\n",
       " 'V-K493S': (179.17133893899154, 424.93264268059283),\n",
       " 'V-K503S': (164.19915513601154, 366.9102374203503),\n",
       " 'V-K513S': (142.45063262199983, 269.3110583703965),\n",
       " 'V-K523S': (136.1316248680232, 256.8089630100876),\n",
       " 'V-K533S': (133.62971602904145, 251.8425648007542),\n",
       " 'V-K543S': (122.20140078500845, 238.75625359080732),\n",
       " 'V-K553S': (17.225135902990587, 168.8618317907676),\n",
       " 'V-K563S': (0.0, 155.9657082501799),\n",
       " 'V-K573S': (321.27644198806956, 474.92653318028897),\n",
       " 'V-K583S': (368.1862205390353, 387.45277268998325),\n",
       " 'V-K593S': (421.15560409706086, 665.7081277603284),\n",
       " 'V-K603S': (462.52505045197904, 591.7181994104758),\n",
       " 'V-K613S': (32.11142342397943, 393.4934929301962),\n",
       " 'V-K623S': (690.8919772329973, 659.0080395303667),\n",
       " 'V-K633S': (805.6058971460443, 685.5633375607431),\n",
       " 'V-K643S': (831.3318568430841, 687.1591151608154),\n",
       " 'V-K653S': (849.6471755320672, 684.6254238300025),\n",
       " 'V-K663S': (868.991570416023, 679.205019980669),\n",
       " 'V-K673S': (886.8994936579838, 669.8184708505869),\n",
       " 'V-K683S': (949.2417286770651, 634.0797545704991),\n",
       " 'V-K693S': (972.214593783021, 624.6086728600785),\n",
       " 'V-K703S': (996.4601416520309, 617.3380725104362),\n",
       " 'V-K713S': (1026.0216902790125, 611.1732431007549),\n",
       " 'V-K723S': (1062.333034660085, 608.9113173801452),\n",
       " 'V-K733S': (1097.126399582019, 612.6342464601621),\n",
       " 'V-K743S': (1103.457693481003, 615.0726440604776),\n",
       " 'V-K753S': (1134.4469743140507, 627.0150758707896),\n",
       " 'V-K763S': (1178.4819149950054, 651.0986954504624),\n",
       " 'V-K773S': (874.0268955189968, 1099.387197910808),\n",
       " 'V-K783S': (749.1456703679869, 0.0),\n",
       " 'V-K793S': (706.3460590570467, 27.44449285045266),\n",
       " 'V-K803S': (665.6533213710645, 57.45728132035583),\n",
       " 'V-K813S': (632.7673216810217, 83.40952076017857),\n",
       " 'V-K823S': (625.2611359850271, 89.39758691005409),\n",
       " 'V-K833S': (605.0273153560702, 104.98218612000346),\n",
       " 'V-K843S': (578.340923876036, 126.59748147055507),\n",
       " 'V-K853S': (552.2893801609753, 151.56767123006284),\n",
       " 'V-K863S': (504.57805048907176, 194.27000891044736),\n",
       " 'V-K873S': (463.96925558301155, 226.85960443038493),\n",
       " 'V-K883S': (423.6143473840784, 255.4624883402139),\n",
       " 'V-K893S': (393.87519394699484, 275.5637698303908),\n",
       " 'V-K903S': (329.0323958470253, 307.91249652020633),\n",
       " 'V-K913S': (262.8856602880405, 335.48849330004305),\n",
       " 'V-K923S': (216.589429993066, 351.6503152307123),\n",
       " 'V-K933S': (410.70628481998574, 306.6945466902107),\n",
       " 'V-K943S': (461.7890643820865, 338.04825873021036),\n",
       " 'V-K953S': (505.8202367860358, 360.9343916308135),\n",
       " 'V-K963S': (544.6686555229826, 378.69049049075693),\n",
       " 'V-K973S': (601.2114014690742, 402.4272865401581),\n",
       " 'V-K983S': (609.2267166440142, 407.83907128032297),\n",
       " 'V-K993S': (614.1013981329743, 413.7031387705356),\n",
       " 'V-K1003S': (618.6232088870602, 421.2453967006877),\n",
       " 'V-K1013S': (621.0566243050853, 431.2531634904444),\n",
       " 'V-K1023S': (616.1614829580067, 476.25002624001354),\n",
       " 'V-K1033S': (613.4447803760413, 486.16133761033416),\n",
       " 'V-K1043S': (467.0548934210092, 581.9133432703093),\n",
       " 'V-K1053S': (465.76413739600684, 578.7436817307025),\n",
       " 'V-K1063S': (463.08406670799013, 574.6717919008806),\n",
       " 'V-K1073S': (441.155233624042, 558.8008252000436),\n",
       " 'V-K1083S': (370.1571681840578, 507.293019910343),\n",
       " 'V-K1093S': (456.28787726105656, 527.7114748302847),\n",
       " 'V-K1103S': (447.26790527801495, 523.350577890873),\n",
       " 'V-K1113S': (442.306219503982, 519.6432217806578),\n",
       " 'V-K1123S': (439.35120474908035, 514.0793960103765),\n",
       " 'V-K1133S': (439.1234030930791, 509.82802931033075),\n",
       " 'V-K1143S': (440.7857220020378, 503.7822954002768),\n",
       " 'V-K1153S': (471.80976009799633, 431.63556718081236),\n",
       " 'V-K1163S': (405.4020699650282, 409.10586411040276),\n",
       " 'V-K1173S': (419.0615704120137, 411.2041402403265),\n",
       " 'V-K1183S': (655.2614744920284, 505.40762981027365),\n",
       " 'V-K1193S': (661.0013212760678, 510.8501569405198),\n",
       " 'V-K1203S': (663.0594368700404, 516.19977461081),\n",
       " 'V-K1213S': (663.0933315180009, 522.4252553004771),\n",
       " 'V-K1223S': (645.8254478910239, 567.1788760302588),\n",
       " 'V-K1233S': (586.6165160210803, 539.9601885704324),\n",
       " 'V-K1243S': (708.6189635819755, 754.9225748302415),\n",
       " 'V-K1253S': (711.355925410986, 754.5765559701249),\n",
       " 'V-K1263S': (715.5230116429739, 752.7071913704276),\n",
       " 'V-K1273S': (725.429773595999, 732.2635787408799),\n",
       " 'V-K1283S': (729.4874339320231, 710.6819461900741),\n",
       " 'V-K1293S': (729.0416418439709, 704.7738593006507),\n",
       " 'V-K1303S': (726.6531764300307, 701.9606412500143),\n",
       " 'V-K1313S': (648.6887810120825, 793.5003202706575),\n",
       " 'V-K1323S': (679.7525346700568, 800.4103717803955),\n",
       " 'V-K1333S': (682.2046904690797, 801.6450596805662),\n",
       " 'V-K1343S': (683.4634476630017, 804.1899708304554),\n",
       " 'V-K1353S': (684.0026654300746, 807.6077224006876),\n",
       " 'V-K1363S': (679.4404943500413, 825.0938289705664),\n",
       " 'V-K1373S': (668.0130819630576, 843.6612254604697),\n",
       " 'V-SP01': (643.7441315239994, 893.4099246300757),\n",
       " 'V-K1393S': (504.7659758019727, 700.1220462303609),\n",
       " 'V-K1403S': (582.9414505650057, 313.51726518012583),\n",
       " 'V-K1413S': (602.0414649070008, 285.72817480005324),\n",
       " 'V-K1423S': (605.7117407460464, 327.9863852504641),\n",
       " 'V-K1433S': (627.9898808010621, 347.93612821027637),\n",
       " 'V-K1443S': (639.4529126430862, 355.3576409900561),\n",
       " 'V-K1453S': (652.1732907739934, 363.2418909901753),\n",
       " 'V-K1463S': (662.9102809739998, 369.39824583008885),\n",
       " 'V-K1473S': (673.9157657610485, 378.61627696081996),\n",
       " 'V-K1483S': (681.0667157609714, 386.72120867017657),\n",
       " 'V-K1493S': (684.8671614880441, 396.2386000100523),\n",
       " 'V-K1503S': (687.1022479480598, 408.33166125044227),\n",
       " 'V-K1513S': (686.2762373470468, 445.5761969704181),\n",
       " 'V-K1523S': (693.0661715629976, 460.50308709032834),\n",
       " 'V-K1533S': (715.0686046960764, 490.2626524101943),\n",
       " 'V-K1543S': (724.6708489740267, 510.56968167051673),\n",
       " 'V-K1553S': (727.4217756290454, 521.3586053708568),\n",
       " 'V-K1563S': (726.6656052430626, 540.0895076906309),\n",
       " 'V-K1573S': (718.6329735480249, 566.8997150408104),\n",
       " 'V-K1583S': (707.275060501066, 597.327982250601),\n",
       " 'V-SP02': (248.82189701497555, 698.0787065206096),\n",
       " 'V-K1603S': (263.75513333198614, 729.232837070711),\n",
       " 'V-K1613S': (279.47382583108265, 769.5488116107881),\n",
       " 'V-K1623S': (285.3205731550697, 779.4155618203804),\n",
       " 'V-K1633S': (227.41443554207217, 743.9471223000437),\n",
       " 'V-K1643S': (358.80785506102256, 830.0986297708005),\n",
       " 'V-K1653S': (376.52636052807793, 854.5512014701962),\n",
       " 'V-K1663S': (390.8697698400356, 862.2887580804527),\n",
       " 'V-E0': (618.0773658100516, 28.726164679974318),\n",
       " 'V-K1683S': (612.8046950279968, 43.143989000469446),\n",
       " 'V-K1693S': (612.6209214359988, 55.651586660183966),\n",
       " 'V-K1703S': (1265.6991815640358, 670.4611622206867),\n",
       " 'V-K1713S': (1270.5977117950097, 661.0949249602854),\n",
       " 'V-K1723S': (1280.9571489490336, 650.8362796902657),\n",
       " 'V-K1733S': (1300.7749022149947, 652.4067442901433),\n",
       " 'V-K1743S': (1324.754110782058, 657.1854664999992),\n",
       " 'V-K1753S': (1324.9031305860262, 680.7965711504221),\n",
       " 'V-K1763S': (1290.3944729580544, 718.303416820243),\n",
       " 'V-K1773S': (1276.9519784000004, 734.817291890271),\n",
       " 'V-K1783S': (1263.5044623559806, 744.0601897006854),\n",
       " 'V-K1793S': (1245.1844850389753, 754.6313443202525),\n",
       " 'V-K1803S': (1239.2952813319862, 757.6554023306817),\n",
       " 'V-K1813S': (1233.9074297330808, 757.6266454504803),\n",
       " 'V-K1823S': (1224.9392026379937, 751.1286347107962),\n",
       " 'V-K1833S': (1316.6363938850118, 732.8607026701793),\n",
       " 'V-K1843S': (1315.9180229330668, 739.5123009299859),\n",
       " 'V-K1853S': (1318.7692306450335, 761.1729271700606),\n",
       " 'V-K1863S': (1324.3264979299856, 779.2019328605384),\n",
       " 'V-K1873S': (1202.3060502490262, 661.6493628099561),\n",
       " 'V-K1883S': (1226.4944486169843, 673.0611025402322),\n",
       " 'V-K1893S': (1243.4183473989833, 668.4571107402444),\n",
       " 'V-K1903S': (1258.6389135729987, 667.1913771005347),\n",
       " 'V-K1913S': (1279.929793954012, 702.4585976302624),\n",
       " 'V-K1923S': (1301.6037379120244, 727.3752445001155),\n",
       " 'V-K1933S': (172.8581824330613, 238.6020923005417),\n",
       " 'V-K1943S': (207.31062656198628, 223.58850231021643),\n",
       " 'V-K1953S': (210.52229876897763, 222.08108952082694),\n",
       " 'V-K1963S': (242.1942209880799, 207.25637100078166),\n",
       " 'V-K1973S': (338.25561840098817, 162.6917978003621),\n",
       " 'V-K1983S': (357.1193050449947, 871.6395799200982),\n",
       " 'V-K1993S': (215.91495249199215, 431.9460173603147),\n",
       " 'V-K2003S': (247.04613675107248, 437.41974159050733),\n",
       " 'V-K2013S': (271.71188091498334, 445.89555407036096),\n",
       " 'V-K2023S': (302.36599327099975, 458.2536706700921),\n",
       " 'V-K2033S': (612.3946785969893, 89.35727847088128),\n",
       " 'V-K2043S': (615.0396318250569, 76.10276059061289),\n",
       " 'V-K2053S': (622.2783611200284, 71.79631103016436),\n",
       " 'V-K2063S': (374.91533914906904, 374.1957589806989),\n",
       " 'V-K2073S': (341.1955995099852, 358.4736291700974),\n",
       " 'V-K2083S': (557.3574451539898, 573.0959311407059),\n",
       " 'V-K2093S': (1412.720271039987, 749.7453860500827),\n",
       " 'V-K2103S': (1404.531994192046, 747.7547094300389),\n",
       " 'V-K2113S': (1382.3812349060318, 742.3704360704869),\n",
       " 'V-K2123S': (1349.5614267439814, 736.9328258503228),\n",
       " 'V-K2133S': (1331.0140571850352, 734.0997227104381),\n",
       " 'V-K2143S': (575.3422412839718, 268.272471700795),\n",
       " 'V-K2153S': (390.3489042130532, 476.073368110694),\n",
       " 'V-K2163S': (612.525026511983, 61.91635824088007),\n",
       " 'V-K2173S': (407.61832717899233, 312.56034822016954),\n",
       " 'V-K2183S': (425.0918595379917, 277.52348264027387),\n",
       " 'V-K2193S': (428.6402992870426, 263.949025740847),\n",
       " 'V-K2203S': (65.61188671702985, 1069.7910821205005),\n",
       " 'V-K2213S': (99.64578095101751, 1014.7547607300803),\n",
       " 'V-K2223S': (152.51333880005404, 953.4957521203905),\n",
       " 'V-K2233S': (227.6166634670226, 884.3923795502633),\n",
       " 'V-K2243S': (481.61054699204396, 765.4153362307698),\n",
       " 'V-K2253S': (497.651653234032, 769.5918382899836),\n",
       " 'V-K2263S': (513.1366058280692, 746.3777168104425),\n",
       " 'V-K2273S': (486.19577243202366, 713.5805639103055),\n",
       " 'V-K2283S': (475.68208473105915, 706.3200984103605),\n",
       " 'V-K2293S': (205.26439043798018, 195.09137698076665),\n",
       " 'V-K2303S': (204.3155329860747, 189.79778080061078),\n",
       " 'V-K2313S': (203.73346935003065, 187.0798429204151),\n",
       " 'V-K2323S': (204.38347756303847, 184.92369465064257),\n",
       " 'V-K2333S': (209.33257542003412, 176.9170055501163),\n",
       " 'V-K2343S': (209.80268114001956, 173.7403923906386),\n",
       " 'V-K2353S': (208.98256466304883, 171.26895690057427),\n",
       " 'V-K2363S': (206.5621421940159, 166.04971578065306),\n",
       " 'V-K2373S': (197.67358884308487, 150.43782069999725),\n",
       " 'V-K2383S': (363.9108060670551, 661.0401811404154),\n",
       " 'V-K2393S': (378.59219566104, 684.6354424906895),\n",
       " 'V-K2403S': (297.6941978969844, 512.9910366106778),\n",
       " 'V-K2413S': (1163.121320132981, 562.9605510905385),\n",
       " 'V-K2423S': (1139.2729640250327, 571.1483778106049),\n",
       " 'V-K2433S': (1126.8296807439765, 576.3570462204516),\n",
       " 'V-K2443S': (1119.9158080490306, 581.8005108106881),\n",
       " 'V-K2453S': (1114.1780749750324, 591.2999480701983),\n",
       " 'V-K2463S': (1400.7456085570157, 764.6816520700231),\n",
       " 'V-K2473S': (1393.5606884410372, 784.0318876206875),\n",
       " 'R-K2483S': (620.4237903880421, 638.1904287301004),\n",
       " 'R-K2493S': (602.4505828450201, 669.8773546600714),\n",
       " 'R-K2503S': (574.2176099140197, 719.6445816401392),\n",
       " 'R-K2513S': (553.9960539049935, 755.3049741405994),\n",
       " 'R-K2523S': (553.5499178139726, 762.1234737606719),\n",
       " 'R-K2533S': (556.4503922000295, 769.0324395308271),\n",
       " 'R-K2543S': (563.4695709510706, 773.5021225800738),\n",
       " 'R-K2553S': (644.2075970680453, 792.4816140606999),\n",
       " 'R-K2563S': (647.8851219060598, 795.1463997606188),\n",
       " 'R-K2573S': (648.7693835659884, 800.259361660108),\n",
       " 'R-K2583S': (647.653864772059, 804.0557000907138),\n",
       " 'R-K2593S': (639.1169627290219, 823.4190117800608),\n",
       " 'R-K2603S': (626.1977416090667, 846.2798269903287),\n",
       " 'R-K2613S': (610.7959473930532, 870.075985589996),\n",
       " 'R-K2623S': (583.0165404230356, 899.9643079703674),\n",
       " 'R-K2633S': (394.34606027498376, 703.6505574807525),\n",
       " 'R-K2643S': (468.14256979804486, 780.4353418201208),\n",
       " 'R-K2653S': (585.7145736420061, 902.7008779905736),\n",
       " 'R-K2663S': (630.8310988950543, 948.3685959307477),\n",
       " 'R-K2673S': (670.0439131170278, 980.9939087107778),\n",
       " 'R-K2683S': (738.4525505449856, 1029.6738881208003),\n",
       " 'R-K2693S': (793.3856170120416, 1063.0686045102775),\n",
       " 'R-K2703S': (833.0029509690357, 1079.9898092700168),\n",
       " 'R-K2713S': (264.62274547701236, 852.7113555604592),\n",
       " 'R-K2723S': (304.1212926330045, 812.6826590504497),\n",
       " 'R-K2733S': (311.1206822760869, 804.2019797805697),\n",
       " 'R-K2743S': (332.60293996997643, 781.7857658602297),\n",
       " 'R-K2753S': (375.15479551197495, 727.7511069802567),\n",
       " 'R-K2763S': (469.3981267850613, 589.6655518505722),\n",
       " 'R-K2773S': (475.9532112480374, 589.9187354100868),\n",
       " 'R-K2783S': (492.334415334044, 599.2863627299666),\n",
       " 'R-K2793S': (509.94947043899447, 605.8088746005669),\n",
       " 'R-K2803S': (540.7954641659744, 614.6132045704871),\n",
       " 'R-K2813S': (553.4912546590203, 618.4990240605548),\n",
       " 'R-K2823S': (670.6417665500194, 653.06608451996),\n",
       " 'R-K2833S': (75.6692098780768, 387.17141333036125),\n",
       " 'R-K2843S': (78.45832693006378, 400.4109825408086),\n",
       " 'R-K2853S': (83.5399896610761, 411.9502019705251),\n",
       " 'R-K2863S': (90.28073696000502, 419.99323155079037),\n",
       " 'R-K2873S': (97.09078398905694, 424.5428943801671),\n",
       " 'R-K2883S': (109.80502512201201, 428.6955647803843),\n",
       " 'R-K2893S': (166.92130878102034, 441.7506501702592),\n",
       " 'R-K2903S': (178.2678255380597, 445.1692302701995),\n",
       " 'R-K2913S': (197.43076564604416, 451.86431223060936),\n",
       " 'R-K2923S': (214.03276977699716, 460.5495810704306),\n",
       " 'R-K2933S': (237.58830476808362, 475.34934344049543),\n",
       " 'R-K2943S': (257.2051113960333, 492.54032097011805),\n",
       " 'R-K2953S': (284.0882594099967, 527.8946833405644),\n",
       " 'R-K2963S': (181.48069248301908, 431.2359778806567),\n",
       " 'R-K2973S': (181.17133893899154, 424.93264268059283),\n",
       " 'R-K2983S': (166.19915513601154, 366.9102374203503),\n",
       " 'R-K2993S': (144.45063262199983, 269.3110583703965),\n",
       " 'R-K3003S': (138.1316248680232, 256.8089630100876),\n",
       " 'R-K3013S': (135.62971602904145, 251.8425648007542),\n",
       " 'R-K3023S': (124.20140078500845, 238.75625359080732),\n",
       " 'R-K3033S': (19.225135902990587, 168.8618317907676),\n",
       " 'R-K3043S': (2.0, 155.9657082501799),\n",
       " 'R-K3053S': (323.27644198806956, 474.92653318028897),\n",
       " 'R-K3063S': (370.1862205390353, 387.45277268998325),\n",
       " 'R-K3073S': (423.15560409706086, 665.7081277603284),\n",
       " 'R-K3083S': (464.52505045197904, 591.7181994104758),\n",
       " 'R-K3093S': (34.11142342397943, 393.4934929301962),\n",
       " 'R-K3103S': (692.8919772329973, 659.0080395303667),\n",
       " 'R-K3113S': (807.6058971460443, 685.5633375607431),\n",
       " 'R-K3123S': (833.3318568430841, 687.1591151608154),\n",
       " 'R-K3133S': (851.6471755320672, 684.6254238300025),\n",
       " 'R-K3143S': (870.991570416023, 679.205019980669),\n",
       " 'R-K3153S': (888.8994936579838, 669.8184708505869),\n",
       " 'R-K3163S': (951.2417286770651, 634.0797545704991),\n",
       " 'R-K3173S': (974.214593783021, 624.6086728600785),\n",
       " 'R-K3183S': (998.4601416520309, 617.3380725104362),\n",
       " 'R-K3193S': (1028.0216902790125, 611.1732431007549),\n",
       " 'R-K3203S': (1064.333034660085, 608.9113173801452),\n",
       " 'R-K3213S': (1099.126399582019, 612.6342464601621),\n",
       " 'R-K3223S': (1105.457693481003, 615.0726440604776),\n",
       " 'R-K3233S': (1136.4469743140507, 627.0150758707896),\n",
       " 'R-K3243S': (1180.4819149950054, 651.0986954504624),\n",
       " 'R-K3253S': (876.0268955189968, 1099.387197910808),\n",
       " 'R-K3263S': (751.1456703679869, 0.0),\n",
       " 'R-K3273S': (708.3460590570467, 27.44449285045266),\n",
       " 'R-K3283S': (667.6533213710645, 57.45728132035583),\n",
       " 'R-K3293S': (634.7673216810217, 83.40952076017857),\n",
       " 'R-K3303S': (627.2611359850271, 89.39758691005409),\n",
       " 'R-K3313S': (607.0273153560702, 104.98218612000346),\n",
       " 'R-K3323S': (580.340923876036, 126.59748147055507),\n",
       " 'R-K3333S': (554.2893801609753, 151.56767123006284),\n",
       " 'R-K3343S': (506.57805048907176, 194.27000891044736),\n",
       " 'R-K3353S': (465.96925558301155, 226.85960443038493),\n",
       " 'R-K3363S': (425.6143473840784, 255.4624883402139),\n",
       " 'R-K3373S': (395.87519394699484, 275.5637698303908),\n",
       " 'R-K3383S': (331.0323958470253, 307.91249652020633),\n",
       " 'R-K3393S': (264.8856602880405, 335.48849330004305),\n",
       " 'R-K3403S': (218.589429993066, 351.6503152307123),\n",
       " 'R-K3413S': (412.70628481998574, 306.6945466902107),\n",
       " 'R-K3423S': (463.7890643820865, 338.04825873021036),\n",
       " 'R-K3433S': (507.8202367860358, 360.9343916308135),\n",
       " 'R-K3443S': (546.6686555229826, 378.69049049075693),\n",
       " 'R-K3453S': (603.2114014690742, 402.4272865401581),\n",
       " 'R-K3463S': (611.2267166440142, 407.83907128032297),\n",
       " 'R-K3473S': (616.1013981329743, 413.7031387705356),\n",
       " 'R-K3483S': (620.6232088870602, 421.2453967006877),\n",
       " 'R-K3493S': (623.0566243050853, 431.2531634904444),\n",
       " 'R-K3503S': (618.1614829580067, 476.25002624001354),\n",
       " 'R-K3513S': (615.4447803760413, 486.16133761033416),\n",
       " 'R-K3523S': (469.0548934210092, 581.9133432703093),\n",
       " 'R-K3533S': (467.76413739600684, 578.7436817307025),\n",
       " 'R-K3543S': (465.08406670799013, 574.6717919008806),\n",
       " 'R-K3553S': (443.155233624042, 558.8008252000436),\n",
       " 'R-K3563S': (372.1571681840578, 507.293019910343),\n",
       " 'R-K3573S': (458.28787726105656, 527.7114748302847),\n",
       " 'R-K3583S': (449.26790527801495, 523.350577890873),\n",
       " 'R-K3593S': (444.306219503982, 519.6432217806578),\n",
       " 'R-K3603S': (441.35120474908035, 514.0793960103765),\n",
       " 'R-K3613S': (441.1234030930791, 509.82802931033075),\n",
       " 'R-K3623S': (442.7857220020378, 503.7822954002768),\n",
       " 'R-K3633S': (473.80976009799633, 431.63556718081236),\n",
       " 'R-K3643S': (407.4020699650282, 409.10586411040276),\n",
       " 'R-K3653S': (421.0615704120137, 411.2041402403265),\n",
       " 'R-K3663S': (657.2614744920284, 505.40762981027365),\n",
       " 'R-K3673S': (663.0013212760678, 510.8501569405198),\n",
       " 'R-K3683S': (665.0594368700404, 516.19977461081),\n",
       " 'R-K3693S': (665.0933315180009, 522.4252553004771),\n",
       " 'R-K3703S': (647.8254478910239, 567.1788760302588),\n",
       " 'R-K3713S': (588.6165160210803, 539.9601885704324),\n",
       " 'R-K3723S': (710.6189635819755, 754.9225748302415),\n",
       " 'R-K3733S': (713.355925410986, 754.5765559701249),\n",
       " 'R-K3743S': (717.5230116429739, 752.7071913704276),\n",
       " 'R-K3753S': (727.429773595999, 732.2635787408799),\n",
       " 'R-K3763S': (731.4874339320231, 710.6819461900741),\n",
       " 'R-K3773S': (731.0416418439709, 704.7738593006507),\n",
       " 'R-K3783S': (728.6531764300307, 701.9606412500143),\n",
       " 'R-K3793S': (650.6887810120825, 793.5003202706575),\n",
       " 'R-K3803S': (681.7525346700568, 800.4103717803955),\n",
       " 'R-K3813S': (684.2046904690797, 801.6450596805662),\n",
       " 'R-K3823S': (685.4634476630017, 804.1899708304554),\n",
       " 'R-K3833S': (686.0026654300746, 807.6077224006876),\n",
       " 'R-K3843S': (681.4404943500413, 825.0938289705664),\n",
       " 'R-K3853S': (670.0130819630576, 843.6612254604697),\n",
       " 'R-SP01': (645.7441315239994, 893.4099246300757),\n",
       " 'R-K3873S': (506.7659758019727, 700.1220462303609),\n",
       " 'R-K3883S': (584.9414505650057, 313.51726518012583),\n",
       " 'R-K3893S': (604.0414649070008, 285.72817480005324),\n",
       " 'R-K3903S': (607.7117407460464, 327.9863852504641),\n",
       " 'R-K3913S': (629.9898808010621, 347.93612821027637),\n",
       " 'R-K3923S': (641.4529126430862, 355.3576409900561),\n",
       " 'R-K3933S': (654.1732907739934, 363.2418909901753),\n",
       " 'R-K3943S': (664.9102809739998, 369.39824583008885),\n",
       " 'R-K3953S': (675.9157657610485, 378.61627696081996),\n",
       " 'R-K3963S': (683.0667157609714, 386.72120867017657),\n",
       " 'R-K3973S': (686.8671614880441, 396.2386000100523),\n",
       " 'R-K3983S': (689.1022479480598, 408.33166125044227),\n",
       " 'R-K3993S': (688.2762373470468, 445.5761969704181),\n",
       " 'R-K4003S': (695.0661715629976, 460.50308709032834),\n",
       " 'R-K4013S': (717.0686046960764, 490.2626524101943),\n",
       " 'R-K4023S': (726.6708489740267, 510.56968167051673),\n",
       " 'R-K4033S': (729.4217756290454, 521.3586053708568),\n",
       " 'R-K4043S': (728.6656052430626, 540.0895076906309),\n",
       " 'R-K4053S': (720.6329735480249, 566.8997150408104),\n",
       " 'R-K4063S': (709.275060501066, 597.327982250601),\n",
       " 'R-SP02': (250.82189701497555, 698.0787065206096),\n",
       " 'R-K4083S': (265.75513333198614, 729.232837070711),\n",
       " 'R-K4093S': (281.47382583108265, 769.5488116107881),\n",
       " 'R-K4103S': (287.3205731550697, 779.4155618203804),\n",
       " 'R-K4113S': (229.41443554207217, 743.9471223000437),\n",
       " 'R-K4123S': (360.80785506102256, 830.0986297708005),\n",
       " 'R-K4133S': (378.52636052807793, 854.5512014701962),\n",
       " 'R-K4143S': (392.8697698400356, 862.2887580804527),\n",
       " 'R-E0': (620.0773658100516, 28.726164679974318),\n",
       " 'R-K4163S': (614.8046950279968, 43.143989000469446),\n",
       " 'R-K4173S': (614.6209214359988, 55.651586660183966),\n",
       " 'R-K4183S': (1267.6991815640358, 670.4611622206867),\n",
       " 'R-K4193S': (1272.5977117950097, 661.0949249602854),\n",
       " 'R-K4203S': (1282.9571489490336, 650.8362796902657),\n",
       " 'R-K4213S': (1302.7749022149947, 652.4067442901433),\n",
       " 'R-K4223S': (1326.754110782058, 657.1854664999992),\n",
       " 'R-K4233S': (1326.9031305860262, 680.7965711504221),\n",
       " 'R-K4243S': (1292.3944729580544, 718.303416820243),\n",
       " 'R-K4253S': (1278.9519784000004, 734.817291890271),\n",
       " 'R-K4263S': (1265.5044623559806, 744.0601897006854),\n",
       " 'R-K4273S': (1247.1844850389753, 754.6313443202525),\n",
       " 'R-K4283S': (1241.2952813319862, 757.6554023306817),\n",
       " 'R-K4293S': (1235.9074297330808, 757.6266454504803),\n",
       " 'R-K4303S': (1226.9392026379937, 751.1286347107962),\n",
       " 'R-K4313S': (1318.6363938850118, 732.8607026701793),\n",
       " 'R-K4323S': (1317.9180229330668, 739.5123009299859),\n",
       " 'R-K4333S': (1320.7692306450335, 761.1729271700606),\n",
       " 'R-K4343S': (1326.3264979299856, 779.2019328605384),\n",
       " 'R-K4353S': (1204.3060502490262, 661.6493628099561),\n",
       " 'R-K4363S': (1228.4944486169843, 673.0611025402322),\n",
       " 'R-K4373S': (1245.4183473989833, 668.4571107402444),\n",
       " 'R-K4383S': (1260.6389135729987, 667.1913771005347),\n",
       " 'R-K4393S': (1281.929793954012, 702.4585976302624),\n",
       " 'R-K4403S': (1303.6037379120244, 727.3752445001155),\n",
       " 'R-K4413S': (174.8581824330613, 238.6020923005417),\n",
       " 'R-K4423S': (209.31062656198628, 223.58850231021643),\n",
       " 'R-K4433S': (212.52229876897763, 222.08108952082694),\n",
       " 'R-K4443S': (244.1942209880799, 207.25637100078166),\n",
       " 'R-K4453S': (340.25561840098817, 162.6917978003621),\n",
       " 'R-K4463S': (359.1193050449947, 871.6395799200982),\n",
       " 'R-K4473S': (217.91495249199215, 431.9460173603147),\n",
       " 'R-K4483S': (249.04613675107248, 437.41974159050733),\n",
       " 'R-K4493S': (273.71188091498334, 445.89555407036096),\n",
       " 'R-K4503S': (304.36599327099975, 458.2536706700921),\n",
       " 'R-K4513S': (614.3946785969893, 89.35727847088128),\n",
       " 'R-K4523S': (617.0396318250569, 76.10276059061289),\n",
       " 'R-K4533S': (624.2783611200284, 71.79631103016436),\n",
       " 'R-K4543S': (376.91533914906904, 374.1957589806989),\n",
       " 'R-K4553S': (343.1955995099852, 358.4736291700974),\n",
       " 'R-K4563S': (559.3574451539898, 573.0959311407059),\n",
       " 'R-K4573S': (1414.720271039987, 749.7453860500827),\n",
       " 'R-K4583S': (1406.531994192046, 747.7547094300389),\n",
       " 'R-K4593S': (1384.3812349060318, 742.3704360704869),\n",
       " 'R-K4603S': (1351.5614267439814, 736.9328258503228),\n",
       " 'R-K4613S': (1333.0140571850352, 734.0997227104381),\n",
       " 'R-K4623S': (577.3422412839718, 268.272471700795),\n",
       " 'R-K4633S': (392.3489042130532, 476.073368110694),\n",
       " 'R-K4643S': (614.525026511983, 61.91635824088007),\n",
       " 'R-K4653S': (409.61832717899233, 312.56034822016954),\n",
       " 'R-K4663S': (427.0918595379917, 277.52348264027387),\n",
       " 'R-K4673S': (430.6402992870426, 263.949025740847),\n",
       " 'R-K4683S': (67.61188671702985, 1069.7910821205005),\n",
       " 'R-K4693S': (101.64578095101751, 1014.7547607300803),\n",
       " 'R-K4703S': (154.51333880005404, 953.4957521203905),\n",
       " 'R-K4713S': (229.6166634670226, 884.3923795502633),\n",
       " 'R-K4723S': (483.61054699204396, 765.4153362307698),\n",
       " 'R-K4733S': (499.651653234032, 769.5918382899836),\n",
       " 'R-K4743S': (515.1366058280692, 746.3777168104425),\n",
       " 'R-K4753S': (488.19577243202366, 713.5805639103055),\n",
       " 'R-K4763S': (477.68208473105915, 706.3200984103605),\n",
       " 'R-K4773S': (207.26439043798018, 195.09137698076665),\n",
       " 'R-K4783S': (206.3155329860747, 189.79778080061078),\n",
       " 'R-K4793S': (205.73346935003065, 187.0798429204151),\n",
       " 'R-K4803S': (206.38347756303847, 184.92369465064257),\n",
       " 'R-K4813S': (211.33257542003412, 176.9170055501163),\n",
       " 'R-K4823S': (211.80268114001956, 173.7403923906386),\n",
       " 'R-K4833S': (210.98256466304883, 171.26895690057427),\n",
       " 'R-K4843S': (208.5621421940159, 166.04971578065306),\n",
       " 'R-K4853S': (199.67358884308487, 150.43782069999725),\n",
       " 'R-K4863S': (365.9108060670551, 661.0401811404154),\n",
       " 'R-K4873S': (380.59219566104, 684.6354424906895),\n",
       " 'R-K4883S': (299.6941978969844, 512.9910366106778),\n",
       " 'R-K4893S': (1165.121320132981, 562.9605510905385),\n",
       " 'R-K4903S': (1141.2729640250327, 571.1483778106049),\n",
       " 'R-K4913S': (1128.8296807439765, 576.3570462204516),\n",
       " 'R-K4923S': (1121.9158080490306, 581.8005108106881),\n",
       " 'R-K4933S': (1116.1780749750324, 591.2999480701983),\n",
       " 'R-K4943S': (1402.7456085570157, 764.6816520700231),\n",
       " 'R-K4953S': (1395.5606884410372, 784.0318876206875),\n",
       " 'V-TS-P': (577.8673863551812, 322.15768795553595),\n",
       " 'R-TS-P': (579.8673863552976, 322.15768795553595),\n",
       " 'V-TS-S': (578.6320307367714, 320.85560535266995),\n",
       " 'R-TS-S': (580.6320307368878, 320.85560535266995)}"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.nodeposDctNx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39a0b9e8-a0d3-474d-a304-0e0af47b08e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
