{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "da346618-28c2-42ed-b479-4921281db7d9",
   "metadata": {},
   "source": [
    "# UML Diagram Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e27eb108-ae8b-446e-94dd-6cbdf17d57d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install pylint nbqa graphviz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77bad712-28f0-4d0d-9eba-d7681f5e46a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#conda install -c conda-forge graphviz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aac0fb82-426f-4c61-b4d8-ecb208c99716",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip show pylint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "42698dea-b5f7-48e7-a47d-03b0e41fbc98",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import os\n",
    "import os\n",
    "import subprocess\n",
    "from IPython.display import Image\n",
    "from graphviz import Digraph\n",
    "from IPython.display import Image, display"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c242be5a-6735-47a1-b7dd-2645e238e42e",
   "metadata": {},
   "source": [
    "## Class Diagram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a85ffc36-cc0c-4bc8-a95a-4557027434fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "project_root = r'C:\\Users\\jablonski\\3S\\PT3S'\n",
    "output_dir = r'C:\\Users\\jablonski\\3S\\PT3S\\sphinx_docs\\uml'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74aac340-bb07-4f96-adca-709fb0a3ba18",
   "metadata": {},
   "outputs": [],
   "source": [
    "modules = [\n",
    "    'Am.py', 'conf.py', 'Dx.py', 'dxAndMxHelperFcts.py', 'dxAecodeObjsAata.py',\n",
    "    'Lx.py', 'Mx.py', 'ncd.py', 'NFA.py', 'pNFA.py', 'Rm.py', 'sdfCsv.py', 'setup.py',\n",
    "    'Xm.py', 'lds/rpts.py', 'lds/__init__.py', 'UTILS/Ab.py', 'UTILS/Xml.py', 'UTILS/__init__.py'\n",
    "]\n",
    "modules = [\n",
    "    'Dx.py', 'dxAndMxHelperFcts.py', 'Mx.py'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e45f76d1-bb14-412b-a6ea-d636d0134c85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change to the directory containing your project\n",
    "os.chdir(r'C:\\Users\\jablonski\\3S\\PT3S\\sphinx_docs\\uml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "712eb969-3533-4cd0-856e-bcffb1e0c1fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!python \"C:\\Users\\jablonski\\AppAata\\Local\\anaconda3\\Scripts\\pyreverse-script.py\" -o html -p PT3S ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2ef3c7aa-3901-4234-9eb7-23d099b36527",
   "metadata": {},
   "outputs": [],
   "source": [
    "for module in modules:\n",
    "    module_path = os.path.join(project_root, module)\n",
    "    output_prefix = os.path.splitext(os.path.basename(module))[0]\n",
    "    \n",
    "    # Run pyreverse command\n",
    "    command = [\n",
    "        'pyreverse', '-o', 'png', '-p', output_prefix, '-d', output_dir, module_path\n",
    "    ]\n",
    "    subprocess.run(command, check=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a3d890e3-499f-4baa-bb99-81b77a7c9604",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "def crop_image(image_path, x_percent):\n",
    "    # Open an image file\n",
    "    with Image.open(image_path) as img:\n",
    "        # Calculate the cropping box\n",
    "        width, height = img.size\n",
    "        new_width = width - int(width * (x_percent / 100))\n",
    "        box = (0, 0, new_width, height)\n",
    "        \n",
    "        # Crop the image\n",
    "        cropped_img = img.crop(box)\n",
    "        \n",
    "        # Save the cropped image with '_cropped' suffix\n",
    "        base, ext = os.path.splitext(image_path)\n",
    "        cropped_image_path = f\"{base}_cropped{ext}\"\n",
    "        cropped_img.save(cropped_image_path)\n",
    "        \n",
    "        return cropped_image_path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4c4fedf7-acc1-45bc-8b83-316161c2d3d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "image_path = r'C:\\\\Users\\\\jablonski\\\\3S\\\\PT3S\\\\sphinx_docs\\\\uml\\\\classes_dxAndMxHelperFcts.png'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9c7f15d5-616d-4413-8d08-4aef4918242b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_percent = 72 # Percentage to crop from the right"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "af14d6ec-1fb2-4db1-b681-1db2be14d2fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cropped image saved at: C:\\\\Users\\\\jablonski\\\\3S\\\\PT3S\\\\sphinx_docs\\\\uml\\\\classes_dxAndMxHelperFcts_cropped.png\n"
     ]
    }
   ],
   "source": [
    "cropped_image_path = crop_image(image_path, x_percent)\n",
    "print(f\"Cropped image saved at: {cropped_image_path}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82814b65-7cf8-4aaf-aeb6-3e6ac2b95f88",
   "metadata": {},
   "source": [
    "## Diagram 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "977d5f68-3273-4661-b42e-098e9eac2efb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'dxWithMx_diagram.png'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dot = Digraph()\n",
    "\n",
    "# Main node in its own cluster\n",
    "with dot.subgraph(name='cluster_root') as c:\n",
    "    c.attr(label='', color='white', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A', 'dxWithMx', color='white', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "\n",
    "# Dx object and its attributes\n",
    "dot.node('B', 'Dx object', color='blue', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "dot.edge('A', 'B')\n",
    "\n",
    "with dot.subgraph(name='cluster_0') as c:\n",
    "    c.attr(label='Dx object Group', color='blue', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('B1', 'dx.dataFrames', color='blue', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.edge('B', 'B1')\n",
    "\n",
    "# Mx object and its attributes\n",
    "dot.node('C', 'Mx object', color='red', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "dot.edge('A', 'C')\n",
    "\n",
    "with dot.subgraph(name='cluster_1') as c:\n",
    "    c.attr(label='Mx object Group', color='red', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('C1', 'mx.df', color='red', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('C2', 'mx.dfVecAggs', color='red', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.edge('C', 'C1')\n",
    "    c.edge('C', 'C2')\n",
    "\n",
    "# Miscellaneous attributes\n",
    "with dot.subgraph(name='cluster_2') as c:\n",
    "    c.attr(label='Miscellaneous Group', color='pink', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A13', 'wDirMx', color='pink', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A14', 'SirCalcXmlFile', color='pink', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A15', 'SirCalcExeFile', color='pink', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.edge('A', 'A13')\n",
    "    c.edge('A', 'A14')\n",
    "    c.edge('A', 'A15')\n",
    "\n",
    "# pandas-Dfs with Model AND Result Data\n",
    "with dot.subgraph(name='cluster_3') as c:\n",
    "    c.attr(label='pandas-Dfs Group', color='purple', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A1', 'V3_ROHR', color='purple', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A2', 'V3_FWVB', color='purple', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A3', 'V3_KNOT', color='purple', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A4', 'V3_VBEL', color='purple', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A5', 'V3_ROHRVEC', color='purple', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A6', 'V3_AGSN', color='purple', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A7', 'V3_AGSNVEC', color='purple', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.edge('A', 'A1')\n",
    "    c.edge('A', 'A2')\n",
    "    c.edge('A', 'A3')\n",
    "    c.edge('A', 'A4')\n",
    "    c.edge('A', 'A5')\n",
    "    c.edge('A', 'A6')\n",
    "    c.edge('A', 'A7')\n",
    "\n",
    "# geopandas-Dfs\n",
    "with dot.subgraph(name='cluster_4') as c:\n",
    "    c.attr(label='geopandas-Dfs Group', color='orange', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A8', 'gdf_ROHR', color='orange', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A9', 'gdf_FWVB', color='orange', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A10', 'gdf_KNOT', color='orange', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.edge('A', 'A8')\n",
    "    c.edge('A', 'A9')\n",
    "    c.edge('A', 'A10')\n",
    "\n",
    "# NetworkX-Graphs\n",
    "with dot.subgraph(name='cluster_5') as c:\n",
    "    c.attr(label='NetworkX-Graphs Group', color='lime', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A11', 'G', color='lime', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.node('A12', 'GSig', color='lime', style='filled', fontsize='14', fontname='Arial Bold')\n",
    "    c.edge('A', 'A11')\n",
    "    c.edge('A', 'A12')\n",
    "\n",
    "# Set the direction of the graph layout to left-to-right\n",
    "dot.attr(rankdir='LR')\n",
    "\n",
    "# Save the diagram to the specified path\n",
    "dot.render('dxWithMx_diagram', format='png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "de91404f-5b60-48b1-b0d9-07f83011e13a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "\n",
    "img = mpimg.imread('dxWithMx_diagram.png')\n",
    "imgplot = plt.imshow(img)\n",
    "plt.axis('off')  # Hide axes\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "df6e83fb-122c-4998-8bcb-414b028afb96",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "\n",
    "# Open the images\n",
    "image1 = Image.open('classes_dxAndMxHelperFcts_cropped.png')\n",
    "image2 = Image.open('dxWithMx_diagram.png')\n",
    "\n",
    "# Resize images to have the same height\n",
    "height = max(image1.height, image2.height)\n",
    "image1 = image1.resize((int(image1.width * height / image1.height), height))\n",
    "image2 = image2.resize((int(image2.width * height / image2.height), height))\n",
    "\n",
    "# Create a new image with the combined width of both images\n",
    "combined_width = image1.width + image2.width\n",
    "new_image = Image.new('RGB', (combined_width, height))\n",
    "\n",
    "# Paste the images side by side\n",
    "new_image.paste(image1, (0, 0))\n",
    "new_image.paste(image2, (image1.width, 0))\n",
    "\n",
    "# Save the new image\n",
    "new_image.save('combined_image.png')\n",
    "\n",
    "# Display the new image\n",
    "new_image.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "361ba51f-1362-4bfd-84c6-e72b08af6a19",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
